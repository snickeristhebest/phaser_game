{
  "version": 3,
  "sources": ["../../phaser-box2d/dist/PhaserBox2D.js"],
  "sourcesContent": ["/**\n * @license\n * Phaser Box2D v1.1.0\n * Wednesday 1 January 2025 at 15:57\n * \n * This library includes code that is ported from the original C version. The original C code is Copyright 2023 Erin Catto\n * and was released under the MIT license. The JavaScript port of the C code along with all additional code is\n * Copyright 2025 Phaser Studio Inc and is released under the MIT license.\n */\n\n// src/math_functions_c.js\nfunction b2GetLengthAndNormalize(v) {\n  const length = b2Length(v);\n  if (length < eps) {\n    return { length: 0, normal: new b2Vec2(0, 0) };\n  }\n  const invLength = 1 / length;\n  return { length, normal: new b2Vec2(invLength * v.x, invLength * v.y) };\n}\n\n// src/include/math_functions_h.js\nvar B2_PI = 3.14159265359;\nvar eps = 1e-10;\nvar epsSqr = eps * eps;\nvar GlobalDebug = {\n  b2Vec2Count: 0,\n  b2Rot2Count: 0,\n  b2ManifoldCount: 0,\n  b2ManifoldPointCount: 0,\n  b2FrameCount: 0,\n  b2PolyCollideCount: 0,\n  b2ContactSimCount: 0,\n  b2TOIInputCount: 0,\n  b2ShapeCastPairInputCount: 0,\n  b2SweepCount: 0\n};\nvar b2Vec2Where = {\n  calls: {}\n};\nvar b2Rot2Where = {\n  calls: {}\n};\nvar b2ManifoldPointWhere = {\n  calls: {}\n};\nvar b2Vec2 = class _b2Vec2 {\n  constructor(x = 0, y = 0) {\n    this.x = x;\n    this.y = y;\n  }\n  copy(v) {\n    this.x = v.x;\n    this.y = v.y;\n    return this;\n  }\n  clone() {\n    return new _b2Vec2(this.x, this.y);\n  }\n};\nvar b2Rot = class _b2Rot {\n  constructor(c2 = 1, s = 0) {\n    this.c = c2;\n    this.s = s;\n  }\n  copy(r) {\n    this.c = r.c;\n    this.s = r.s;\n    return this;\n  }\n  clone() {\n    return new _b2Rot(this.c, this.s);\n  }\n};\nvar b2Transform = class _b2Transform {\n  constructor(p4 = null, q3 = null) {\n    this.p = p4;\n    this.q = q3;\n  }\n  static identity() {\n    return new _b2Transform(new b2Vec2(), new b2Rot());\n  }\n  clone() {\n    const xf2 = new _b2Transform(this.p, this.q);\n    return xf2;\n  }\n  deepClone() {\n    const xf2 = new _b2Transform(this.p.clone(), this.q.clone());\n    return xf2;\n  }\n};\nvar b2Mat22 = class _b2Mat22 {\n  constructor(cx = new b2Vec2(), cy = new b2Vec2()) {\n    this.cx = cx;\n    this.cy = cy;\n  }\n  clone() {\n    return new _b2Mat22(this.cx.clone(), this.cy.clone());\n  }\n};\nvar b2AABB = class {\n  constructor(lowerx = 0, lowery = 0, upperx = 0, uppery = 0) {\n    this.lowerBoundX = lowerx;\n    this.lowerBoundY = lowery;\n    this.upperBoundX = upperx;\n    this.upperBoundY = uppery;\n  }\n};\nfunction b2MinFloat(a, b) {\n  return a < b ? a : b;\n}\nfunction b2MaxFloat(a, b) {\n  return a > b ? a : b;\n}\nfunction b2AbsFloat(a) {\n  return a < 0 ? -a : a;\n}\nfunction b2ClampFloat(a, lower, upper) {\n  return a < lower ? lower : a > upper ? upper : a;\n}\nfunction b2MinInt(a, b) {\n  return a < b ? a : b;\n}\nfunction b2MaxInt(a, b) {\n  return a > b ? a : b;\n}\nfunction b2AbsInt(a) {\n  return a < 0 ? -a : a;\n}\nfunction b2ClampInt(a, lower, upper) {\n  return a < lower ? lower : a > upper ? upper : a;\n}\nfunction b2Dot(a, b) {\n  return a.x * b.x + a.y * b.y;\n}\nfunction b2Cross(a, b) {\n  return a.x * b.y - a.y * b.x;\n}\nfunction b2CrossVS(v, s) {\n  return new b2Vec2(s * v.y, -s * v.x);\n}\nfunction b2CrossSV(s, v) {\n  return new b2Vec2(-s * v.y, s * v.x);\n}\nfunction b2LeftPerp(v) {\n  return new b2Vec2(-v.y, v.x);\n}\nfunction b2RightPerp(v) {\n  return new b2Vec2(v.y, -v.x);\n}\nfunction b2Add(a, b) {\n  return new b2Vec2(a.x + b.x, a.y + b.y);\n}\nfunction b2Sub(a, b) {\n  return new b2Vec2(a.x - b.x, a.y - b.y);\n}\nfunction b2Neg(a) {\n  return new b2Vec2(-a.x, -a.y);\n}\nfunction b2Lerp(a, b, t) {\n  return new b2Vec2((1 - t) * a.x + t * b.x, (1 - t) * a.y + t * b.y);\n}\nfunction b2Mul(a, b) {\n  return new b2Vec2(a.x * b.x, a.y * b.y);\n}\nfunction b2MulSV(s, v) {\n  return new b2Vec2(s * v.x, s * v.y);\n}\nfunction b2MulAdd(a, s, b) {\n  return new b2Vec2(a.x + s * b.x, a.y + s * b.y);\n}\nfunction b2MulAddOut(a, s, b, out) {\n  out.x = a.x + s * b.x;\n  out.y = a.y + s * b.y;\n}\nfunction b2MulSub(a, s, b) {\n  return new b2Vec2(a.x - s * b.x, a.y - s * b.y);\n}\nfunction b2DotSub(sub1, sub2, dot) {\n  const subX = sub1.x - sub2.x;\n  const subY = sub1.y - sub2.y;\n  return subX * dot.x + subY * dot.y;\n}\nfunction b2Abs(a) {\n  return new b2Vec2(Math.abs(a.x), Math.abs(a.y));\n}\nfunction b2Min(a, b) {\n  return new b2Vec2(Math.min(a.x, b.x), Math.min(a.y, b.y));\n}\nfunction b2Max(a, b) {\n  return new b2Vec2(Math.max(a.x, b.x), Math.max(a.y, b.y));\n}\nfunction b2Clamp(v, a, b) {\n  return new b2Vec2(\n    b2ClampFloat(v.x, a.x, b.x),\n    b2ClampFloat(v.y, a.y, b.y)\n  );\n}\nfunction b2Length(v) {\n  return Math.sqrt(v.x * v.x + v.y * v.y);\n}\nfunction b2LengthXY(x, y) {\n  return Math.sqrt(x * x + y * y);\n}\nfunction b2LengthSquared(v) {\n  return v.x * v.x + v.y * v.y;\n}\nfunction b2Distance(a, b) {\n  const dx = b.x - a.x;\n  const dy = b.y - a.y;\n  return Math.sqrt(dx * dx + dy * dy);\n}\nfunction b2DistanceSquared(a, b) {\n  const dx = b.x - a.x;\n  const dy = b.y - a.y;\n  return dx * dx + dy * dy;\n}\nfunction b2MakeRot(angle) {\n  return new b2Rot(Math.cos(angle), Math.sin(angle));\n}\nfunction b2NormalizeRot(q3) {\n  const mag = Math.sqrt(q3.s * q3.s + q3.c * q3.c);\n  const invMag = mag > 0 ? 1 / mag : 0;\n  return new b2Rot(q3.c * invMag, q3.s * invMag);\n}\nfunction b2InvMagRot(c2, s) {\n  const mag = Math.sqrt(s * s + c2 * c2);\n  const invMag = mag > 0 ? 1 / mag : 0;\n  return invMag;\n}\nfunction b2IsNormalized(q3) {\n  const qq = q3.s * q3.s + q3.c * q3.c;\n  return 1 - 6e-4 < qq && qq < 1 + 6e-4;\n}\nfunction b2NLerp(q12, q22, t) {\n  const omt = 1 - t;\n  const q3 = new b2Rot(\n    omt * q12.c + t * q22.c,\n    omt * q12.s + t * q22.s\n  );\n  return b2NormalizeRot(q3);\n}\nfunction b2IntegrateRotation(q12, deltaAngle) {\n  const q2C = q12.c - deltaAngle * q12.s;\n  const q2S = q12.s + deltaAngle * q12.c;\n  const mag = Math.sqrt(q2S * q2S + q2C * q2C);\n  const invMag = mag > 0 ? 1 / mag : 0;\n  return new b2Rot(q2C * invMag, q2S * invMag);\n}\nfunction b2IntegrateRotationOut(q12, deltaAngle, out) {\n  const q2C = q12.c - deltaAngle * q12.s;\n  const q2S = q12.s + deltaAngle * q12.c;\n  const mag = Math.sqrt(q2S * q2S + q2C * q2C);\n  const invMag = mag > 0 ? 1 / mag : 0;\n  out.c = q2C * invMag;\n  out.s = q2S * invMag;\n}\nfunction b2ComputeAngularVelocity(q12, q22, inv_h) {\n  return inv_h * (q22.s * q12.c - q22.c * q12.s);\n}\nfunction b2Rot_GetAngle(q3) {\n  return Math.atan2(q3.s, q3.c);\n}\nfunction b2Rot_GetXAxis(q3) {\n  return new b2Vec2(q3.c, q3.s);\n}\nfunction b2Rot_GetYAxis(q3) {\n  return new b2Vec2(-q3.s, q3.c);\n}\nfunction b2MulRot(q3, r) {\n  return new b2Rot(\n    q3.c * r.c - q3.s * r.s,\n    q3.s * r.c + q3.c * r.s\n  );\n}\nfunction b2MulRotC(q3, r) {\n  return q3.c * r.c - q3.s * r.s;\n}\nfunction b2MulRotS(q3, r) {\n  return q3.s * r.c + q3.c * r.s;\n}\nfunction b2InvMulRot(q3, r) {\n  return new b2Rot(\n    q3.c * r.c + q3.s * r.s,\n    q3.c * r.s - q3.s * r.c\n  );\n}\nfunction b2RelativeAngle(b, a) {\n  const s = b.s * a.c - b.c * a.s;\n  const c2 = b.c * a.c + b.s * a.s;\n  return Math.atan2(s, c2);\n}\nfunction b2UnwindAngle(angle) {\n  if (angle < -B2_PI) {\n    return angle + 2 * B2_PI;\n  } else if (angle > B2_PI) {\n    return angle - 2 * B2_PI;\n  }\n  return angle;\n}\nfunction b2RotateVector(q3, v) {\n  return new b2Vec2(q3.c * v.x - q3.s * v.y, q3.s * v.x + q3.c * v.y);\n}\nfunction b2InvRotateVector(q3, v) {\n  return new b2Vec2(q3.c * v.x + q3.s * v.y, -q3.s * v.x + q3.c * v.y);\n}\nfunction b2TransformPoint(t, p4) {\n  const x = t.q.c * p4.x - t.q.s * p4.y + t.p.x;\n  const y = t.q.s * p4.x + t.q.c * p4.y + t.p.y;\n  return new b2Vec2(x, y);\n}\nfunction b2TransformPointOut(t, p4, out) {\n  const x = t.q.c * p4.x - t.q.s * p4.y + t.p.x;\n  const y = t.q.s * p4.x + t.q.c * p4.y + t.p.y;\n  out.x = x;\n  out.y = y;\n}\nfunction b2TransformPointOutXf(t, p4, out) {\n  out.p.x = t.q.c * p4.x - t.q.s * p4.y + t.p.x;\n  out.p.y = t.q.s * p4.x + t.q.c * p4.y + t.p.y;\n  out.q.c = t.q.c;\n  out.q.s = t.q.s;\n}\nfunction b2InvTransformPoint(t, p4) {\n  const vx = p4.x - t.p.x;\n  const vy = p4.y - t.p.y;\n  return new b2Vec2(t.q.c * vx + t.q.s * vy, -t.q.s * vx + t.q.c * vy);\n}\nfunction b2MulTransforms(A, B) {\n  const C = new b2Transform();\n  C.q = b2MulRot(A.q, B.q);\n  C.p = b2Add(b2RotateVector(A.q, B.p), A.p);\n  return C;\n}\nfunction b2InvMulTransforms(A, B) {\n  const C = new b2Transform(new b2Vec2(), new b2Rot());\n  C.q.c = A.q.c * B.q.c + A.q.s * B.q.s;\n  C.q.s = A.q.c * B.q.s - A.q.s * B.q.c;\n  const subX = B.p.x - A.p.x;\n  const subY = B.p.y - A.p.y;\n  C.p.x = A.q.c * subX + A.q.s * subY;\n  C.p.y = -A.q.s * subX + A.q.c * subY;\n  return C;\n}\nfunction b2InvMulTransformsOut(A, B, out) {\n  const C = out;\n  C.q.c = A.q.c * B.q.c + A.q.s * B.q.s;\n  C.q.s = A.q.c * B.q.s - A.q.s * B.q.c;\n  const subX = B.p.x - A.p.x;\n  const subY = B.p.y - A.p.y;\n  C.p.x = A.q.c * subX + A.q.s * subY;\n  C.p.y = -A.q.s * subX + A.q.c * subY;\n}\nfunction b2MulMV(A, v) {\n  return new b2Vec2(\n    A.cx.x * v.x + A.cy.x * v.y,\n    A.cx.y * v.x + A.cy.y * v.y\n  );\n}\nfunction b2GetInverse22(A) {\n  const a = A.cx.x, b = A.cy.x, c2 = A.cx.y, d = A.cy.y;\n  let det = a * d - b * c2;\n  if (det !== 0) {\n    det = 1 / det;\n  }\n  return new b2Mat22(\n    new b2Vec2(det * d, -det * c2),\n    new b2Vec2(-det * b, det * a)\n  );\n}\nfunction b2Solve22(A, b) {\n  const a11 = A.cx.x, a12 = A.cy.x, a21 = A.cx.y, a22 = A.cy.y;\n  let det = a11 * a22 - a12 * a21;\n  if (det !== 0) {\n    det = 1 / det;\n  }\n  return new b2Vec2(\n    det * (a22 * b.x - a12 * b.y),\n    det * (a11 * b.y - a21 * b.x)\n  );\n}\nfunction b2AABB_Contains(a, b) {\n  return a.lowerBoundX <= b.lowerBoundX && a.lowerBoundY <= b.lowerBoundY && b.upperBoundX <= a.upperBoundX && b.upperBoundY <= a.upperBoundY;\n}\nfunction b2AABB_Center(a) {\n  return new b2Vec2(\n    0.5 * (a.lowerBoundX + a.upperBoundX),\n    0.5 * (a.lowerBoundY + a.upperBoundY)\n  );\n}\nfunction b2AABB_Extents(a) {\n  return new b2Vec2(\n    0.5 * (a.upperBoundX - a.lowerBoundX),\n    0.5 * (a.upperBoundY - a.lowerBoundY)\n  );\n}\nfunction b2AABB_Union(a, b) {\n  const c2 = new b2AABB();\n  c2.lowerBoundX = Math.min(a.lowerBoundX, b.lowerBoundX);\n  c2.lowerBoundY = Math.min(a.lowerBoundY, b.lowerBoundY);\n  c2.upperBoundX = Math.max(a.upperBoundX, b.upperBoundX);\n  c2.upperBoundY = Math.max(a.upperBoundY, b.upperBoundY);\n  return c2;\n}\nfunction b2IsValid(a) {\n  return isFinite(a) && !isNaN(a);\n}\nfunction b2Vec2_IsValid(v) {\n  return v && b2IsValid(v.x) && b2IsValid(v.y);\n}\nfunction b2Rot_IsValid(q3) {\n  return q3 && b2IsValid(q3.s) && b2IsValid(q3.c) && b2IsNormalized(q3);\n}\nfunction b2AABB_IsValid(aabb) {\n  if (!aabb) {\n    return false;\n  }\n  const dx = aabb.upperBoundX - aabb.lowerBoundX;\n  const dy = aabb.upperBoundY - aabb.lowerBoundY;\n  const valid = dx >= 0 && dy >= 0;\n  return valid && b2IsValid(aabb.lowerBoundX) && b2IsValid(aabb.lowerBoundY) && b2IsValid(aabb.upperBoundX) && b2IsValid(aabb.upperBoundY);\n}\nfunction b2Normalize(v) {\n  if (!v) {\n  }\n  const length = b2Length(v);\n  if (length > eps) {\n    const invLength = 1 / length;\n    return new b2Vec2(v.x * invLength, v.y * invLength);\n  }\n  return new b2Vec2(0, 0);\n}\nfunction b2NormalizeChecked(v) {\n  const length = b2Length(v);\n  const invLength = 1 / length;\n  return new b2Vec2(v.x * invLength, v.y * invLength);\n}\n\n// src/include/base_h.js\nvar b2Version = class {\n  constructor(major = 0, minor = 0, revision = 0) {\n    this.major = major;\n    this.minor = minor;\n    this.revision = revision;\n  }\n};\n\n// src/core_c.js\nvar b2_lengthUnitsPerMeter = 1;\nvar B2_NULL_INDEX = -1;\nfunction b2SetLengthUnitsPerMeter(lengthUnits) {\n  b2_lengthUnitsPerMeter = lengthUnits;\n}\nfunction b2GetLengthUnitsPerMeter() {\n  return b2_lengthUnitsPerMeter;\n}\nfunction b2SetAssertFcn(assertFcn) {\n}\nfunction b2GetVersion() {\n  return new b2Version(3, 0, 0);\n}\n\n// src/include/core_h.js\nvar b2_lengthUnitsPerMeter2 = 1;\nvar B2_HUGE = 1e5 * b2_lengthUnitsPerMeter2;\nvar b2_graphColorCount = 2;\nvar b2_linearSlop = 5e-3 * b2_lengthUnitsPerMeter2;\nvar B2_MAX_ROTATION = 0.25 * Math.PI;\nvar b2_speculativeDistance = 4 * b2_linearSlop;\nvar b2_aabbMargin = 0.1 * b2_lengthUnitsPerMeter2;\nvar b2_timeToSleep = 0.5;\nfunction b2SetAllocator() {\n}\nfunction b2GetByteCount() {\n}\nfunction b2CreateTimer() {\n}\nfunction b2GetTicks() {\n}\nfunction b2GetMilliseconds() {\n}\nfunction b2GetMillisecondsAndReset(timer) {\n}\nfunction b2SleepMilliseconds(ms) {\n}\nfunction b2Yield() {\n}\n\n// src/include/id_h.js\nvar b2WorldId = class {\n  constructor(index = 0, revision = 0) {\n    this.index1 = index;\n    this.revision = revision;\n  }\n};\nvar b2BodyId = class {\n  constructor(index = 0, world = 0, revision = 0) {\n    this.index1 = index;\n    this.world0 = world;\n    this.revision = revision;\n  }\n};\nvar b2ShapeId = class {\n  constructor(index = 0, world = 0, revision = 0) {\n    this.index1 = index;\n    this.world0 = world;\n    this.revision = revision;\n  }\n};\nvar b2JointId = class {\n  constructor(index = 0, world = 0, revision = 0) {\n    this.index1 = index;\n    this.world0 = world;\n    this.revision = revision;\n  }\n};\nvar b2ChainId = class {\n  constructor(index = 0, world = 0, revision = 0) {\n    this.index1 = index;\n    this.world0 = world;\n    this.revision = revision;\n  }\n};\nfunction B2_IS_NULL(id) {\n  return id.index1 === 0;\n}\nfunction B2_IS_NON_NULL(id) {\n  return id.index1 !== 0;\n}\nfunction B2_ID_EQUALS(id1, id2) {\n  return id1.index1 === id2.index1 && id1.world0 === id2.world0 && id1.revision === id2.revision;\n}\n\n// src/include/collision_h.js\nvar B2_MAX_POLYGON_VERTICES = 8;\nvar B2_DEFAULT_MASK_BITS = 4294967295;\nvar b2RayCastInput = class {\n  constructor() {\n    this.origin = null;\n    this.translation = null;\n    this.maxFraction = 0;\n  }\n};\nvar b2ShapeCastInput = class {\n  constructor() {\n    this.points = [];\n    this.count = 0;\n    this.radius = 0;\n    this.translation = null;\n    this.maxFraction = 0;\n  }\n};\nvar b2CastOutput = class {\n  constructor(normal = null, point = null) {\n    this.normal = normal;\n    this.point = point;\n    this.fraction = 0;\n    this.iterations = 0;\n    this.hit = false;\n  }\n};\nvar b2MassData = class {\n  constructor() {\n    this.mass = 0;\n    this.center = null;\n    this.rotationalInertia = 0;\n  }\n};\nvar b2Circle = class {\n  constructor(center = null, radius = 0) {\n    this.center = center;\n    if (!this.center) {\n      this.center = new b2Vec2(0, 0);\n    }\n    this.radius = radius;\n  }\n};\nvar b2Capsule = class {\n  constructor() {\n    this.center1 = null;\n    this.center2 = null;\n    this.radius = 0;\n  }\n};\nvar b2Polygon = class {\n  constructor(vertices) {\n    if (vertices > 0) {\n      this.vertices = new Array(vertices).fill().map(() => new b2Vec2(0, 0));\n      this.normals = new Array(vertices).fill().map(() => new b2Vec2(0, 0));\n    } else {\n      this.vertices = [];\n      this.normals = [];\n    }\n    this.centroid = null;\n    this.radius = 0;\n    this.count = 0;\n  }\n};\nvar b2Segment = class {\n  constructor(point1 = null, point2 = null) {\n    this.point1 = point1;\n    this.point2 = point2;\n  }\n};\nvar b2ChainSegment = class {\n  constructor() {\n    this.ghost1 = null;\n    this.segment = null;\n    this.ghost2 = null;\n    this.chainId = 0;\n  }\n};\nvar b2Hull = class {\n  constructor() {\n    this.points = [];\n    this.count = 0;\n  }\n};\nvar b2SegmentDistanceResult = class {\n  constructor() {\n    this.closest1 = null;\n    this.closest2 = null;\n    this.fraction1 = 0;\n    this.fraction2 = 0;\n    this.distanceSquared = 0;\n  }\n};\nvar b2DistanceProxy = class _b2DistanceProxy {\n  constructor(points = [], count = null, radius = 0) {\n    this.points = points;\n    this.count = count;\n    this.radius = radius;\n  }\n  clone() {\n    const points = [];\n    for (let i = 0, l = this.points.length; i < l; i++) {\n      points.push(this.points[i]);\n    }\n    return new _b2DistanceProxy(points, this.count, this.radius);\n  }\n};\nvar b2DistanceCache = class _b2DistanceCache {\n  constructor() {\n    this.count = 0;\n    this.indexA = [0, 0, 0];\n    this.indexB = [0, 0, 0];\n  }\n  clone() {\n    const cache = new _b2DistanceCache();\n    cache.count = this.count;\n    cache.indexA = [...this.indexA];\n    cache.indexB = [...this.indexB];\n    return cache;\n  }\n};\nvar b2DistanceInput = class {\n  constructor() {\n    this.proxyA = new b2DistanceProxy();\n    this.proxyB = new b2DistanceProxy();\n    this.transformA = new b2Transform(new b2Vec2(0, 0), new b2Rot(0, 0));\n    this.transformB = new b2Transform(new b2Vec2(0, 0), new b2Rot(0, 0));\n    this.useRadii = false;\n  }\n};\nvar b2DistanceOutput = class {\n  constructor() {\n    this.pointA = new b2Vec2(0, 0);\n    this.pointB = new b2Vec2(0, 0);\n    this.distance = 0;\n    this.iterations = 0;\n    this.simplexCount = 0;\n  }\n};\nvar b2SimplexVertex = class _b2SimplexVertex {\n  constructor() {\n    this.wA = null;\n    this.wB = null;\n    this.w = null;\n    this.a = 0;\n    this.indexA = 0;\n    this.indexB = 0;\n  }\n  clone() {\n    const sv = new _b2SimplexVertex();\n    sv.wA = this.wA.clone();\n    sv.wB = this.wB.clone();\n    sv.w = this.w.clone();\n    sv.a = this.a;\n    sv.indexA = this.indexA;\n    sv.indexB = this.indexB;\n    return sv;\n  }\n};\nvar b2Simplex = class {\n  constructor() {\n    this.v1 = new b2SimplexVertex();\n    this.v2 = new b2SimplexVertex();\n    this.v3 = new b2SimplexVertex();\n    this.count = 0;\n  }\n};\nvar b2ShapeCastPairInput = class {\n  constructor() {\n    this.proxyA = new b2DistanceProxy();\n    this.proxyB = new b2DistanceProxy();\n    this.transformA = new b2Transform(new b2Vec2(0, 0), new b2Rot(0, 0));\n    this.transformB = new b2Transform(new b2Vec2(0, 0), new b2Rot(0, 0));\n    this.translationB = new b2Vec2(0, 0);\n    this.maxFraction = 0;\n  }\n};\nvar b2Sweep = class _b2Sweep {\n  constructor(c2 = null, v1 = null, v2 = null, r1 = null, r2 = null) {\n    this.localCenter = c2;\n    this.c1 = v1;\n    this.c2 = v2;\n    this.q1 = r1;\n    this.q2 = r2;\n  }\n  clone() {\n    return new _b2Sweep(this.localCenter.clone(), this.c1.clone(), this.c2.clone(), this.q1.clone(), this.q2.clone());\n  }\n};\nvar b2TOIInput = class _b2TOIInput {\n  constructor(proxyA = null, proxyB = null, sweepA = null, sweepB = null, tMax = 0) {\n    this.proxyA = proxyA;\n    this.proxyB = proxyB;\n    this.sweepA = sweepA;\n    this.sweepB = sweepB;\n    this.tMax = tMax;\n  }\n  clone() {\n    return new _b2TOIInput(this.proxyA.clone(), this.proxyB.clone(), this.sweepA.clone(), this.sweepB.clone(), this.tMax);\n  }\n};\nvar b2TOIState = {\n  b2_toiStateUnknown: 0,\n  b2_toiStateFailed: 1,\n  b2_toiStateOverlapped: 2,\n  b2_toiStateHit: 3,\n  b2_toiStateSeparated: 4\n};\nvar b2TOIOutput = class {\n  constructor() {\n    this.state = b2TOIState.b2_toiStateUnknown;\n    this.t = 0;\n  }\n};\nvar b2ManifoldPoint = class _b2ManifoldPoint {\n  constructor() {\n    this.pointX = 0;\n    this.pointY = 0;\n    this.anchorAX = 0;\n    this.anchorAY = 0;\n    this.anchorBX = 0;\n    this.anchorBY = 0;\n    this.separation = 0;\n    this.normalImpulse = 0;\n    this.tangentImpulse = 0;\n    this.maxNormalImpulse = 0;\n    this.normalVelocity = 0;\n    this.id = 0;\n    this.persisted = false;\n  }\n  clone() {\n    const clone = new _b2ManifoldPoint();\n    clone.pointX = this.pointX;\n    clone.pointY = this.pointY;\n    clone.anchorAX = this.anchorAX;\n    clone.anchorAY = this.anchorAY;\n    clone.anchorBX = this.anchorBX;\n    clone.anchorBY = this.anchorBY;\n    clone.separation = this.separation;\n    clone.normalImpulse = this.normalImpulse;\n    clone.tangentImpulse = this.tangentImpulse;\n    clone.maxNormalImpulse = this.maxNormalImpulse;\n    clone.normalVelocity = this.normalVelocity;\n    clone.id = this.id;\n    clone.persisted = this.persisted;\n    return clone;\n  }\n  clear() {\n    this.pointX = 0;\n    this.pointY = 0;\n    this.anchorAX = 0;\n    this.anchorAY = 0;\n    this.anchorBX = 0;\n    this.anchorBY = 0;\n    this.separation = 0;\n    this.normalImpulse = 0;\n    this.tangentImpulse = 0;\n    this.maxNormalImpulse = 0;\n    this.normalVelocity = 0;\n    this.id = 0;\n    this.persisted = false;\n    return this;\n  }\n  copyTo(mp) {\n    mp.pointX = this.pointX;\n    mp.pointY = this.pointY;\n    mp.anchorAX = this.anchorAX;\n    mp.anchorAY = this.anchorAY;\n    mp.anchorBX = this.anchorBX;\n    mp.anchorBY = this.anchorBY;\n    mp.separation = this.separation;\n    mp.normalImpulse = this.normalImpulse;\n    mp.tangentImpulse = this.tangentImpulse;\n    mp.maxNormalImpulse = this.maxNormalImpulse;\n    mp.normalVelocity = this.normalVelocity;\n    mp.id = this.id;\n    mp.persisted = this.persisted;\n  }\n};\nvar b2Manifold = class _b2Manifold {\n  constructor(p14 = new b2ManifoldPoint(), p23 = new b2ManifoldPoint()) {\n    this.points = [p14, p23];\n    this.normalX = this.normalY = 0;\n    this.pointCount = 0;\n  }\n  clone() {\n    const clone = new _b2Manifold();\n    this.copyTo(clone);\n    return clone;\n  }\n  clear() {\n    if (this.points[0]) {\n      this.points[0].clear();\n    }\n    if (this.points[1]) {\n      this.points[1].clear();\n    }\n    this.normalX = this.normalY = 0;\n    this.pointCount = 0;\n    return this;\n  }\n  copyTo(manifold) {\n    this.points[0].copyTo(manifold.points[0]);\n    this.points[1].copyTo(manifold.points[1]);\n    manifold.normalX = this.normalX;\n    manifold.normalY = this.normalY;\n    manifold.pointCount = this.pointCount;\n  }\n};\nvar b2TreeNode = class {\n  constructor() {\n    this.aabb = null;\n    this.categoryBits = 0;\n    this.parent_next = B2_NULL_INDEX;\n    this.child1 = B2_NULL_INDEX;\n    this.child2 = B2_NULL_INDEX;\n    this.userData = 0;\n    this.height = -1;\n    this.enlarged = false;\n  }\n};\n\n// src/table_c.js\nfunction b2CreateSet() {\n  return /* @__PURE__ */ new Map();\n}\nfunction b2DestroySet(set) {\n  set.clear();\n}\nfunction b2ClearSet(set) {\n  set.clear();\n}\nfunction b2ContainsKey(set, key) {\n  return set.has(key);\n}\nfunction b2AddKey(set, key) {\n  if (set.has(key)) {\n    return true;\n  }\n  set.set(key, 1);\n  return false;\n}\nfunction b2RemoveKey(set, key) {\n  return set.delete(key);\n}\n\n// src/include/table_h.js\nvar B2_SHAPE_PAIR_KEY = (K1, K2) => K1 < K2 ? BigInt(K1) << 32n | BigInt(K2) : BigInt(K2) << 32n | BigInt(K1);\n\n// src/stack_allocator_c.js\nvar b2StackAllocator = class {\n  constructor() {\n    this.data = null;\n    this.entries = null;\n  }\n};\nvar b2StackEntry = class {\n  constructor() {\n    this.data = null;\n    this.name = null;\n    this.size = 0;\n  }\n};\nfunction b2CreateStackAllocator(capacity) {\n  const allocator = new b2StackAllocator();\n  allocator.data = [];\n  allocator.entries = [];\n  return allocator;\n}\nfunction b2DestroyStackAllocator(allocator) {\n  allocator.data = null;\n  allocator.entries = null;\n}\nfunction b2AllocateStackItem(alloc, size, name, ctor = null) {\n  const entry = new b2StackEntry();\n  entry.size = size;\n  entry.name = name;\n  entry.data = [];\n  for (let i = 0; i < size; i++) {\n    if (ctor) {\n      entry.data.push(ctor());\n    } else {\n      entry.data.push(null);\n    }\n  }\n  alloc.entries.push(entry);\n  return entry.data;\n}\nfunction b2FreeStackItem(alloc, mem) {\n  const entryCount = alloc.entries.length;\n  const entry = alloc.entries[entryCount - 1];\n  alloc.entries.pop();\n}\n\n// src/allocate_c.js\nfunction b2Alloc(size, initCallback = null) {\n  const ptr = [];\n  if (initCallback) {\n    for (let i = 0; i < size; i++) {\n      ptr[i] = initCallback();\n    }\n  }\n  return ptr;\n}\nfunction b2Grow(mem, newSize, initCallback = null) {\n  const oldSize = mem.length;\n  if (initCallback) {\n    for (let i = oldSize; i < newSize; i++) {\n      mem[i] = initCallback();\n    }\n  }\n  return mem;\n}\n\n// src/types_c.js\nvar b2Validation = false;\nfunction b2DefaultWorldDef() {\n  const def = new b2WorldDef();\n  def.gravity = new b2Vec2(0, -10);\n  def.hitEventThreshold = 1 * b2_lengthUnitsPerMeter2;\n  def.restitutionThreshold = 10 * b2_lengthUnitsPerMeter2;\n  def.contactPushoutVelocity = 5 * b2_lengthUnitsPerMeter2;\n  def.contactHertz = 30;\n  def.contactDampingRatio = 10;\n  def.jointHertz = 60;\n  def.jointDampingRatio = 5;\n  def.maximumLinearVelocity = 400 * b2_lengthUnitsPerMeter2;\n  def.enableSleep = true;\n  def.enableContinuous = true;\n  return def;\n}\nfunction b2DefaultBodyDef() {\n  const def = new b2BodyDef();\n  def.type = b2BodyType.b2_staticBody;\n  def.position = new b2Vec2(0, 0);\n  def.rotation = new b2Rot(1, 0);\n  def.linearVelocity = new b2Vec2(0, 0);\n  def.angularVelocity = 0;\n  def.linearDamping = 0;\n  def.angularDamping = 0;\n  def.gravityScale = 1;\n  def.sleepThreshold = 0.05 * b2_lengthUnitsPerMeter2;\n  def.userData = null;\n  def.enableSleep = true;\n  def.isAwake = true;\n  def.fixedRotation = false;\n  def.isBullet = false;\n  def.isEnabled = true;\n  def.updateBodyMass = true;\n  def.allowFastRotation = false;\n  return def;\n}\nfunction b2DefaultFilter() {\n  const filter = new b2Filter();\n  filter.categoryBits = 1;\n  filter.maskBits = 4294967295;\n  filter.groupIndex = 0;\n  return filter;\n}\nfunction b2DefaultQueryFilter() {\n  const filter = new b2QueryFilter();\n  filter.categoryBits = 1;\n  filter.maskBits = 4294967295;\n  return filter;\n}\nfunction b2DefaultShapeDef() {\n  const def = new b2ShapeDef();\n  def.friction = 0.6;\n  def.density = 1;\n  def.restitution = 0.1;\n  def.filter = b2DefaultFilter();\n  def.enableSensorEvents = true;\n  def.enableContactEvents = true;\n  return def;\n}\nfunction b2DefaultChainDef() {\n  const def = new b2ChainDef();\n  def.friction = 0.6;\n  def.filter = b2DefaultFilter();\n  return def;\n}\n\n// src/include/types_h.js\nvar b2BodyType = {\n  b2_staticBody: 0,\n  b2_kinematicBody: 1,\n  b2_dynamicBody: 2,\n  b2_bodyTypeCount: 3\n};\nvar b2ShapeType = {\n  b2_circleShape: 0,\n  b2_capsuleShape: 1,\n  b2_segmentShape: 2,\n  b2_polygonShape: 3,\n  b2_chainSegmentShape: 4,\n  b2_shapeTypeCount: 5\n};\nvar b2JointType = {\n  b2_distanceJoint: 0,\n  b2_motorJoint: 1,\n  b2_mouseJoint: 2,\n  b2_prismaticJoint: 3,\n  b2_revoluteJoint: 4,\n  b2_weldJoint: 5,\n  b2_wheelJoint: 6,\n  b2_unknown: -1\n};\nvar b2RayResult = class {\n  constructor() {\n    this.shapeId = null;\n    this.point = new b2Vec2(0, 0);\n    this.normal = new b2Vec2(0, 0);\n    this.fraction = 0;\n    this.hit = false;\n  }\n};\nvar b2WorldDef = class {\n  constructor() {\n    this.gravity = new b2Vec2(0, 0);\n    this.restitutionThreshold = 0;\n    this.contactPushoutVelocity = 0;\n    this.hitEventThreshold = 0;\n    this.contactHertz = 0;\n    this.contactDampingRatio = 0;\n    this.jointHertz = 0;\n    this.jointDampingRatio = 0;\n    this.maximumLinearVelocity = 0;\n    this.enableSleep = false;\n    this.enableContinuous = true;\n    this.workerCount = 0;\n  }\n};\nvar b2BodyDef = class {\n  constructor() {\n    this.type = b2BodyType.b2_staticBody;\n    this.position = new b2Vec2(0, 0);\n    this.rotation = new b2Rot(1, 0);\n    this.linearVelocity = new b2Vec2(0, 0);\n    this.angularVelocity = 0;\n    this.linearDamping = 0;\n    this.angularDamping = 0;\n    this.gravityScale = 0;\n    this.sleepThreshold = 0;\n    this.userData = null;\n    this.enableSleep = false;\n    this.isAwake = false;\n    this.fixedRotation = false;\n    this.isBullet = false;\n    this.isEnabled = false;\n    this.updateBodyMass = false;\n    this.allowFastRotation = false;\n  }\n};\nvar b2ShapeDef = class {\n  constructor() {\n    this.userData = null;\n    this.friction = 0;\n    this.restitution = 0;\n    this.density = 0;\n    this.filter = new b2Filter();\n    this.customColor = b2HexColor.b2_colorAqua;\n    this.isSensor = false;\n    this.enableSensorEvents = false;\n    this.enableContactEvents = false;\n    this.enableHitEvents = false;\n    this.enablePreSolveEvents = false;\n    this.forceContactCreation = false;\n  }\n};\nvar b2ChainDef = class {\n  constructor() {\n    this.userData = null;\n    this.points = null;\n    this.count = 0;\n    this.friction = 0;\n    this.restitution = 0;\n    this.filter = new b2Filter();\n    this.isLoop = false;\n  }\n};\nvar b2DistanceJointDef = class {\n  constructor() {\n    this.bodyIdA = null;\n    this.bodyIdB = null;\n    this.localAnchorA = new b2Vec2(0, 0);\n    this.localAnchorB = new b2Vec2(0, 0);\n    this.length = 0;\n    this.enableSpring = false;\n    this.hertz = 0;\n    this.dampingRatio = 0;\n    this.enableLimit = false;\n    this.minLength = 0;\n    this.maxLength = 0;\n    this.enableMotor = false;\n    this.maxMotorForce = 0;\n    this.motorSpeed = 0;\n    this.collideConnected = false;\n    this.userData = null;\n  }\n};\nvar b2MotorJointDef = class {\n  constructor() {\n    this.bodyIdA = null;\n    this.bodyIdB = null;\n    this.linearOffset = new b2Vec2(0, 0);\n    this.angularOffset = 0;\n    this.maxForce = 0;\n    this.maxTorque = 0;\n    this.correctionFactor = 0;\n    this.collideConnected = false;\n    this.userData = null;\n  }\n};\nvar b2MouseJointDef = class {\n  constructor() {\n    this.bodyIdA = null;\n    this.bodyIdB = null;\n    this.target = new b2Vec2(0, 0);\n    this.hertz = 0;\n    this.dampingRatio = 0;\n    this.maxForce = 0;\n    this.collideConnected = false;\n    this.userData = null;\n  }\n};\nvar b2PrismaticJointDef = class {\n  constructor() {\n    this.bodyIdA = null;\n    this.bodyIdB = null;\n    this.localAnchorA = new b2Vec2(0, 0);\n    this.localAnchorB = new b2Vec2(0, 0);\n    this.localAxisA = new b2Vec2(0, 0);\n    this.referenceAngle = 0;\n    this.enableSpring = false;\n    this.hertz = 0;\n    this.dampingRatio = 0;\n    this.enableLimit = false;\n    this.lowerTranslation = 0;\n    this.upperTranslation = 0;\n    this.enableMotor = false;\n    this.maxMotorForce = 0;\n    this.motorSpeed = 0;\n    this.collideConnected = false;\n    this.userData = null;\n  }\n};\nvar b2RevoluteJointDef = class {\n  constructor() {\n    this.bodyIdA = null;\n    this.bodyIdB = null;\n    this.localAnchorA = new b2Vec2(0, 0);\n    this.localAnchorB = new b2Vec2(0, 0);\n    this.referenceAngle = 0;\n    this.enableSpring = false;\n    this.hertz = 0;\n    this.dampingRatio = 0;\n    this.enableLimit = false;\n    this.lowerAngle = 0;\n    this.upperAngle = 0;\n    this.enableMotor = false;\n    this.maxMotorTorque = 0;\n    this.motorSpeed = 0;\n    this.drawSize = 0;\n    this.collideConnected = false;\n    this.userData = null;\n  }\n};\nvar b2WeldJointDef = class {\n  constructor() {\n    this.bodyIdA = null;\n    this.bodyIdB = null;\n    this.localAnchorA = new b2Vec2(0, 0);\n    this.localAnchorB = new b2Vec2(0, 0);\n    this.referenceAngle = 0;\n    this.linearHertz = 0;\n    this.angularHertz = 0;\n    this.linearDampingRatio = 0;\n    this.angularDampingRatio = 0;\n    this.collideConnected = false;\n    this.userData = null;\n  }\n};\nvar b2WheelJointDef = class {\n  constructor() {\n    this.bodyIdA = null;\n    this.bodyIdB = null;\n    this.localAnchorA = new b2Vec2(0, 0);\n    this.localAnchorB = new b2Vec2(0, 0);\n    this.localAxisA = new b2Vec2(0, 0);\n    this.enableSpring = false;\n    this.hertz = 0;\n    this.dampingRatio = 0;\n    this.enableLimit = false;\n    this.lowerTranslation = 0;\n    this.upperTranslation = 0;\n    this.enableMotor = false;\n    this.maxMotorTorque = 0;\n    this.motorSpeed = 0;\n    this.collideConnected = false;\n    this.userData = null;\n  }\n};\nvar b2SensorBeginTouchEvent = class {\n  constructor() {\n    this.sensorShapeId = null;\n    this.visitorShapeId = null;\n  }\n};\nvar b2SensorEndTouchEvent = class {\n  constructor() {\n    this.sensorShapeId = null;\n    this.visitorShapeId = null;\n  }\n};\nvar b2SensorEvents = class {\n  constructor() {\n    this.beginEvents = null;\n    this.endEvents = null;\n    this.beginCount = 0;\n    this.endCount = 0;\n  }\n};\nvar b2ContactBeginTouchEvent = class {\n  constructor() {\n    this.shapeIdA = null;\n    this.shapeIdB = null;\n    this.manifold = null;\n  }\n};\nvar b2ContactEndTouchEvent = class {\n  constructor(a = null, b = null) {\n    this.shapeIdA = a;\n    this.shapeIdB = b;\n  }\n};\nvar b2ContactHitEvent = class {\n  constructor() {\n    this.shapeIdA = null;\n    this.shapeIdB = null;\n    this.pointX = 0;\n    this.pointY = 0;\n    this.normalX = 0;\n    this.normalY = 0;\n    this.approachSpeed = 0;\n  }\n};\nvar b2ContactEvents = class {\n  constructor() {\n    this.beginEvents = null;\n    this.endEvents = null;\n    this.hitEvents = null;\n    this.beginCount = 0;\n    this.endCount = 0;\n    this.hitCount = 0;\n  }\n};\nvar b2BodyMoveEvent = class {\n  constructor() {\n    this.transform = null;\n    this.bodyId = null;\n    this.userData = null;\n    this.fellAsleep = false;\n  }\n};\nvar b2BodyEvents = class {\n  constructor() {\n    this.moveEvents = null;\n    this.moveCount = 0;\n  }\n};\nvar b2ContactData = class {\n  constructor() {\n    this.shapeIdA = null;\n    this.shapeIdB = null;\n    this.manifold = null;\n  }\n};\nvar b2HexColor = {\n  b2_colorAliceBlue: 15792383,\n  b2_colorAntiqueWhite: 16444375,\n  b2_colorAqua: 65535,\n  b2_colorAquamarine: 8388564,\n  b2_colorAzure: 15794175,\n  b2_colorBeige: 16119260,\n  b2_colorBisque: 16770244,\n  b2_colorBlack: 1,\n  // non-zero!\n  b2_colorBlanchedAlmond: 16772045,\n  b2_colorBlue: 255,\n  b2_colorBlueViolet: 9055202,\n  b2_colorBrown: 10824234,\n  b2_colorBurlywood: 14596231,\n  b2_colorCadetBlue: 6266528,\n  b2_colorChartreuse: 8388352,\n  b2_colorChocolate: 13789470,\n  b2_colorCoral: 16744272,\n  b2_colorCornflowerBlue: 6591981,\n  b2_colorCornsilk: 16775388,\n  b2_colorCrimson: 14423100,\n  b2_colorCyan: 65535,\n  b2_colorDarkBlue: 139,\n  b2_colorDarkCyan: 35723,\n  b2_colorDarkGoldenrod: 12092939,\n  b2_colorDarkGray: 11119017,\n  b2_colorDarkGreen: 25600,\n  b2_colorDarkKhaki: 12433259,\n  b2_colorDarkMagenta: 9109643,\n  b2_colorDarkOliveGreen: 5597999,\n  b2_colorDarkOrange: 16747520,\n  b2_colorDarkOrchid: 10040012,\n  b2_colorDarkRed: 9109504,\n  b2_colorDarkSalmon: 15308410,\n  b2_colorDarkSeaGreen: 9419919,\n  b2_colorDarkSlateBlue: 4734347,\n  b2_colorDarkSlateGray: 3100495,\n  b2_colorDarkTurquoise: 52945,\n  b2_colorDarkViolet: 9699539,\n  b2_colorDeepPink: 16716947,\n  b2_colorDeepSkyBlue: 49151,\n  b2_colorDimGray: 6908265,\n  b2_colorDodgerBlue: 2003199,\n  b2_colorFirebrick: 11674146,\n  b2_colorFloralWhite: 16775920,\n  b2_colorForestGreen: 2263842,\n  b2_colorFuchsia: 16711935,\n  b2_colorGainsboro: 14474460,\n  b2_colorGhostWhite: 16316671,\n  b2_colorGold: 16766720,\n  b2_colorGoldenrod: 14329120,\n  b2_colorGray: 12500670,\n  b2_colorGray1: 1710618,\n  b2_colorGray2: 3355443,\n  b2_colorGray3: 5066061,\n  b2_colorGray4: 6710886,\n  b2_colorGray5: 8355711,\n  b2_colorGray6: 10066329,\n  b2_colorGray7: 11776947,\n  b2_colorGray8: 13421772,\n  b2_colorGray9: 15066597,\n  b2_colorGreen: 65280,\n  b2_colorGreenYellow: 11403055,\n  b2_colorHoneydew: 15794160,\n  b2_colorHotPink: 16738740,\n  b2_colorIndianRed: 13458524,\n  b2_colorIndigo: 4915330,\n  b2_colorIvory: 16777200,\n  b2_colorKhaki: 15787660,\n  b2_colorLavender: 15132410,\n  b2_colorLavenderBlush: 16773365,\n  b2_colorLawnGreen: 8190976,\n  b2_colorLemonChiffon: 16775885,\n  b2_colorLightBlue: 11393254,\n  b2_colorLightCoral: 15761536,\n  b2_colorLightCyan: 14745599,\n  b2_colorLightGoldenrod: 15654274,\n  b2_colorLightGoldenrodYellow: 16448210,\n  b2_colorLightGray: 13882323,\n  b2_colorLightGreen: 9498256,\n  b2_colorLightPink: 16758465,\n  b2_colorLightSalmon: 16752762,\n  b2_colorLightSeaGreen: 2142890,\n  b2_colorLightSkyBlue: 8900346,\n  b2_colorLightSlateBlue: 8679679,\n  b2_colorLightSlateGray: 7833753,\n  b2_colorLightSteelBlue: 11584734,\n  b2_colorLightYellow: 16777184,\n  b2_colorLime: 65280,\n  b2_colorLimeGreen: 3329330,\n  b2_colorLinen: 16445670,\n  b2_colorMagenta: 16711935,\n  b2_colorMaroon: 11546720,\n  b2_colorMediumAquamarine: 6737322,\n  b2_colorMediumBlue: 205,\n  b2_colorMediumOrchid: 12211667,\n  b2_colorMediumPurple: 9662683,\n  b2_colorMediumSeaGreen: 3978097,\n  b2_colorMediumSlateBlue: 8087790,\n  b2_colorMediumSpringGreen: 64154,\n  b2_colorMediumTurquoise: 4772300,\n  b2_colorMediumVioletRed: 13047173,\n  b2_colorMidnightBlue: 1644912,\n  b2_colorMintCream: 16121850,\n  b2_colorMistyRose: 16770273,\n  b2_colorMoccasin: 16770229,\n  b2_colorNavajoWhite: 16768685,\n  b2_colorNavy: 128,\n  b2_colorNavyBlue: 128,\n  b2_colorOldLace: 16643558,\n  b2_colorOlive: 8421376,\n  b2_colorOliveDrab: 7048739,\n  b2_colorOrange: 16753920,\n  b2_colorOrangeRed: 16729344,\n  b2_colorOrchid: 14315734,\n  b2_colorPaleGoldenrod: 15657130,\n  b2_colorPaleGreen: 10025880,\n  b2_colorPaleTurquoise: 11529966,\n  b2_colorPaleVioletRed: 14381203,\n  b2_colorPapayaWhip: 16773077,\n  b2_colorPeachPuff: 16767673,\n  b2_colorPeru: 13468991,\n  b2_colorPink: 16761035,\n  b2_colorPlum: 14524637,\n  b2_colorPowderBlue: 11591910,\n  b2_colorPurple: 10494192,\n  b2_colorRebeccaPurple: 6697881,\n  b2_colorRed: 16711680,\n  b2_colorRosyBrown: 12357519,\n  b2_colorRoyalBlue: 4286945,\n  b2_colorSaddleBrown: 9127187,\n  b2_colorSalmon: 16416882,\n  b2_colorSandyBrown: 16032864,\n  b2_colorSeaGreen: 3050327,\n  b2_colorSeashell: 16774638,\n  b2_colorSienna: 10506797,\n  b2_colorSilver: 12632256,\n  b2_colorSkyBlue: 8900331,\n  b2_colorSlateBlue: 6970061,\n  b2_colorSlateGray: 7372944,\n  b2_colorSnow: 16775930,\n  b2_colorSpringGreen: 65407,\n  b2_colorSteelBlue: 4620980,\n  b2_colorTan: 13808780,\n  b2_colorTeal: 32896,\n  b2_colorThistle: 14204888,\n  b2_colorTomato: 16737095,\n  b2_colorTurquoise: 4251856,\n  b2_colorViolet: 15631086,\n  b2_colorVioletRed: 13639824,\n  b2_colorWheat: 16113331,\n  b2_colorWhite: 16777215,\n  b2_colorWhiteSmoke: 16119285,\n  b2_colorYellow: 16776960,\n  b2_colorYellowGreen: 10145074,\n  b2_colorBox2DRed: 14430514,\n  b2_colorBox2DBlue: 3190463,\n  b2_colorBox2DGreen: 9226532,\n  b2_colorBox2DYellow: 16772748\n};\nvar b2DebugDraw = class {\n  constructor() {\n    this.DrawPolygon = null;\n    this.DrawImagePolygon = null;\n    this.DrawSolidPolygon = null;\n    this.DrawCircle = null;\n    this.DrawImageCircle = null;\n    this.DrawSolidCircle = null;\n    this.DrawCapsule = null;\n    this.DrawImageCapsule = null;\n    this.DrawSolidCapsule = null;\n    this.DrawSegment = null;\n    this.DrawTransform = null;\n    this.DrawPoint = null;\n    this.DrawString = null;\n    this.SetPosition = null;\n    this.drawingBounds = new b2AABB();\n    this.useDrawingBounds = false;\n    this.positionOffset = new b2Vec2();\n    this.drawShapes = true;\n    this.drawJoints = false;\n    this.drawAABBs = false;\n    this.drawMass = false;\n    this.drawContacts = false;\n    this.drawGraphColors = false;\n    this.drawContactNormals = false;\n    this.drawContactImpulses = false;\n    this.drawFrictionImpulses = false;\n    this.context = null;\n  }\n};\nvar b2Filter = class {\n  constructor() {\n    this.categoryBits = 1;\n    this.maskBits = 65535;\n    this.groupIndex = 0;\n  }\n};\nvar b2QueryFilter = class {\n  constructor() {\n    this.categoryBits = 65535;\n    this.maskBits = 65535;\n  }\n};\n\n// src/id_pool_c.js\nvar b2IdPool = class {\n  constructor(name) {\n    this.name = name;\n    this.freeArray = [];\n    this.nextIndex = 0;\n  }\n};\nfunction b2GetIdCapacity(pool) {\n  return pool.nextIndex;\n}\nfunction b2CreateIdPool(name = \"pool\") {\n  return new b2IdPool(name);\n}\nfunction b2DestroyIdPool(pool) {\n  pool.freeArray = null;\n  pool.nextIndex = 0;\n}\nfunction b2AllocId(pool) {\n  if (pool.freeArray.length > 0) {\n    return pool.freeArray.pop();\n  }\n  const id = pool.nextIndex;\n  pool.nextIndex++;\n  return id;\n}\nfunction b2FreeId(pool, id) {\n  if (id === pool.nextIndex - 1) {\n    pool.nextIndex--;\n    return;\n  }\n  pool.freeArray.push(id);\n}\nfunction b2GetIdCount(pool) {\n  return pool.nextIndex - pool.freeArray.length;\n}\n\n// src/distance_c.js\nfunction b2GetSweepTransform(sweep, time) {\n  const xf2 = new b2Transform();\n  xf2.p = b2Add(b2MulSV(1 - time, sweep.c1), b2MulSV(time, sweep.c2));\n  const q3 = new b2Rot(\n    (1 - time) * sweep.q1.c + time * sweep.q2.c,\n    (1 - time) * sweep.q1.s + time * sweep.q2.s\n  );\n  xf2.q = b2NormalizeRot(q3);\n  xf2.p = b2Sub(xf2.p, b2RotateVector(xf2.q, sweep.localCenter));\n  return xf2;\n}\nvar sdResult = new b2SegmentDistanceResult();\nfunction b2SegmentDistance(p1X, p1Y, q1X, q1Y, p2X, p2Y, q2X, q2Y) {\n  let fraction1 = 0;\n  let fraction2 = 0;\n  const d1X = q1X - p1X;\n  const d1Y = q1Y - p1Y;\n  const d2X = q2X - p2X;\n  const d2Y = q2Y - p2Y;\n  const rX = p1X - p2X;\n  const rY = p1Y - p2Y;\n  const dd1 = d1X * d1X + d1Y * d1Y;\n  const dd2 = d2X * d2X + d2Y * d2Y;\n  const rd2 = rX * d2X + rY * d2Y;\n  const rd1 = rX * d1X + rY * d1Y;\n  if (dd1 < epsSqr || dd2 < epsSqr) {\n    if (dd1 >= epsSqr) {\n      fraction1 = b2ClampFloat(-rd1 / dd1, 0, 1);\n      fraction2 = 0;\n    } else if (dd2 >= epsSqr) {\n      fraction1 = 0;\n      fraction2 = b2ClampFloat(rd2 / dd2, 0, 1);\n    }\n  } else {\n    const d12 = d1X * d2X + d1Y * d2Y;\n    const denom = dd1 * dd2 - d12 * d12;\n    let f1 = 0;\n    if (denom !== 0) {\n      f1 = b2ClampFloat((d12 * rd2 - rd1 * dd2) / denom, 0, 1);\n    }\n    let f2 = (d12 * f1 + rd2) / dd2;\n    if (f2 < 0) {\n      f2 = 0;\n      f1 = b2ClampFloat(-rd1 / dd1, 0, 1);\n    } else if (f2 > 1) {\n      f2 = 1;\n      f1 = b2ClampFloat((d12 - rd1) / dd1, 0, 1);\n    }\n    fraction1 = f1;\n    fraction2 = f2;\n  }\n  const closest1X = p1X + fraction1 * d1X;\n  const closest1Y = p1Y + fraction1 * d1Y;\n  const closest2X = p2X + fraction2 * d2X;\n  const closest2Y = p2Y + fraction2 * d2Y;\n  const dX = closest1X - closest2X;\n  const dY = closest1Y - closest2Y;\n  const distanceSquared = dX * dX + dY * dY;\n  sdResult.closest1 = sdResult.closest2 = null;\n  sdResult.fraction1 = fraction1;\n  sdResult.fraction2 = fraction2;\n  sdResult.distanceSquared = distanceSquared;\n  return sdResult;\n}\nfunction b2MakeProxy(vertices, count, radius) {\n  count = Math.min(count, B2_MAX_POLYGON_VERTICES);\n  const proxy = new b2DistanceProxy();\n  proxy.points = [];\n  proxy.count = count;\n  proxy.radius = radius;\n  for (let i = 0; i < count; ++i) {\n    proxy.points[i] = vertices[i].clone();\n  }\n  return proxy;\n}\nfunction b2Weight2(a1, w1, a2, w2) {\n  return new b2Vec2(a1 * w1.x + a2 * w2.x, a1 * w1.y + a2 * w2.y);\n}\nfunction b2Weight3(a1, w1, a2, w2, a3, w3) {\n  return new b2Vec2(a1 * w1.x + a2 * w2.x + a3 * w3.x, a1 * w1.y + a2 * w2.y + a3 * w3.y);\n}\nfunction b2FindSupport(proxy, direction) {\n  let bestIndex = 0;\n  let bestValue = b2Dot(proxy.points[0], direction);\n  for (let i = 1; i < proxy.count; ++i) {\n    const value = b2Dot(proxy.points[i], direction);\n    if (value > bestValue) {\n      bestIndex = i;\n      bestValue = value;\n    }\n  }\n  return bestIndex;\n}\nfunction b2MakeSimplexFromCache(cache, proxyA, transformA, proxyB, transformB) {\n  const s = new b2Simplex();\n  s.count = cache.count;\n  const vertices = [s.v1, s.v2, s.v3];\n  for (let i = 0; i < s.count; ++i) {\n    const v = vertices[i];\n    v.indexA = cache.indexA[i];\n    v.indexB = cache.indexB[i];\n    const wALocal = proxyA.points[v.indexA];\n    const wBLocal = proxyB.points[v.indexB];\n    v.wA = b2TransformPoint(transformA, wALocal);\n    v.wB = b2TransformPoint(transformB, wBLocal);\n    v.w = b2Sub(v.wB, v.wA);\n    v.a = -1;\n  }\n  if (s.count === 0) {\n    const v = vertices[0];\n    v.indexA = 0;\n    v.indexB = 0;\n    const wALocal = proxyA.points[0];\n    const wBLocal = proxyB.points[0];\n    v.wA = b2TransformPoint(transformA, wALocal);\n    v.wB = b2TransformPoint(transformB, wBLocal);\n    v.w = b2Sub(v.wB, v.wA);\n    v.a = 1;\n    s.count = 1;\n  }\n  return s;\n}\nfunction b2MakeSimplexCache(cache, simplex) {\n  cache.count = simplex.count;\n  const vertices = [simplex.v1, simplex.v2, simplex.v3];\n  for (let i = 0; i < simplex.count; ++i) {\n    cache.indexA[i] = vertices[i].indexA;\n    cache.indexB[i] = vertices[i].indexB;\n  }\n}\nfunction b2ComputeSimplexSearchDirection(simplex) {\n  switch (simplex.count) {\n    case 1:\n      return b2Neg(simplex.v1.w);\n    case 2:\n      const e12 = b2Sub(simplex.v2.w, simplex.v1.w);\n      const sgn = b2Cross(e12, b2Neg(simplex.v1.w));\n      if (sgn > 0) {\n        return b2LeftPerp(e12);\n      } else {\n        return b2RightPerp(e12);\n      }\n    default:\n      return new b2Vec2(0, 0);\n  }\n}\nfunction b2ComputeSimplexClosestPoint(s) {\n  switch (s.count) {\n    case 0:\n      return new b2Vec2(0, 0);\n    case 1:\n      return s.v1.w;\n    case 2:\n      return b2Weight2(s.v1.a, s.v1.w, s.v2.a, s.v2.w);\n    case 3:\n      return new b2Vec2(0, 0);\n    default:\n      return new b2Vec2(0, 0);\n  }\n}\nfunction b2ComputeSimplexWitnessPoints(a, b, s) {\n  switch (s.count) {\n    case 0:\n      break;\n    case 1:\n      a.x = s.v1.wA.x;\n      a.y = s.v1.wA.y;\n      b.x = s.v1.wB.x;\n      b.y = s.v1.wB.y;\n      break;\n    case 2:\n      a.x = b2Weight2(s.v1.a, s.v1.wA, s.v2.a, s.v2.wA).x;\n      a.y = b2Weight2(s.v1.a, s.v1.wA, s.v2.a, s.v2.wA).y;\n      b.x = b2Weight2(s.v1.a, s.v1.wB, s.v2.a, s.v2.wB).x;\n      b.y = b2Weight2(s.v1.a, s.v1.wB, s.v2.a, s.v2.wB).y;\n      break;\n    case 3:\n      a.x = b2Weight3(s.v1.a, s.v1.wA, s.v2.a, s.v2.wA, s.v3.a, s.v3.wA).x;\n      a.y = b2Weight3(s.v1.a, s.v1.wA, s.v2.a, s.v2.wA, s.v3.a, s.v3.wA).y;\n      b.x = a.x;\n      b.y = a.y;\n      break;\n    default:\n      break;\n  }\n}\nfunction b2SolveSimplex2(s) {\n  const w1 = s.v1.w;\n  const w2 = s.v2.w;\n  const e12 = b2Sub(w2, w1);\n  const d12_2 = -b2Dot(w1, e12);\n  if (d12_2 <= 0) {\n    s.v1.a = 1;\n    s.count = 1;\n    return;\n  }\n  const d12_1 = b2Dot(w2, e12);\n  if (d12_1 <= 0) {\n    s.v2.a = 1;\n    s.count = 1;\n    s.v1 = s.v2;\n    return;\n  }\n  const inv_d12 = 1 / (d12_1 + d12_2);\n  s.v1.a = d12_1 * inv_d12;\n  s.v2.a = d12_2 * inv_d12;\n  s.count = 2;\n}\nfunction b2SolveSimplex3(s) {\n  const w1 = s.v1.w;\n  const w2 = s.v2.w;\n  const w3 = s.v3.w;\n  const e12 = b2Sub(w2, w1);\n  const w1e12 = b2Dot(w1, e12);\n  const w2e12 = b2Dot(w2, e12);\n  const d12_1 = w2e12;\n  const d12_2 = -w1e12;\n  const e13 = b2Sub(w3, w1);\n  const w1e13 = b2Dot(w1, e13);\n  const w3e13 = b2Dot(w3, e13);\n  const d13_1 = w3e13;\n  const d13_2 = -w1e13;\n  const e23 = b2Sub(w3, w2);\n  const w2e23 = b2Dot(w2, e23);\n  const w3e23 = b2Dot(w3, e23);\n  const d23_1 = w3e23;\n  const d23_2 = -w2e23;\n  const n123 = b2Cross(e12, e13);\n  const d123_1 = n123 * b2Cross(w2, w3);\n  const d123_2 = n123 * b2Cross(w3, w1);\n  const d123_3 = n123 * b2Cross(w1, w2);\n  if (d12_2 <= 0 && d13_2 <= 0) {\n    s.v1.a = 1;\n    s.count = 1;\n    return;\n  }\n  if (d12_1 > 0 && d12_2 > 0 && d123_3 <= 0) {\n    const inv_d12 = 1 / (d12_1 + d12_2);\n    s.v1.a = d12_1 * inv_d12;\n    s.v2.a = d12_2 * inv_d12;\n    s.count = 2;\n    return;\n  }\n  if (d13_1 > 0 && d13_2 > 0 && d123_2 <= 0) {\n    const inv_d13 = 1 / (d13_1 + d13_2);\n    s.v1.a = d13_1 * inv_d13;\n    s.v3.a = d13_2 * inv_d13;\n    s.count = 2;\n    s.v2 = s.v3.clone();\n    return;\n  }\n  if (d12_1 <= 0 && d23_2 <= 0) {\n    s.v2.a = 1;\n    s.count = 1;\n    s.v1 = s.v2.clone();\n    return;\n  }\n  if (d13_1 <= 0 && d23_1 <= 0) {\n    s.v3.a = 1;\n    s.count = 1;\n    s.v1 = s.v3.clone();\n    return;\n  }\n  if (d23_1 > 0 && d23_2 > 0 && d123_1 <= 0) {\n    const inv_d23 = 1 / (d23_1 + d23_2);\n    s.v2.a = d23_1 * inv_d23;\n    s.v3.a = d23_2 * inv_d23;\n    s.count = 2;\n    s.v1 = s.v3.clone();\n    return;\n  }\n  const inv_d123 = 1 / (d123_1 + d123_2 + d123_3);\n  s.v1.a = d123_1 * inv_d123;\n  s.v2.a = d123_2 * inv_d123;\n  s.v3.a = d123_3 * inv_d123;\n  s.count = 3;\n}\nvar p0 = new b2Vec2();\nfunction b2ShapeDistance(cache, input, simplexes, simplexCapacity) {\n  const output = new b2DistanceOutput();\n  const proxyA = input.proxyA;\n  const proxyB = input.proxyB;\n  const transformA = input.transformA;\n  const transformB = input.transformB;\n  const simplex = b2MakeSimplexFromCache(cache, proxyA, transformA, proxyB, transformB);\n  let simplexIndex = 0;\n  if (simplexes !== null && simplexIndex < simplexCapacity) {\n    simplexes[simplexIndex] = simplex;\n    simplexIndex += 1;\n  }\n  const vertices = [simplex.v1, simplex.v2, simplex.v3];\n  const k_maxIters = 20;\n  const saveA = [0, 0, 0];\n  const saveB = [0, 0, 0];\n  let iter = 0;\n  while (iter < k_maxIters) {\n    const saveCount = simplex.count;\n    for (let i = 0; i < saveCount; ++i) {\n      saveA[i] = vertices[i].indexA;\n      saveB[i] = vertices[i].indexB;\n    }\n    switch (simplex.count) {\n      case 1:\n        break;\n      case 2:\n        b2SolveSimplex2(simplex);\n        break;\n      case 3:\n        b2SolveSimplex3(simplex);\n        break;\n      default:\n        break;\n    }\n    if (simplex.count === 3) {\n      break;\n    }\n    if (simplexes !== null && simplexIndex < simplexCapacity) {\n      simplexes[simplexIndex] = simplex;\n      simplexIndex += 1;\n    }\n    const d = b2ComputeSimplexSearchDirection(simplex);\n    if (b2Dot(d, d) < eps * eps) {\n      break;\n    }\n    const vertex = vertices[simplex.count];\n    vertex.indexA = b2FindSupport(proxyA, b2InvRotateVector(transformA.q, b2Neg(d)));\n    vertex.wA = b2TransformPoint(transformA, proxyA.points[vertex.indexA]);\n    vertex.indexB = b2FindSupport(proxyB, b2InvRotateVector(transformB.q, d));\n    vertex.wB = b2TransformPoint(transformB, proxyB.points[vertex.indexB]);\n    vertex.w = b2Sub(vertex.wB, vertex.wA);\n    ++iter;\n    let duplicate = false;\n    for (let i = 0; i < saveCount; ++i) {\n      if (vertex.indexA === saveA[i] && vertex.indexB === saveB[i]) {\n        duplicate = true;\n        break;\n      }\n    }\n    if (duplicate) {\n      break;\n    }\n    ++simplex.count;\n  }\n  if (simplexes !== null && simplexIndex < simplexCapacity) {\n    simplexes[simplexIndex] = simplex;\n    simplexIndex += 1;\n  }\n  b2ComputeSimplexWitnessPoints(output.pointA, output.pointB, simplex);\n  output.distance = b2Distance(output.pointA, output.pointB);\n  output.iterations = iter;\n  output.simplexCount = simplexIndex;\n  b2MakeSimplexCache(cache, simplex);\n  if (input.useRadii) {\n    if (output.distance < eps) {\n      p0.x = 0.5 * (output.pointA.x + output.pointB.x);\n      p0.y = 0.5 * (output.pointA.y + output.pointB.y);\n      output.pointA.x = p0.x;\n      output.pointA.y = p0.y;\n      output.pointB.x = p0.x;\n      output.pointB.y = p0.y;\n      output.distance = 0;\n    } else {\n      const rA = proxyA.radius;\n      const rB = proxyB.radius;\n      output.distance = Math.max(0, output.distance - rA - rB);\n      const normal = b2Normalize(b2Sub(output.pointB, output.pointA));\n      const offsetAX = rA * normal.x;\n      const offsetAY = rA * normal.y;\n      const offsetBX = rB * normal.x;\n      const offsetBY = rB * normal.y;\n      output.pointA.x += offsetAX;\n      output.pointA.y += offsetAY;\n      output.pointB.x -= offsetBX;\n      output.pointB.y -= offsetBY;\n    }\n  }\n  return output;\n}\nvar rayPoint = new b2Vec2(0, 0);\nvar rayNormal = new b2Vec2(0, 1);\nfunction b2ShapeCast(input) {\n  const output = new b2CastOutput(rayNormal, rayPoint);\n  output.fraction = input.maxFraction;\n  const proxyA = input.proxyA;\n  const xfA = input.transformA;\n  const xfB = input.transformB;\n  const xf2 = b2InvMulTransforms(xfA, xfB);\n  const proxyB = new b2DistanceProxy();\n  proxyB.count = input.proxyB.count;\n  proxyB.radius = input.proxyB.radius;\n  proxyB.points = [];\n  for (let i = 0; i < proxyB.count; ++i) {\n    proxyB.points[i] = b2TransformPoint(xf2, input.proxyB.points[i]);\n  }\n  const radius = proxyA.radius + proxyB.radius;\n  const r = b2RotateVector(xf2.q, input.translationB);\n  let lambda = 0;\n  const maxFraction = input.maxFraction;\n  const simplex = new b2Simplex();\n  simplex.count = 0;\n  simplex.v1 = new b2SimplexVertex();\n  simplex.v2 = new b2SimplexVertex();\n  simplex.v3 = new b2SimplexVertex();\n  const vertices = [simplex.v1, simplex.v2, simplex.v3];\n  let indexA = b2FindSupport(proxyA, b2Neg(r));\n  let wA = proxyA.points[indexA];\n  let indexB = b2FindSupport(proxyB, r);\n  let wB = proxyB.points[indexB];\n  let v = b2Sub(wA, wB);\n  const linearSlop = 5e-3;\n  const sigma = Math.max(linearSlop, radius - linearSlop);\n  const k_maxIters = 20;\n  let iter = 0;\n  while (iter < k_maxIters && b2Length(v) > sigma + 0.5 * linearSlop) {\n    output.iterations += 1;\n    indexA = b2FindSupport(proxyA, b2Neg(v));\n    wA = proxyA.points[indexA];\n    indexB = b2FindSupport(proxyB, v);\n    wB = proxyB.points[indexB];\n    const p4 = b2Sub(wA, wB);\n    v = b2Normalize(v);\n    const vp = b2Dot(v, p4);\n    const vr = b2Dot(v, r);\n    if (vp - sigma > lambda * vr) {\n      if (vr <= 0) {\n        return output;\n      }\n      lambda = (vp - sigma) / vr;\n      if (lambda > maxFraction) {\n        return output;\n      }\n      simplex.count = 0;\n    }\n    const vertex = vertices[simplex.count];\n    vertex.indexA = indexB;\n    vertex.wA = new b2Vec2(wB.x + lambda * r.x, wB.y + lambda * r.y);\n    vertex.indexB = indexA;\n    vertex.wB = wA.clone();\n    vertex.w = b2Sub(vertex.wB, vertex.wA);\n    vertex.a = 1;\n    simplex.count += 1;\n    switch (simplex.count) {\n      case 1:\n        break;\n      case 2:\n        b2SolveSimplex2(simplex);\n        break;\n      case 3:\n        b2SolveSimplex3(simplex);\n        break;\n      default:\n    }\n    if (simplex.count === 3) {\n      return output;\n    }\n    v = b2ComputeSimplexClosestPoint(simplex);\n    ++iter;\n  }\n  if (iter === 0 || lambda === 0) {\n    return output;\n  }\n  const pointA = new b2Vec2();\n  const pointB = new b2Vec2();\n  b2ComputeSimplexWitnessPoints(pointB, pointA, simplex);\n  const n = b2Normalize(b2Neg(v));\n  const point = new b2Vec2(pointA.x + proxyA.radius * n.x, pointA.y + proxyA.radius * n.y);\n  output.point = b2TransformPoint(xfA, point);\n  output.normal = b2RotateVector(xfA.q, n);\n  output.fraction = lambda;\n  output.iterations = iter;\n  output.hit = true;\n  return output;\n}\nvar b2SeparationType = {\n  b2_pointsType: 0,\n  b2_faceAType: 1,\n  b2_faceBType: 2\n};\nvar b2SeparationFunction = class {\n  constructor() {\n    this.proxyA = null;\n    this.proxyB = null;\n    this.sweepA = null;\n    this.sweepB = null;\n    this.localPoint = new b2Vec2();\n    this.axis = new b2Vec2();\n    this.type = 0;\n  }\n};\nfunction b2MakeSeparationFunction(cache, proxyA, sweepA, proxyB, sweepB, t1) {\n  const f = new b2SeparationFunction();\n  f.proxyA = proxyA;\n  f.proxyB = proxyB;\n  const count = cache.count;\n  f.sweepA = new b2Sweep();\n  Object.assign(f.sweepA, sweepA);\n  f.sweepB = new b2Sweep();\n  Object.assign(f.sweepB, sweepB);\n  f.localPoint = new b2Vec2();\n  f.axis = new b2Vec2();\n  f.type = 0;\n  const xfA = b2GetSweepTransform(sweepA, t1);\n  const xfB = b2GetSweepTransform(sweepB, t1);\n  if (count === 1) {\n    f.type = b2SeparationType.b2_pointsType;\n    const localPointA = proxyA.points[cache.indexA[0]];\n    const localPointB2 = proxyB.points[cache.indexB[0]];\n    const pointA2 = b2TransformPoint(xfA, localPointA);\n    const pointB2 = b2TransformPoint(xfB, localPointB2);\n    f.axis = b2Normalize(b2Sub(pointB2, pointA2));\n    f.localPoint = new b2Vec2();\n    return f;\n  }\n  if (cache.indexA[0] === cache.indexA[1]) {\n    f.type = b2SeparationType.b2_faceBType;\n    const localPointB1 = proxyB.points[cache.indexB[0]];\n    const localPointB2 = proxyB.points[cache.indexB[1]];\n    f.axis = b2CrossVS(b2Sub(localPointB2, localPointB1), 1);\n    f.axis = b2Normalize(f.axis);\n    const normal2 = b2RotateVector(xfB.q, f.axis);\n    f.localPoint = new b2Vec2(0.5 * (localPointB1.x + localPointB2.x), 0.5 * (localPointB1.y + localPointB2.y));\n    const pointB2 = b2TransformPoint(xfB, f.localPoint);\n    const localPointA = proxyA.points[cache.indexA[0]];\n    const pointA2 = b2TransformPoint(xfA, localPointA);\n    const s2 = b2Dot(b2Sub(pointA2, pointB2), normal2);\n    if (s2 < 0) {\n      f.axis = b2Neg(f.axis);\n    }\n    return f;\n  }\n  f.type = b2SeparationType.b2_faceAType;\n  const localPointA1 = proxyA.points[cache.indexA[0]];\n  const localPointA2 = proxyA.points[cache.indexA[1]];\n  f.axis = b2CrossVS(b2Sub(localPointA2, localPointA1), 1);\n  f.axis = b2Normalize(f.axis);\n  const normal = b2RotateVector(xfA.q, f.axis);\n  f.localPoint = new b2Vec2(0.5 * (localPointA1.x + localPointA2.x), 0.5 * (localPointA1.y + localPointA2.y));\n  const pointA = b2TransformPoint(xfA, f.localPoint);\n  const localPointB = proxyB.points[cache.indexB[0]];\n  const pointB = b2TransformPoint(xfB, localPointB);\n  const s = b2Dot(b2Sub(pointB, pointA), normal);\n  if (s < 0) {\n    f.axis = b2Neg(f.axis);\n  }\n  return f;\n}\nvar MinSeparationReturn = class {\n  constructor(indexA, indexB, separation) {\n    this.indexA = indexA;\n    this.indexB = indexB;\n    this.separation = separation;\n  }\n};\nfunction b2FindMinSeparation(f, t) {\n  const xfA = b2GetSweepTransform(f.sweepA, t);\n  const xfB = b2GetSweepTransform(f.sweepB, t);\n  switch (f.type) {\n    case b2SeparationType.b2_pointsType: {\n      const axisA = b2InvRotateVector(xfA.q, f.axis);\n      const axisB = b2InvRotateVector(xfB.q, b2Neg(f.axis));\n      const indexA = b2FindSupport(f.proxyA, axisA);\n      const indexB = b2FindSupport(f.proxyB, axisB);\n      const localPointA = f.proxyA.points[indexA];\n      const localPointB = f.proxyB.points[indexB];\n      const pointA = b2TransformPoint(xfA, localPointA);\n      const pointB = b2TransformPoint(xfB, localPointB);\n      const separation = b2Dot(b2Sub(pointB, pointA), f.axis);\n      return new MinSeparationReturn(indexA, indexB, separation);\n    }\n    case b2SeparationType.b2_faceAType: {\n      const normal = b2RotateVector(xfA.q, f.axis);\n      const pointA = b2TransformPoint(xfA, f.localPoint);\n      const axisB = b2InvRotateVector(xfB.q, b2Neg(normal));\n      const indexA = -1;\n      const indexB = b2FindSupport(f.proxyB, axisB);\n      const localPointB = f.proxyB.points[indexB];\n      const pointB = b2TransformPoint(xfB, localPointB);\n      const separation = b2Dot(b2Sub(pointB, pointA), normal);\n      return new MinSeparationReturn(indexA, indexB, separation);\n    }\n    case b2SeparationType.b2_faceBType: {\n      const normal = b2RotateVector(xfB.q, f.axis);\n      const pointB = b2TransformPoint(xfB, f.localPoint);\n      const axisA = b2InvRotateVector(xfA.q, b2Neg(normal));\n      const indexB = -1;\n      const indexA = b2FindSupport(f.proxyA, axisA);\n      const localPointA = f.proxyA.points[indexA];\n      const pointA = b2TransformPoint(xfA, localPointA);\n      const separation = b2Dot(b2Sub(pointA, pointB), normal);\n      return new MinSeparationReturn(indexA, indexB, separation);\n    }\n    default:\n      return new MinSeparationReturn(-1, -1, 0);\n  }\n}\nfunction b2EvaluateSeparation(f, indexA, indexB, t) {\n  const xfA = b2GetSweepTransform(f.sweepA, t);\n  const xfB = b2GetSweepTransform(f.sweepB, t);\n  switch (f.type) {\n    case b2SeparationType.b2_pointsType: {\n      const localPointA = f.proxyA.points[indexA];\n      const localPointB = f.proxyB.points[indexB];\n      const pointA = b2TransformPoint(xfA, localPointA);\n      const pointB = b2TransformPoint(xfB, localPointB);\n      const separation = b2Dot(b2Sub(pointB, pointA), f.axis);\n      return separation;\n    }\n    case b2SeparationType.b2_faceAType: {\n      const normal = b2RotateVector(xfA.q, f.axis);\n      const pointA = b2TransformPoint(xfA, f.localPoint);\n      const localPointB = f.proxyB.points[indexB];\n      const pointB = b2TransformPoint(xfB, localPointB);\n      const separation = b2Dot(b2Sub(pointB, pointA), normal);\n      return separation;\n    }\n    case b2SeparationType.b2_faceBType: {\n      const normal = b2RotateVector(xfB.q, f.axis);\n      const pointB = b2TransformPoint(xfB, f.localPoint);\n      const localPointA = f.proxyA.points[indexA];\n      const pointA = b2TransformPoint(xfA, localPointA);\n      const separation = b2Dot(b2Sub(pointA, pointB), normal);\n      return separation;\n    }\n    default:\n      return 0;\n  }\n}\nfunction b2TimeOfImpact(input) {\n  const output = new b2TOIOutput();\n  output.state = b2TOIState.b2_toiStateUnknown;\n  output.t = input.tMax;\n  const proxyA = input.proxyA;\n  const proxyB = input.proxyB;\n  const sweepA = input.sweepA;\n  const sweepB = input.sweepB;\n  const tMax = input.tMax;\n  const totalRadius = proxyA.radius + proxyB.radius;\n  const target = Math.max(b2_linearSlop, totalRadius - b2_linearSlop);\n  const tolerance = 0.25 * b2_linearSlop;\n  let t1 = 0;\n  const k_maxIterations = 20;\n  let iter = 0;\n  const cache = new b2DistanceCache();\n  const distanceInput = new b2DistanceInput();\n  distanceInput.proxyA = input.proxyA;\n  distanceInput.proxyB = input.proxyB;\n  distanceInput.useRadii = false;\n  for (; ; ) {\n    const xfA = b2GetSweepTransform(sweepA, t1);\n    const xfB = b2GetSweepTransform(sweepB, t1);\n    distanceInput.transformA = xfA;\n    distanceInput.transformB = xfB;\n    const distanceOutput = b2ShapeDistance(cache, distanceInput, null, 0);\n    if (distanceOutput.distance <= 0) {\n      output.state = b2TOIState.b2_toiStateOverlapped;\n      output.t = 0;\n      break;\n    }\n    if (distanceOutput.distance < target + tolerance) {\n      output.state = b2TOIState.b2_toiStateHit;\n      output.t = t1;\n      break;\n    }\n    const fcn = b2MakeSeparationFunction(cache, proxyA, sweepA, proxyB, sweepB, t1);\n    let done = false;\n    let t2 = tMax;\n    let pushBackIter = 0;\n    for (; ; ) {\n      const ret = b2FindMinSeparation(fcn, t2);\n      let s2 = ret.separation;\n      const indexA = ret.indexA;\n      const indexB = ret.indexB;\n      if (s2 > target + tolerance) {\n        output.state = b2TOIState.b2_toiStateSeparated;\n        output.t = tMax;\n        done = true;\n        break;\n      }\n      if (s2 > target - tolerance) {\n        t1 = t2;\n        break;\n      }\n      let s1 = b2EvaluateSeparation(fcn, indexA, indexB, t1);\n      if (s1 < target - tolerance) {\n        output.state = b2TOIState.b2_toiStateFailed;\n        output.t = t1;\n        done = true;\n        break;\n      }\n      if (s1 <= target + tolerance) {\n        output.state = b2TOIState.b2_toiStateHit;\n        output.t = t1;\n        done = true;\n        break;\n      }\n      let rootIterCount = 0;\n      let a1 = t1, a2 = t2;\n      for (; ; ) {\n        let t;\n        if (rootIterCount & 1) {\n          t = a1 + (target - s1) * (a2 - a1) / (s2 - s1);\n        } else {\n          t = 0.5 * (a1 + a2);\n        }\n        ++rootIterCount;\n        const s = b2EvaluateSeparation(fcn, indexA, indexB, t);\n        if (Math.abs(s - target) < tolerance) {\n          t2 = t;\n          break;\n        }\n        if (s > target) {\n          a1 = t;\n          s1 = s;\n        } else {\n          a2 = t;\n          s2 = s;\n        }\n        if (rootIterCount == 50) {\n          break;\n        }\n      }\n      ++pushBackIter;\n      if (pushBackIter == B2_MAX_POLYGON_VERTICES) {\n        break;\n      }\n    }\n    ++iter;\n    if (done) {\n      break;\n    }\n    if (iter == k_maxIterations) {\n      output.state = b2TOIState.b2_toiStateFailed;\n      output.t = t1;\n      break;\n    }\n  }\n  return output;\n}\n\n// src/hull_c.js\nfunction b2RecurseHull(p14, p23, ps, count) {\n  const hull = new b2Hull();\n  if (count === 0) {\n    return hull;\n  }\n  const e = b2Normalize(b2Sub(p23, p14));\n  const rightPoints = [];\n  let rightCount = 0;\n  let bestIndex = 0;\n  let bestDistance = b2Cross(b2Sub(ps[bestIndex], p14), e);\n  if (bestDistance > 0) {\n    rightPoints[rightCount++] = ps[bestIndex];\n  }\n  for (let i = 1; i < count; ++i) {\n    const distance = b2Cross(b2Sub(ps[i], p14), e);\n    if (distance > bestDistance) {\n      bestIndex = i;\n      bestDistance = distance;\n    }\n    if (distance > 0) {\n      rightPoints[rightCount++] = ps[i];\n    }\n  }\n  if (bestDistance < 2 * b2_linearSlop) {\n    return hull;\n  }\n  const bestPoint = ps[bestIndex];\n  const hull1 = b2RecurseHull(p14, bestPoint, rightPoints, rightCount);\n  const hull2 = b2RecurseHull(bestPoint, p23, rightPoints, rightCount);\n  for (let i = 0; i < hull1.count; ++i) {\n    hull.points[hull.count++] = hull1.points[i];\n  }\n  hull.points[hull.count++] = bestPoint;\n  for (let i = 0; i < hull2.count; ++i) {\n    hull.points[hull.count++] = hull2.points[i];\n  }\n  return hull;\n}\nfunction b2IsPolygonCCW(points, count) {\n  let area = 0;\n  for (let i = 0; i < count; i++) {\n    const j = (i + 1) % count;\n    area += (points[j].x - points[i].x) * (points[j].y + points[i].y);\n  }\n  return area < 0;\n}\nfunction b2ComputeHull(points, count) {\n  const hull = new b2Hull();\n  if (count < 3 || count > B2_MAX_POLYGON_VERTICES) {\n    return hull;\n  }\n  const aabb = new b2AABB(Number.MAX_VALUE, Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n  const ps = [];\n  let n = 0;\n  const tolSqr = 16 * b2_linearSlop * b2_linearSlop;\n  for (let i = 0; i < count; ++i) {\n    aabb.lowerBoundX = Math.min(aabb.lowerBoundX, points[i].x);\n    aabb.lowerBoundY = Math.min(aabb.lowerBoundY, points[i].y);\n    aabb.upperBoundX = Math.max(aabb.upperBoundX, points[i].x);\n    aabb.upperBoundY = Math.max(aabb.upperBoundY, points[i].y);\n    const vi = points[i];\n    let unique = true;\n    for (let j = 0; j < i; ++j) {\n      const vj = points[j];\n      const distSqr = b2DistanceSquared(vi, vj);\n      if (distSqr < tolSqr) {\n        unique = false;\n        break;\n      }\n    }\n    if (unique) {\n      ps[n++] = vi;\n    }\n  }\n  if (n < 3) {\n    return hull;\n  }\n  const c2 = b2AABB_Center(aabb);\n  let f1 = 0;\n  let dsq1 = b2DistanceSquared(c2, ps[f1]);\n  for (let i = 1; i < n; ++i) {\n    const dsq = b2DistanceSquared(c2, ps[i]);\n    if (dsq > dsq1) {\n      f1 = i;\n      dsq1 = dsq;\n    }\n  }\n  const p14 = ps[f1];\n  ps[f1] = ps[n - 1];\n  n = n - 1;\n  let f2 = 0;\n  let dsq2 = b2DistanceSquared(p14, ps[f2]);\n  for (let i = 1; i < n; ++i) {\n    const dsq = b2DistanceSquared(p14, ps[i]);\n    if (dsq > dsq2) {\n      f2 = i;\n      dsq2 = dsq;\n    }\n  }\n  const p23 = ps[f2];\n  ps[f2] = ps[n - 1];\n  n = n - 1;\n  const rightPoints = [];\n  let rightCount = 0;\n  const leftPoints = [];\n  let leftCount = 0;\n  const e = b2Normalize(b2Sub(p23, p14));\n  for (let i = 0; i < n; ++i) {\n    const d = b2Cross(b2Sub(ps[i], p14), e);\n    if (d >= 2 * b2_linearSlop) {\n      rightPoints[rightCount++] = ps[i];\n    } else if (d <= -2 * b2_linearSlop) {\n      leftPoints[leftCount++] = ps[i];\n    }\n  }\n  const hull1 = b2RecurseHull(p14, p23, rightPoints, rightCount);\n  const hull2 = b2RecurseHull(p23, p14, leftPoints, leftCount);\n  if (hull1.count === 0 && hull2.count === 0) {\n    return hull;\n  }\n  hull.points[hull.count++] = p14;\n  for (let i = 0; i < hull1.count; ++i) {\n    hull.points[hull.count++] = hull1.points[i];\n  }\n  hull.points[hull.count++] = p23;\n  for (let i = 0; i < hull2.count; ++i) {\n    hull.points[hull.count++] = hull2.points[i];\n  }\n  let searching = true;\n  while (searching && hull.count > 2) {\n    searching = false;\n    for (let i = 0; i < hull.count; ++i) {\n      const i1 = i;\n      const i2 = (i + 1) % hull.count;\n      const i3 = (i + 2) % hull.count;\n      const s1 = hull.points[i1];\n      const s2 = hull.points[i2];\n      const s3 = hull.points[i3];\n      const r = b2Normalize(b2Sub(s3, s1));\n      const distance = b2Cross(b2Sub(s2, s1), r);\n      if (distance <= 2 * b2_linearSlop) {\n        for (let j = i2; j < hull.count - 1; ++j) {\n          hull.points[j] = hull.points[j + 1];\n        }\n        hull.count -= 1;\n        searching = true;\n        break;\n      }\n    }\n  }\n  if (hull.count < 3) {\n    hull.count = 0;\n  }\n  return hull;\n}\nfunction b2ValidateHull(hull) {\n  if (!b2Validation) {\n    return true;\n  }\n  if (hull.count < 3 || B2_MAX_POLYGON_VERTICES < hull.count) {\n    return false;\n  }\n  if (!b2IsPolygonCCW(hull.points, hull.count)) {\n    return false;\n  }\n  for (let i = 0; i < hull.count; ++i) {\n    const i1 = i;\n    const i2 = i < hull.count - 1 ? i1 + 1 : 0;\n    const p4 = hull.points[i1];\n    const e = b2Normalize(b2Sub(hull.points[i2], p4));\n    for (let j = 0; j < hull.count; ++j) {\n      if (j === i1 || j === i2) {\n        continue;\n      }\n      const distance = b2Cross(b2Sub(hull.points[j], p4), e);\n      if (distance >= 0) {\n        return false;\n      }\n    }\n  }\n  for (let i = 0; i < hull.count; ++i) {\n    const i1 = i;\n    const i2 = (i + 1) % hull.count;\n    const i3 = (i + 2) % hull.count;\n    const p14 = hull.points[i1];\n    const p23 = hull.points[i2];\n    const p32 = hull.points[i3];\n    const e = b2Normalize(b2Sub(p32, p14));\n    const distance = b2Cross(b2Sub(p23, p14), e);\n    if (distance <= b2_linearSlop) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// src/geometry_c.js\nfunction b2IsValidRay(input) {\n  const isValid = b2Vec2_IsValid(input.origin) && b2Vec2_IsValid(input.translation) && b2IsValid(input.maxFraction) && 0 <= input.maxFraction && input.maxFraction < B2_HUGE;\n  return isValid;\n}\nfunction b2ComputePolygonCentroid(vertices, count) {\n  let center = new b2Vec2(0, 0);\n  let area = 0;\n  const origin = vertices[0];\n  const inv3 = 1 / 3;\n  for (let i = 1; i < count - 1; ++i) {\n    const e1 = b2Sub(vertices[i], origin);\n    const e2 = b2Sub(vertices[i + 1], origin);\n    const a = 0.5 * b2Cross(e1, e2);\n    center = b2MulAdd(center, a * inv3, b2Add(e1, e2));\n    area += a;\n  }\n  const invArea = 1 / area;\n  center.x *= invArea;\n  center.y *= invArea;\n  center = b2Add(origin, center);\n  return center;\n}\nfunction b2MakePolygon(hull, radius, forceCheck = true) {\n  if (forceCheck && !b2ValidateHull(hull)) {\n    return null;\n  }\n  if (hull.count < 3) {\n    return b2MakeSquare(0.5);\n  }\n  const shape = new b2Polygon();\n  shape.count = hull.count;\n  shape.radius = radius;\n  for (let i = 0; i < shape.count; ++i) {\n    shape.vertices[i] = hull.points[i];\n  }\n  for (let i = 0; i < shape.count; ++i) {\n    const i1 = i;\n    const i2 = i + 1 < shape.count ? i + 1 : 0;\n    const edge = b2Sub(shape.vertices[i2], shape.vertices[i1]);\n    shape.normals[i] = b2Normalize(b2CrossVS(edge, 1));\n  }\n  shape.centroid = b2ComputePolygonCentroid(shape.vertices, shape.count);\n  return shape;\n}\nfunction b2MakeOffsetPolygon(hull, radius, transform, forceCheck = true) {\n  if (hull.count < 3) {\n    return b2MakeSquare(0.5);\n  }\n  const shape = new b2Polygon();\n  shape.count = hull.count;\n  shape.radius = radius;\n  for (let i = 0; i < shape.count; ++i) {\n    shape.vertices[i] = b2TransformPoint(transform, hull.points[i]);\n  }\n  for (let i = 0; i < shape.count; ++i) {\n    const i1 = i;\n    const i2 = i + 1 < shape.count ? i + 1 : 0;\n    const edge = b2Sub(shape.vertices[i2], shape.vertices[i1]);\n    shape.normals[i] = b2Normalize(b2CrossVS(edge, 1));\n  }\n  shape.centroid = b2ComputePolygonCentroid(shape.vertices, shape.count);\n  return shape;\n}\nfunction b2MakeSquare(h) {\n  return b2MakeBox(h, h);\n}\nfunction b2MakeBox(hx, hy) {\n  const shape = new b2Polygon();\n  shape.count = 4;\n  shape.vertices[0] = new b2Vec2(-hx, -hy);\n  shape.vertices[1] = new b2Vec2(hx, -hy);\n  shape.vertices[2] = new b2Vec2(hx, hy);\n  shape.vertices[3] = new b2Vec2(-hx, hy);\n  shape.normals[0] = new b2Vec2(0, -1);\n  shape.normals[1] = new b2Vec2(1, 0);\n  shape.normals[2] = new b2Vec2(0, 1);\n  shape.normals[3] = new b2Vec2(-1, 0);\n  shape.radius = 0;\n  shape.centroid = new b2Vec2(0, 0);\n  return shape;\n}\nfunction b2MakeRoundedBox(hx, hy, radius) {\n  const shape = b2MakeBox(hx, hy);\n  shape.radius = radius;\n  return shape;\n}\nfunction b2MakeOffsetBox(hx, hy, center, angle = 0) {\n  const xf2 = new b2Transform();\n  xf2.p = center;\n  xf2.q = b2MakeRot(angle);\n  const shape = new b2Polygon();\n  shape.count = 4;\n  shape.vertices[0] = b2TransformPoint(xf2, new b2Vec2(-hx, -hy));\n  shape.vertices[1] = b2TransformPoint(xf2, new b2Vec2(hx, -hy));\n  shape.vertices[2] = b2TransformPoint(xf2, new b2Vec2(hx, hy));\n  shape.vertices[3] = b2TransformPoint(xf2, new b2Vec2(-hx, hy));\n  shape.normals[0] = b2RotateVector(xf2.q, new b2Vec2(0, -1));\n  shape.normals[1] = b2RotateVector(xf2.q, new b2Vec2(1, 0));\n  shape.normals[2] = b2RotateVector(xf2.q, new b2Vec2(0, 1));\n  shape.normals[3] = b2RotateVector(xf2.q, new b2Vec2(-1, 0));\n  shape.radius = 0;\n  shape.centroid = center;\n  return shape;\n}\nfunction b2TransformPolygon(transform, polygon) {\n  const p4 = polygon;\n  for (let i = 0; i < p4.count; ++i) {\n    p4.vertices[i] = b2TransformPoint(transform, p4.vertices[i]);\n    p4.normals[i] = b2RotateVector(transform.q, p4.normals[i]);\n  }\n  p4.centroid = b2TransformPoint(transform, p4.centroid);\n  return p4;\n}\nfunction b2ComputeCircleMass(shape, density) {\n  const rr = shape.radius * shape.radius;\n  const massData = new b2MassData();\n  massData.mass = density * Math.PI * rr;\n  massData.center = shape.center.clone();\n  massData.rotationalInertia = massData.mass * (0.5 * rr + b2Dot(shape.center, shape.center));\n  return massData;\n}\nfunction b2ComputeCapsuleMass(shape, density) {\n  const radius = shape.radius;\n  const rr = radius * radius;\n  const p14 = shape.center1;\n  const p23 = shape.center2;\n  const length = b2Length(b2Sub(p23, p14));\n  const ll = length * length;\n  const circleMass = density * Math.PI * rr;\n  const boxMass = density * (2 * radius * length);\n  const massData = new b2MassData();\n  massData.mass = circleMass + boxMass;\n  massData.center = new b2Vec2(0.5 * (p14.x + p23.x), 0.5 * (p14.y + p23.y));\n  const lc = 4 * radius / (3 * Math.PI);\n  const h = 0.5 * length;\n  const circleInertia = circleMass * (0.5 * rr + h * h + 2 * h * lc);\n  const boxInertia = boxMass * (4 * rr + ll) / 12;\n  massData.rotationalInertia = circleInertia + boxInertia;\n  massData.rotationalInertia += massData.mass * b2Dot(massData.center, massData.center);\n  return massData;\n}\nfunction b2ComputePolygonMass(shape, density) {\n  if (shape.count == 1) {\n    const circle = new b2Circle();\n    circle.center = shape.vertices[0].clone();\n    circle.radius = shape.radius;\n    return b2ComputeCircleMass(circle, density);\n  }\n  if (shape.count == 2) {\n    const capsule = new b2Capsule();\n    capsule.center1 = shape.vertices[0].clone();\n    capsule.center2 = shape.vertices[1].clone();\n    capsule.radius = shape.radius;\n    return b2ComputeCapsuleMass(capsule, density);\n  }\n  const vertices = new Array(B2_MAX_POLYGON_VERTICES);\n  const count = shape.count;\n  const radius = shape.radius;\n  if (radius > 0) {\n    const sqrt2 = 1.412;\n    for (let i = 0; i < count; ++i) {\n      const j = i == 0 ? count - 1 : i - 1;\n      const n1 = shape.normals[j];\n      const n2 = shape.normals[i];\n      const mid = b2Normalize(b2Add(n1, n2));\n      vertices[i] = b2MulAdd(shape.vertices[i], sqrt2 * radius, mid);\n    }\n  } else {\n    for (let i = 0; i < count; ++i) {\n      vertices[i] = shape.vertices[i];\n    }\n  }\n  let center = new b2Vec2(0, 0);\n  let area = 0;\n  let rotationalInertia = 0;\n  const r = vertices[0];\n  const inv3 = 1 / 3;\n  for (let i = 1; i < count - 1; ++i) {\n    const e1 = b2Sub(vertices[i], r);\n    const e2 = b2Sub(vertices[i + 1], r);\n    const D = b2Cross(e1, e2);\n    const triangleArea = 0.5 * D;\n    area += triangleArea;\n    center = b2MulAdd(center, triangleArea * inv3, b2Add(e1, e2));\n    const ex1 = e1.x, ey1 = e1.y;\n    const ex2 = e2.x, ey2 = e2.y;\n    const intx2 = ex1 * ex1 + ex2 * ex1 + ex2 * ex2;\n    const inty2 = ey1 * ey1 + ey2 * ey1 + ey2 * ey2;\n    rotationalInertia += 0.25 * inv3 * D * (intx2 + inty2);\n  }\n  const massData = new b2MassData();\n  massData.mass = density * area;\n  const invArea = 1 / area;\n  center.x *= invArea;\n  center.y *= invArea;\n  massData.center = b2Add(r, center);\n  massData.rotationalInertia = density * rotationalInertia;\n  massData.rotationalInertia += massData.mass * (b2Dot(massData.center, massData.center) - b2Dot(center, center));\n  return massData;\n}\nfunction b2ComputeCircleAABB(shape, xf2) {\n  const pX = xf2.q.c * shape.center.x - xf2.q.s * shape.center.y + xf2.p.x;\n  const pY = xf2.q.s * shape.center.x + xf2.q.c * shape.center.y + xf2.p.y;\n  const r = shape.radius;\n  const aabb = new b2AABB(pX - r, pY - r, pX + r, pY + r);\n  return aabb;\n}\nfunction b2ComputeCapsuleAABB(shape, xf2) {\n  const v1 = b2TransformPoint(xf2, shape.center1);\n  const v2 = b2TransformPoint(xf2, shape.center2);\n  const lowerX = Math.min(v1.x, v2.x) - shape.radius;\n  const lowerY = Math.min(v1.y, v2.y) - shape.radius;\n  const upperX = Math.max(v1.x, v2.x) + shape.radius;\n  const upperY = Math.max(v1.y, v2.y) + shape.radius;\n  const aabb = new b2AABB(lowerX, lowerY, upperX, upperY);\n  return aabb;\n}\nfunction b2ComputePolygonAABB(shape, xf2) {\n  const sv = shape.vertices[0];\n  let lowerX = xf2.q.c * sv.x - xf2.q.s * sv.y + xf2.p.x;\n  let lowerY = xf2.q.s * sv.x + xf2.q.c * sv.y + xf2.p.y;\n  let upperX = lowerX, upperY = lowerY;\n  for (let i = 1; i < shape.count; ++i) {\n    const sv2 = shape.vertices[i];\n    const vx = xf2.q.c * sv2.x - xf2.q.s * sv2.y + xf2.p.x;\n    const vy = xf2.q.s * sv2.x + xf2.q.c * sv2.y + xf2.p.y;\n    lowerX = Math.min(lowerX, vx);\n    lowerY = Math.min(lowerY, vy);\n    upperX = Math.max(upperX, vx);\n    upperY = Math.max(upperY, vy);\n  }\n  const r = shape.radius;\n  lowerX -= r;\n  lowerY -= r;\n  upperX += r;\n  upperY += r;\n  const aabb = new b2AABB(lowerX, lowerY, upperX, upperY);\n  return aabb;\n}\nfunction b2ComputeSegmentAABB(shape, xf2) {\n  const v1 = b2TransformPoint(xf2, shape.point1);\n  const v2 = b2TransformPoint(xf2, shape.point2);\n  const lower = b2Min(v1, v2);\n  const upper = b2Max(v1, v2);\n  const aabb = new b2AABB(lower.x, lower.y, upper.x, upper.y);\n  return aabb;\n}\nfunction b2PointInCircle(point, shape) {\n  const center = shape.center;\n  return b2DistanceSquared(point, center) <= shape.radius * shape.radius;\n}\nfunction b2PointInCapsule(point, shape) {\n  const rr = shape.radius * shape.radius;\n  const p14 = shape.center1;\n  const p23 = shape.center2;\n  const d = b2Sub(p23, p14);\n  const dd = b2Dot(d, d);\n  if (dd == 0) {\n    return b2DistanceSquared(point, p14) <= rr;\n  }\n  let t = b2Dot(b2Sub(point, p14), d) / dd;\n  t = b2ClampFloat(t, 0, 1);\n  const c2 = b2MulAdd(p14, t, d);\n  return b2DistanceSquared(point, c2) <= rr;\n}\nfunction b2PointInPolygon(point, shape) {\n  const input = new b2DistanceInput();\n  input.proxyA = b2MakeProxy(shape.vertices, shape.count, 0);\n  input.proxyB = b2MakeProxy([point], 1, 0);\n  input.transformA = new b2Transform(new b2Vec2(0, 0), new b2Rot(1, 0));\n  input.transformB = new b2Transform(new b2Vec2(0, 0), new b2Rot(1, 0));\n  input.useRadii = false;\n  const cache = new b2DistanceCache();\n  const output = b2ShapeDistance(cache, input, null, 0);\n  return output.distance <= shape.radius;\n}\nvar rayPoint2 = new b2Vec2(0, 0);\nvar rayNormal2 = new b2Vec2(0, 1);\nfunction b2RayCastCircle(input, shape) {\n  const p4 = shape.center.clone();\n  const output = new b2CastOutput(rayNormal2, rayPoint2);\n  const s = b2Sub(input.origin, p4);\n  const res = b2GetLengthAndNormalize(input.translation);\n  const length = res.length;\n  if (length == 0) {\n    return output;\n  }\n  const d = res.normal;\n  const t = -b2Dot(s, d);\n  const c2 = b2MulAdd(s, t, d);\n  const cc = b2Dot(c2, c2);\n  const r = shape.radius;\n  const rr = r * r;\n  if (cc > rr) {\n    return output;\n  }\n  const h = Math.sqrt(rr - cc);\n  const fraction = t - h;\n  if (fraction < 0 || input.maxFraction * length < fraction) {\n    return output;\n  }\n  const hitPoint = b2MulAdd(s, fraction, d);\n  output.fraction = fraction / length;\n  output.normal = b2Normalize(hitPoint);\n  output.point = b2MulAdd(p4, shape.radius, output.normal);\n  output.hit = true;\n  return output;\n}\nfunction b2RayCastCapsule(input, shape) {\n  const output = new b2CastOutput(rayNormal2, rayPoint2);\n  const v1 = shape.center1;\n  const v2 = shape.center2;\n  const e = b2Sub(v2, v1);\n  const res = b2GetLengthAndNormalize(e);\n  const capsuleLength = res.length;\n  const a = res.normal;\n  if (capsuleLength < eps) {\n    const circle = new b2Circle();\n    circle.center = v1;\n    circle.radius = shape.radius;\n    return b2RayCastCircle(input, circle);\n  }\n  const p14 = input.origin;\n  const d = input.translation;\n  const q3 = b2Sub(p14, v1);\n  const qa = b2Dot(q3, a);\n  const qp = b2MulAdd(q3, -qa, a);\n  const radius = shape.radius;\n  if (b2Dot(qp, qp) < radius * radius) {\n    if (qa < 0) {\n      const circle = new b2Circle();\n      circle.center = v1;\n      circle.radius = shape.radius;\n      return b2RayCastCircle(input, circle);\n    }\n    if (qa > 1) {\n      const circle = new b2Circle();\n      circle.center = v2;\n      circle.radius = shape.radius;\n      return b2RayCastCircle(input, circle);\n    }\n    return output;\n  }\n  let n = new b2Vec2(a.y, -a.x);\n  const res0 = b2GetLengthAndNormalize(d);\n  const rayLength = res0.length;\n  const u = res0.normal;\n  const den = -a.x * u.y + u.x * a.y;\n  if (-eps < den && den < eps) {\n    return output;\n  }\n  const b1 = b2MulSub(q3, radius, n);\n  const b2 = b2MulAdd(q3, radius, n);\n  const invDen = 1 / den;\n  const s21 = (a.x * b1.y - b1.x * a.y) * invDen;\n  const s22 = (a.x * b2.y - b2.x * a.y) * invDen;\n  let s2, b;\n  if (s21 < s22) {\n    s2 = s21;\n    b = b1;\n  } else {\n    s2 = s22;\n    b = b2;\n    n = b2Neg(n);\n  }\n  if (s2 < 0 || input.maxFraction * rayLength < s2) {\n    return output;\n  }\n  const s1 = (-b.x * u.y + u.x * b.y) * invDen;\n  if (s1 < 0) {\n    const circle = new b2Circle();\n    circle.center = v1;\n    circle.radius = shape.radius;\n    return b2RayCastCircle(input, circle);\n  } else if (capsuleLength < s1) {\n    const circle = new b2Circle();\n    circle.center = v2;\n    circle.radius = shape.radius;\n    return b2RayCastCircle(input, circle);\n  } else {\n    output.fraction = s2 / rayLength;\n    output.point = b2Add(b2Lerp(v1, v2, s1 / capsuleLength), b2MulSV(shape.radius, n));\n    output.normal = n;\n    output.hit = true;\n    return output;\n  }\n}\nfunction b2RayCastSegment(input, shape, oneSided) {\n  if (oneSided) {\n    const offset = b2Cross(b2Sub(input.origin, shape.point1), b2Sub(shape.point2, shape.point1));\n    if (offset < 0) {\n      const output2 = new b2CastOutput(rayNormal2, rayPoint2);\n      return output2;\n    }\n  }\n  const p14 = input.origin;\n  const d = input.translation;\n  const v1 = shape.point1;\n  const v2 = shape.point2;\n  const e = b2Sub(v2, v1);\n  const output = new b2CastOutput(rayNormal2, rayPoint2);\n  const res = b2GetLengthAndNormalize(e);\n  const length = res.length;\n  const eUnit = res.normal;\n  if (length == 0) {\n    return output;\n  }\n  let normal = b2RightPerp(eUnit);\n  const numerator = b2Dot(normal, b2Sub(v1, p14));\n  const denominator = b2Dot(normal, d);\n  if (denominator == 0) {\n    return output;\n  }\n  const t = numerator / denominator;\n  if (t < 0 || input.maxFraction < t) {\n    return output;\n  }\n  const p4 = b2MulAdd(p14, t, d);\n  const s = b2Dot(b2Sub(p4, v1), eUnit);\n  if (s < 0 || length < s) {\n    return output;\n  }\n  if (numerator > 0) {\n    normal = b2Neg(normal);\n  }\n  output.fraction = t;\n  output.point = b2MulAdd(p14, t, d);\n  output.normal = normal;\n  output.hit = true;\n  return output;\n}\nfunction b2RayCastPolygon(input, shape) {\n  if (shape.radius === 0) {\n    const p14 = input.origin;\n    const d = input.translation;\n    let lower = 0, upper = input.maxFraction;\n    let index = -1;\n    const output = new b2CastOutput(rayNormal2, rayPoint2);\n    for (let i = 0; i < shape.count; ++i) {\n      const numerator = b2Dot(shape.normals[i], b2Sub(shape.vertices[i], p14));\n      const denominator = b2Dot(shape.normals[i], d);\n      if (denominator === 0) {\n        if (numerator < 0) {\n          return output;\n        }\n      } else {\n        if (denominator < 0 && numerator < lower * denominator) {\n          lower = numerator / denominator;\n          index = i;\n        } else if (denominator > 0 && numerator < upper * denominator) {\n          upper = numerator / denominator;\n        }\n      }\n      if (upper < lower) {\n        return output;\n      }\n    }\n    if (index >= 0) {\n      output.fraction = lower;\n      output.normal = shape.normals[index];\n      output.point = b2MulAdd(p14, lower, d);\n      output.hit = true;\n    }\n    return output;\n  }\n  const castInput = new b2ShapeCastPairInput();\n  castInput.proxyA = b2MakeProxy(shape.vertices, shape.count, shape.radius);\n  castInput.proxyB = b2MakeProxy([input.origin], 1, 0);\n  castInput.transformA = new b2Transform(new b2Vec2(0, 0), new b2Rot(1, 0));\n  castInput.transformB = new b2Transform(new b2Vec2(0, 0), new b2Rot(1, 0));\n  castInput.translationB = input.translation;\n  castInput.maxFraction = input.maxFraction;\n  return b2ShapeCast(castInput);\n}\nfunction b2ShapeCastCircle(input, shape) {\n  const pairInput = new b2ShapeCastPairInput();\n  pairInput.proxyA = b2MakeProxy([shape.center.clone()], 1, shape.radius);\n  pairInput.proxyB = b2MakeProxy(input.points, input.count, input.radius);\n  pairInput.transformA = new b2Transform(new b2Vec2(0, 0), new b2Rot(1, 0));\n  pairInput.transformB = new b2Transform(new b2Vec2(0, 0), new b2Rot(1, 0));\n  pairInput.translationB = input.translation;\n  pairInput.maxFraction = input.maxFraction;\n  const output = b2ShapeCast(pairInput);\n  return output;\n}\nfunction b2ShapeCastCapsule(input, shape) {\n  const pairInput = new b2ShapeCastPairInput();\n  pairInput.proxyA = b2MakeProxy([shape.center1, shape.center2], 2, shape.radius);\n  pairInput.proxyB = b2MakeProxy(input.points, input.count, input.radius);\n  pairInput.transformA = new b2Transform(new b2Vec2(0, 0), new b2Rot(1, 0));\n  pairInput.transformB = new b2Transform(new b2Vec2(0, 0), new b2Rot(1, 0));\n  pairInput.translationB = input.translation;\n  pairInput.maxFraction = input.maxFraction;\n  const output = b2ShapeCast(pairInput);\n  return output;\n}\nfunction b2ShapeCastSegment(input, shape) {\n  const pairInput = new b2ShapeCastPairInput();\n  pairInput.proxyA = b2MakeProxy([shape.point1, shape.point2], 2, 0);\n  pairInput.proxyB = b2MakeProxy(input.points, input.count, input.radius);\n  pairInput.transformA = new b2Transform(new b2Vec2(0, 0), new b2Rot(1, 0));\n  pairInput.transformB = new b2Transform(new b2Vec2(0, 0), new b2Rot(1, 0));\n  pairInput.translationB = input.translation;\n  pairInput.maxFraction = input.maxFraction;\n  const output = b2ShapeCast(pairInput);\n  return output;\n}\nfunction b2ShapeCastPolygon(input, shape) {\n  const pairInput = new b2ShapeCastPairInput();\n  pairInput.proxyA = b2MakeProxy(shape.vertices, shape.count, shape.radius);\n  pairInput.proxyB = b2MakeProxy(input.points, input.count, input.radius);\n  pairInput.transformA = new b2Transform(new b2Vec2(0, 0), new b2Rot(1, 0));\n  pairInput.transformB = new b2Transform(new b2Vec2(0, 0), new b2Rot(1, 0));\n  pairInput.translationB = input.translation;\n  pairInput.maxFraction = input.maxFraction;\n  const output = b2ShapeCast(pairInput);\n  return output;\n}\n\n// src/shape_c.js\nfunction b2GetShape(world, shapeId) {\n  const id = shapeId.index1 - 1;\n  const shape = world.shapeArray[id];\n  return shape;\n}\nfunction b2GetOwnerTransform(world, shape) {\n  return b2GetBodyTransform(world, shape.bodyId);\n}\nfunction b2GetChainShape(world, chainId) {\n  const id = chainId.index1 - 1;\n  const chain = world.chainArray[id];\n  return chain;\n}\nfunction b2UpdateShapeAABBs(shape, transform, proxyType) {\n  const speculativeDistance = b2_speculativeDistance;\n  const aabbMargin = b2_aabbMargin;\n  const aabb = b2ComputeShapeAABB(shape, transform);\n  aabb.lowerBoundX -= speculativeDistance;\n  aabb.lowerBoundY -= speculativeDistance;\n  aabb.upperBoundX += speculativeDistance;\n  aabb.upperBoundY += speculativeDistance;\n  shape.aabb = aabb;\n  const margin = proxyType == b2BodyType.b2_staticBody ? speculativeDistance : aabbMargin;\n  const fatAABB = new b2AABB(\n    aabb.lowerBoundX - margin,\n    aabb.lowerBoundY - margin,\n    aabb.upperBoundX + margin,\n    aabb.upperBoundY + margin\n  );\n  shape.fatAABB = fatAABB;\n}\nfunction b2CreateShapeInternal(world, body, transform, def, geometry, shapeType) {\n  const shapeId = b2AllocId(world.shapeIdPool);\n  if (shapeId == world.shapeArray.length) {\n    world.shapeArray.push(new b2Shape());\n  }\n  const shape = world.shapeArray[shapeId];\n  switch (shapeType) {\n    case b2ShapeType.b2_capsuleShape:\n      shape.capsule = geometry;\n      break;\n    case b2ShapeType.b2_circleShape:\n      shape.circle = geometry;\n      break;\n    case b2ShapeType.b2_polygonShape:\n      shape.polygon = geometry;\n      break;\n    case b2ShapeType.b2_segmentShape:\n      shape.segment = geometry;\n      break;\n    case b2ShapeType.b2_chainSegmentShape:\n      shape.chainSegment = geometry;\n      break;\n    default:\n      break;\n  }\n  shape.id = shapeId;\n  shape.bodyId = body.id;\n  shape.type = shapeType;\n  shape.density = def.density;\n  shape.friction = def.friction;\n  shape.restitution = def.restitution;\n  shape.filter = def.filter;\n  shape.userData = def.userData;\n  shape.customColor = def.customColor;\n  shape.isSensor = def.isSensor;\n  shape.enlargedAABB = false;\n  shape.enableSensorEvents = def.enableSensorEvents;\n  shape.enableContactEvents = def.enableContactEvents;\n  shape.enableHitEvents = def.enableHitEvents;\n  shape.enablePreSolveEvents = def.enablePreSolveEvents;\n  shape.isFast = false;\n  shape.proxyKey = B2_NULL_INDEX;\n  shape.localCentroid = b2GetShapeCentroid(shape);\n  shape.aabb = new b2AABB();\n  shape.fatAABB = new b2AABB();\n  shape.revision += 1;\n  if (body.setIndex != b2SetType.b2_disabledSet) {\n    const proxyType = body.type;\n    b2CreateShapeProxy(shape, world.broadPhase, proxyType, transform, def.forceContactCreation);\n  }\n  if (body.headShapeId != B2_NULL_INDEX) {\n    const headShape = world.shapeArray[body.headShapeId];\n    headShape.prevShapeId = shapeId;\n  }\n  shape.prevShapeId = B2_NULL_INDEX;\n  shape.nextShapeId = body.headShapeId;\n  body.headShapeId = shapeId;\n  body.shapeCount += 1;\n  b2ValidateSolverSets(world);\n  return shape;\n}\nfunction b2CreateShape(bodyId, def, geometry, shapeType) {\n  const world = b2GetWorldLocked(bodyId.world0);\n  if (world === null) {\n    return new b2ShapeId(0, 0, 0);\n  }\n  const body = b2GetBodyFullId(world, bodyId);\n  const transform = b2GetBodyTransformQuick(world, body);\n  const shape = b2CreateShapeInternal(world, body, transform, def, geometry, shapeType);\n  if (body.updateBodyMass === true) {\n    b2UpdateBodyMassData(world, body);\n  }\n  b2ValidateSolverSets(world);\n  const id = new b2ShapeId(shape.id + 1, bodyId.world0, shape.revision);\n  return id;\n}\nfunction b2CreateCircleShape(bodyId, def, circle) {\n  return b2CreateShape(bodyId, def, circle, b2ShapeType.b2_circleShape);\n}\nfunction b2CreateCapsuleShape(bodyId, def, capsule) {\n  const lengthSqr = b2DistanceSquared(capsule.center1, capsule.center2);\n  if (lengthSqr <= b2_linearSlop * b2_linearSlop) {\n    const circle = new b2Circle();\n    circle.center = b2Lerp(capsule.center1, capsule.center2, 0.5);\n    circle.radius = capsule.radius;\n    return b2CreateShape(bodyId, def, circle, b2ShapeType.b2_circleShape);\n  }\n  return b2CreateShape(bodyId, def, capsule, b2ShapeType.b2_capsuleShape);\n}\nfunction b2CreatePolygonShape(bodyId, def, polygon) {\n  return b2CreateShape(bodyId, def, polygon, b2ShapeType.b2_polygonShape);\n}\nfunction b2CreateSegmentShape(bodyId, def, segment) {\n  const lengthSqr = b2DistanceSquared(segment.point1, segment.point2);\n  if (lengthSqr <= b2_linearSlop * b2_linearSlop) {\n    return new b2ShapeId();\n  }\n  return b2CreateShape(bodyId, def, segment, b2ShapeType.b2_segmentShape);\n}\nfunction b2DestroyShapeInternal(world, shape, body, wakeBodies) {\n  const shapeId = shape.id;\n  if (shape.prevShapeId !== B2_NULL_INDEX) {\n    world.shapeArray[shape.prevShapeId].nextShapeId = shape.nextShapeId;\n  }\n  if (shape.nextShapeId !== B2_NULL_INDEX) {\n    world.shapeArray[shape.nextShapeId].prevShapeId = shape.prevShapeId;\n  }\n  if (shapeId === body.headShapeId) {\n    body.headShapeId = shape.nextShapeId;\n  }\n  body.shapeCount -= 1;\n  b2DestroyShapeProxy(shape, world.broadPhase);\n  let contactKey = body.headContactKey;\n  while (contactKey !== B2_NULL_INDEX) {\n    const contactId = contactKey >> 1;\n    const edgeIndex = contactKey & 1;\n    const contact = world.contactArray[contactId];\n    contactKey = contact.edges[edgeIndex].nextKey;\n    if (contact.shapeIdA === shapeId || contact.shapeIdB === shapeId) {\n      b2DestroyContact(world, contact, wakeBodies);\n    }\n  }\n  b2FreeId(world.shapeIdPool, shapeId);\n  shape.id = B2_NULL_INDEX;\n  b2ValidateSolverSets(world);\n}\nfunction b2DestroyShape(shapeId) {\n  const world = b2GetWorldLocked(shapeId.world0);\n  const id = shapeId.index1 - 1;\n  const shape = world.shapeArray[id];\n  const wakeBodies = true;\n  const body = b2GetBody(world, shape.bodyId);\n  b2DestroyShapeInternal(world, shape, body, wakeBodies);\n  if (body.updateBodyMass === true) {\n    b2UpdateBodyMassData(world, body);\n  }\n}\nfunction b2CreateChain(bodyId, def) {\n  const world = b2GetWorldLocked(bodyId.world0);\n  if (world === null) {\n    return new b2ChainId();\n  }\n  const body = b2GetBodyFullId(world, bodyId);\n  const transform = b2GetBodyTransformQuick(world, body);\n  const chainId = b2AllocId(world.chainIdPool);\n  if (chainId === world.chainArray.length) {\n    world.chainArray.push(new b2ChainShape());\n  }\n  const chainShape = world.chainArray[chainId];\n  chainShape.id = chainId;\n  chainShape.bodyId = body.id;\n  chainShape.nextChainId = body.headChainId;\n  chainShape.revision += 1;\n  body.headChainId = chainId;\n  const shapeDef = b2DefaultShapeDef();\n  shapeDef.userData = def.userData;\n  shapeDef.restitution = def.restitution;\n  shapeDef.friction = def.friction;\n  shapeDef.filter = def.filter;\n  shapeDef.enableContactEvents = false;\n  shapeDef.enableHitEvents = false;\n  shapeDef.enableSensorEvents = false;\n  const n = def.count;\n  const points = def.points;\n  let chainSegment;\n  if (def.isLoop) {\n    chainShape.count = n;\n    chainShape.shapeIndices = new Array(n);\n    let prevIndex = n - 1;\n    for (let i = 0; i < n - 2; ++i) {\n      chainSegment = new b2ChainSegment();\n      chainSegment.ghost1 = points[prevIndex].clone();\n      chainSegment.segment = new b2Segment();\n      chainSegment.segment.point1 = points[i].clone();\n      chainSegment.segment.point2 = points[i + 1].clone();\n      chainSegment.ghost2 = points[i + 2].clone();\n      chainSegment.chainId = chainId;\n      prevIndex = i;\n      const shape2 = b2CreateShapeInternal(world, body, transform, shapeDef, chainSegment, b2ShapeType.b2_chainSegmentShape);\n      chainShape.shapeIndices[i] = shape2.id;\n    }\n    chainSegment = new b2ChainSegment();\n    chainSegment.ghost1 = points[n - 3].clone();\n    chainSegment.segment = new b2Segment();\n    chainSegment.segment.point1 = points[n - 2].clone();\n    chainSegment.segment.point2 = points[n - 1].clone();\n    chainSegment.ghost2 = points[0].clone();\n    chainSegment.chainId = chainId;\n    let shape = b2CreateShapeInternal(world, body, transform, shapeDef, chainSegment, b2ShapeType.b2_chainSegmentShape);\n    chainShape.shapeIndices[n - 2] = shape.id;\n    chainSegment = new b2ChainSegment();\n    chainSegment.ghost1 = points[n - 2].clone();\n    chainSegment.segment = new b2Segment();\n    chainSegment.segment.point1 = points[n - 1].clone();\n    chainSegment.segment.point2 = points[0].clone();\n    chainSegment.ghost2 = points[1].clone();\n    chainSegment.chainId = chainId;\n    shape = b2CreateShapeInternal(world, body, transform, shapeDef, chainSegment, b2ShapeType.b2_chainSegmentShape);\n    chainShape.shapeIndices[n - 1] = shape.id;\n  } else {\n    chainShape.count = n - 3;\n    chainShape.shapeIndices = new Array(n);\n    for (let i = 0; i < n - 3; ++i) {\n      chainSegment = new b2ChainSegment();\n      chainSegment.ghost1 = points[i].clone();\n      chainSegment.segment = new b2Segment();\n      chainSegment.segment.point1 = points[i + 1].clone();\n      chainSegment.segment.point2 = points[i + 2].clone();\n      chainSegment.ghost2 = points[i + 3].clone();\n      chainSegment.chainId = chainId;\n      const shape = b2CreateShapeInternal(world, body, transform, shapeDef, chainSegment, b2ShapeType.b2_chainSegmentShape);\n      chainShape.shapeIndices[i] = shape.id;\n    }\n  }\n  const id = new b2ChainId(chainId + 1, world.worldId, chainShape.revision);\n  return id;\n}\nfunction b2DestroyChain(chainId) {\n  const world = b2GetWorldLocked(chainId.world0);\n  const id = chainId.index1 - 1;\n  const chain = world.chainArray[id];\n  const wakeBodies = true;\n  const body = b2GetBody(world, chain.bodyId);\n  let chainIdPtr = body.headChainId;\n  let found = false;\n  while (chainIdPtr !== null) {\n    if (chainIdPtr === chain.id) {\n      found = true;\n      break;\n    }\n    chainIdPtr = world.chainArray[chainIdPtr].nextChainId;\n  }\n  if (found === false) {\n    return;\n  }\n  const count = chain.count;\n  for (let i = 0; i < count; ++i) {\n    const shapeId = chain.shapeIndices[i];\n    const shape = world.shapeArray[shapeId];\n    b2DestroyShapeInternal(world, shape, body, wakeBodies);\n  }\n  chain.shapeIndices = null;\n  b2FreeId(world.chainIdPool, id);\n  chain.id = null;\n  b2ValidateSolverSets(world);\n}\nfunction b2ComputeShapeAABB(shape, xf2) {\n  switch (shape.type) {\n    case b2ShapeType.b2_capsuleShape:\n      return b2ComputeCapsuleAABB(shape.capsule, xf2);\n    case b2ShapeType.b2_circleShape:\n      return b2ComputeCircleAABB(shape.circle, xf2);\n    case b2ShapeType.b2_polygonShape:\n      return b2ComputePolygonAABB(shape.polygon, xf2);\n    case b2ShapeType.b2_segmentShape:\n      return b2ComputeSegmentAABB(shape.segment, xf2);\n    case b2ShapeType.b2_chainSegmentShape:\n      return b2ComputeSegmentAABB(shape.chainSegment.segment, xf2);\n    default:\n      return new b2AABB(xf2.p.x, xf2.p.y, xf2.p.x, xf2.p.y);\n  }\n}\nfunction b2GetShapeCentroid(shape) {\n  switch (shape.type) {\n    case b2ShapeType.b2_capsuleShape:\n      return b2Lerp(shape.capsule.center1, shape.capsule.center2, 0.5);\n    case b2ShapeType.b2_circleShape:\n      return shape.circle.center.clone();\n    case b2ShapeType.b2_polygonShape:\n      return shape.polygon.centroid.clone();\n    case b2ShapeType.b2_segmentShape:\n      return b2Lerp(shape.segment.point1, shape.segment.point2, 0.5);\n    case b2ShapeType.b2_chainSegmentShape:\n      return b2Lerp(shape.chainSegment.segment.point1, shape.chainSegment.segment.point2, 0.5);\n    default:\n      return new b2Vec2(0, 0);\n  }\n}\nfunction b2GetShapePerimeter(shape) {\n  switch (shape.type) {\n    case b2ShapeType.b2_capsuleShape:\n      return 2 * b2Length(b2Sub(shape.capsule.center1, shape.capsule.center2)) + 2 * Math.PI * shape.capsule.radius;\n    case b2ShapeType.b2_circleShape:\n      return 2 * Math.PI * shape.circle.radius;\n    case b2ShapeType.b2_polygonShape: {\n      const points = shape.polygon.vertices;\n      const count = shape.polygon.count;\n      let perimeter = 2 * Math.PI * shape.polygon.radius;\n      let prev = points[count - 1];\n      for (let i = 0; i < count; ++i) {\n        const next = points[i];\n        perimeter += b2Length(b2Sub(next, prev));\n        prev = next;\n      }\n      return perimeter;\n    }\n    case b2ShapeType.b2_segmentShape:\n      return 2 * b2Length(b2Sub(shape.segment.point1, shape.segment.point2));\n    case b2ShapeType.b2_chainSegmentShape:\n      return 2 * b2Length(b2Sub(shape.chainSegment.segment.point1, shape.chainSegment.segment.point2));\n    default:\n      return 0;\n  }\n}\nfunction b2ComputeShapeMass(shape) {\n  switch (shape.type) {\n    case b2ShapeType.b2_capsuleShape:\n      return b2ComputeCapsuleMass(shape.capsule, shape.density);\n    case b2ShapeType.b2_circleShape:\n      return b2ComputeCircleMass(shape.circle, shape.density);\n    case b2ShapeType.b2_polygonShape:\n      return b2ComputePolygonMass(shape.polygon, shape.density);\n    default:\n      return new b2MassData();\n  }\n}\nfunction b2ComputeShapeExtent(shape, localCenter) {\n  const extent = new b2ShapeExtent();\n  switch (shape.type) {\n    case b2ShapeType.b2_capsuleShape:\n      {\n        const radius = shape.capsule.radius;\n        extent.minExtent = radius;\n        const c1 = b2Sub(shape.capsule.center1, localCenter);\n        const c2 = b2Sub(shape.capsule.center2, localCenter);\n        extent.maxExtent = Math.sqrt(Math.max(b2LengthSquared(c1), b2LengthSquared(c2))) + radius;\n      }\n      break;\n    case b2ShapeType.b2_circleShape:\n      {\n        const radius = shape.circle.radius;\n        extent.minExtent = radius;\n        extent.maxExtent = b2Length(b2Sub(shape.circle.center, localCenter)) + radius;\n      }\n      break;\n    case b2ShapeType.b2_polygonShape:\n      {\n        const poly = shape.polygon;\n        let minExtent = Number.MAX_VALUE;\n        let maxExtentSqr = 0;\n        const count = poly.count;\n        for (let i = 0; i < count; ++i) {\n          const v = poly.vertices[i];\n          const planeOffset = b2Dot(poly.normals[i], b2Sub(v, poly.centroid));\n          minExtent = Math.min(minExtent, planeOffset);\n          const distanceSqr = b2LengthSquared(b2Sub(v, localCenter));\n          maxExtentSqr = Math.max(maxExtentSqr, distanceSqr);\n        }\n        extent.minExtent = minExtent + poly.radius;\n        extent.maxExtent = Math.sqrt(maxExtentSqr) + poly.radius;\n      }\n      break;\n    case b2ShapeType.b2_segmentShape:\n      {\n        extent.minExtent = 0;\n        const c1 = b2Sub(shape.segment.point1, localCenter);\n        const c2 = b2Sub(shape.segment.point2, localCenter);\n        extent.maxExtent = Math.sqrt(Math.max(b2LengthSquared(c1), b2LengthSquared(c2)));\n      }\n      break;\n    case b2ShapeType.b2_chainSegmentShape:\n      {\n        extent.minExtent = 0;\n        const c1 = b2Sub(shape.chainSegment.segment.point1, localCenter);\n        const c2 = b2Sub(shape.chainSegment.segment.point2, localCenter);\n        extent.maxExtent = Math.sqrt(Math.max(b2LengthSquared(c1), b2LengthSquared(c2)));\n      }\n      break;\n    default:\n      break;\n  }\n  return extent;\n}\nvar rayPoint3 = new b2Vec2(0, 0);\nvar rayNormal3 = new b2Vec2(0, 1);\nfunction b2RayCastShape(input, shape, transform) {\n  const localInput = input;\n  localInput.origin = b2InvTransformPoint(transform, input.origin);\n  localInput.translation = b2InvRotateVector(transform.q, input.translation);\n  let output = new b2CastOutput();\n  output.hit = false;\n  output.fraction = 0;\n  output.normal = new b2Vec2(0, 0);\n  output.point = new b2Vec2(0, 0);\n  switch (shape.type) {\n    case b2ShapeType.b2_capsuleShape:\n      output = b2RayCastCapsule(localInput, shape.capsule);\n      break;\n    case b2ShapeType.b2_circleShape:\n      output = b2RayCastCircle(localInput, shape.circle);\n      break;\n    case b2ShapeType.b2_polygonShape:\n      output = b2RayCastPolygon(localInput, shape.polygon);\n      break;\n    case b2ShapeType.b2_segmentShape:\n      output = b2RayCastSegment(localInput, shape.segment, false);\n      break;\n    case b2ShapeType.b2_chainSegmentShape:\n      output = b2RayCastSegment(localInput, shape.chainSegment.segment, true);\n      break;\n    default:\n      return output;\n  }\n  output.point = b2TransformPoint(transform, output.point);\n  output.normal = b2RotateVector(transform.q, output.normal);\n  return output;\n}\nfunction b2ShapeCastShape(input, shape, transform) {\n  const localInput = input;\n  for (let i = 0; i < localInput.count; ++i) {\n    localInput.points[i] = b2InvTransformPoint(transform, input.points[i]);\n  }\n  localInput.translation = b2InvRotateVector(transform.q, input.translation);\n  let output = new b2CastOutput();\n  output.hit = false;\n  output.fraction = 0;\n  output.normal = new b2Vec2(0, 0);\n  output.point = new b2Vec2(0, 0);\n  switch (shape.type) {\n    case b2ShapeType.b2_capsuleShape:\n      output = b2ShapeCastCapsule(localInput, shape.capsule);\n      break;\n    case b2ShapeType.b2_circleShape:\n      output = b2ShapeCastCircle(localInput, shape.circle);\n      break;\n    case b2ShapeType.b2_polygonShape:\n      output = b2ShapeCastPolygon(localInput, shape.polygon);\n      break;\n    case b2ShapeType.b2_segmentShape:\n      output = b2ShapeCastSegment(localInput, shape.segment);\n      break;\n    case b2ShapeType.b2_chainSegmentShape:\n      output = b2ShapeCastSegment(localInput, shape.chainSegment.segment);\n      break;\n    default:\n      return output;\n  }\n  output.point = b2TransformPoint(transform, output.point);\n  output.normal = b2RotateVector(transform.q, output.normal);\n  return output;\n}\nfunction b2CreateShapeProxy(shape, bp, type, transform, forcePairCreation) {\n  b2UpdateShapeAABBs(shape, transform, type);\n  shape.proxyKey = b2BroadPhase_CreateProxy(bp, type, shape.fatAABB, shape.filter.categoryBits, shape.id, forcePairCreation);\n}\nfunction b2DestroyShapeProxy(shape, bp) {\n  if (shape.proxyKey != B2_NULL_INDEX) {\n    b2BroadPhase_DestroyProxy(bp, shape.proxyKey);\n    shape.proxyKey = B2_NULL_INDEX;\n  }\n}\nfunction b2MakeShapeDistanceProxy(shape) {\n  switch (shape.type) {\n    case b2ShapeType.b2_capsuleShape:\n      return b2MakeProxy([shape.capsule.center1.clone(), shape.capsule.center2.clone()], 2, shape.capsule.radius);\n    case b2ShapeType.b2_circleShape:\n      return b2MakeProxy([shape.circle.center.clone()], 1, shape.circle.radius);\n    case b2ShapeType.b2_polygonShape:\n      return b2MakeProxy(shape.polygon.vertices, shape.polygon.count, shape.polygon.radius);\n    case b2ShapeType.b2_segmentShape:\n      return b2MakeProxy([shape.segment.point1, shape.segment.point2], 2, 0);\n    case b2ShapeType.b2_chainSegmentShape:\n      return b2MakeProxy([shape.chainSegment.segment.point1.clone(), shape.chainSegment.segment.point2.clone()], 2, 0);\n    default:\n      return new b2DistanceProxy();\n  }\n}\nfunction b2Shape_GetBody(shapeId) {\n  const world = b2GetWorld(shapeId.world0);\n  const shape = b2GetShape(world, shapeId);\n  return b2MakeBodyId(world, shape.bodyId);\n}\nfunction b2Shape_SetUserData(shapeId, userData) {\n  const world = b2GetWorld(shapeId.world0);\n  const shape = b2GetShape(world, shapeId);\n  shape.userData = userData;\n}\nfunction b2Shape_GetUserData(shapeId) {\n  const world = b2GetWorld(shapeId.world0);\n  const shape = b2GetShape(world, shapeId);\n  return shape.userData;\n}\nfunction b2Shape_IsSensor(shapeId) {\n  const world = b2GetWorld(shapeId.world0);\n  const shape = b2GetShape(world, shapeId);\n  return shape.isSensor;\n}\nfunction b2Shape_TestPoint(shapeId, point) {\n  const world = b2GetWorld(shapeId.world0);\n  const shape = b2GetShape(world, shapeId);\n  const transform = b2GetOwnerTransform(world, shape);\n  const localPoint = b2InvTransformPoint(transform, point);\n  switch (shape.type) {\n    case b2ShapeType.b2_capsuleShape:\n      return b2PointInCapsule(localPoint, shape.capsule);\n    case b2ShapeType.b2_circleShape:\n      return b2PointInCircle(localPoint, shape.circle);\n    case b2ShapeType.b2_polygonShape:\n      return b2PointInPolygon(localPoint, shape.polygon);\n    default:\n      return false;\n  }\n}\nfunction b2Shape_RayCast(shapeId, origin, translation) {\n  const world = b2GetWorld(shapeId.world0);\n  const shape = b2GetShape(world, shapeId);\n  const transform = b2GetOwnerTransform(world, shape);\n  const input = new b2RayCastInput();\n  input.maxFraction = 1;\n  input.origin = b2InvTransformPoint(transform, origin);\n  input.translation = b2InvRotateVector(transform.q, translation);\n  let output = new b2CastOutput(rayNormal3, rayPoint3);\n  switch (shape.type) {\n    case b2ShapeType.b2_capsuleShape:\n      output = b2RayCastCapsule(input, shape.capsule);\n      break;\n    case b2ShapeType.b2_circleShape:\n      output = b2RayCastCircle(input, shape.circle);\n      break;\n    case b2ShapeType.b2_segmentShape:\n      output = b2RayCastSegment(input, shape.segment, false);\n      break;\n    case b2ShapeType.b2_polygonShape:\n      output = b2RayCastPolygon(input, shape.polygon);\n      break;\n    case b2ShapeType.b2_chainSegmentShape:\n      output = b2RayCastSegment(input, shape.chainSegment.segment, true);\n      break;\n    default:\n      return output;\n  }\n  if (output.hit) {\n    output.normal = b2RotateVector(transform.q, output.normal);\n    output.point = b2TransformPoint(transform, output.point);\n  }\n  return output;\n}\nfunction b2Shape_SetDensity(shapeId, density) {\n  const world = b2GetWorldLocked(shapeId.world0);\n  if (world == null) {\n    return;\n  }\n  const shape = b2GetShape(world, shapeId);\n  if (density == shape.density) {\n    return;\n  }\n  shape.density = density;\n}\nfunction b2Shape_GetDensity(shapeId) {\n  const world = b2GetWorld(shapeId.world0);\n  const shape = b2GetShape(world, shapeId);\n  return shape.density;\n}\nfunction b2Shape_SetFriction(shapeId, friction) {\n  const world = b2GetWorld(shapeId.world0);\n  if (world.locked) {\n    return;\n  }\n  const shape = b2GetShape(world, shapeId);\n  shape.friction = friction;\n}\nfunction b2Shape_GetFriction(shapeId) {\n  const world = b2GetWorld(shapeId.world0);\n  const shape = b2GetShape(world, shapeId);\n  return shape.friction;\n}\nfunction b2Shape_SetRestitution(shapeId, restitution) {\n  const world = b2GetWorld(shapeId.world0);\n  if (world.locked) {\n    return;\n  }\n  const shape = b2GetShape(world, shapeId);\n  shape.restitution = restitution;\n}\nfunction b2Shape_GetRestitution(shapeId) {\n  const world = b2GetWorld(shapeId.world0);\n  const shape = b2GetShape(world, shapeId);\n  return shape.restitution;\n}\nfunction b2Shape_GetFilter(shapeId) {\n  const world = b2GetWorld(shapeId.world0);\n  const shape = b2GetShape(world, shapeId);\n  return shape.filter;\n}\nfunction b2ResetProxy(world, shape, wakeBodies, destroyProxy) {\n  const body = b2GetBody(world, shape.bodyId);\n  const shapeId = shape.id;\n  let contactKey = body.headContactKey;\n  while (contactKey !== B2_NULL_INDEX) {\n    const contactId = contactKey >> 1;\n    const edgeIndex = contactKey & 1;\n    const contact = world.contactArray[contactId];\n    contactKey = contact.edges[edgeIndex].nextKey;\n    if (contact.shapeIdA === shapeId || contact.shapeIdB === shapeId) {\n      b2DestroyContact(world, contact, wakeBodies);\n    }\n  }\n  const transform = b2GetBodyTransformQuick(world, body);\n  if (shape.proxyKey !== B2_NULL_INDEX) {\n    const proxyType = B2_PROXY_TYPE(shape.proxyKey);\n    b2UpdateShapeAABBs(shape, transform, proxyType);\n    if (destroyProxy) {\n      b2BroadPhase_DestroyProxy(world.broadPhase, shape.proxyKey);\n      const forcePairCreation = true;\n      shape.proxyKey = b2BroadPhase_CreateProxy(\n        world.broadPhase,\n        proxyType,\n        shape.fatAABB,\n        shape.filter.categoryBits,\n        shapeId,\n        forcePairCreation\n      );\n    } else {\n      b2BroadPhase_MoveProxy(world.broadPhase, shape.proxyKey, shape.fatAABB);\n    }\n  } else {\n    const proxyType = body.type;\n    b2UpdateShapeAABBs(shape, transform, proxyType);\n  }\n  b2ValidateSolverSets(world);\n}\nfunction b2Shape_SetFilter(shapeId, filter) {\n  const world = b2GetWorldLocked(shapeId.world0);\n  if (world === null) {\n    return;\n  }\n  const shape = b2GetShape(world, shapeId);\n  if (filter.maskBits === shape.filter.maskBits && filter.categoryBits === shape.filter.categoryBits && filter.groupIndex === shape.filter.groupIndex) {\n    return;\n  }\n  const destroyProxy = filter.categoryBits === shape.filter.categoryBits;\n  shape.filter = filter;\n  const wakeBodies = true;\n  b2ResetProxy(world, shape, wakeBodies, destroyProxy);\n}\nfunction b2Shape_EnableSensorEvents(shapeId, flag) {\n  const world = b2GetWorldLocked(shapeId.world0);\n  if (world === null) {\n    return;\n  }\n  const shape = b2GetShape(world, shapeId);\n  shape.enableSensorEvents = flag;\n}\nfunction b2Shape_AreSensorEventsEnabled(shapeId) {\n  const world = b2GetWorld(shapeId.world0);\n  const shape = b2GetShape(world, shapeId);\n  return shape.enableSensorEvents;\n}\nfunction b2Shape_EnableContactEvents(shapeId, flag) {\n  const world = b2GetWorldLocked(shapeId.world0);\n  if (world === null) {\n    return;\n  }\n  const shape = b2GetShape(world, shapeId);\n  shape.enableContactEvents = flag;\n}\nfunction b2Shape_AreContactEventsEnabled(shapeId) {\n  const world = b2GetWorld(shapeId.world0);\n  const shape = b2GetShape(world, shapeId);\n  return shape.enableContactEvents;\n}\nfunction b2Shape_EnablePreSolveEvents(shapeId, flag) {\n  const world = b2GetWorldLocked(shapeId.world0);\n  if (world === null) {\n    return;\n  }\n  const shape = b2GetShape(world, shapeId);\n  shape.enablePreSolveEvents = flag;\n}\nfunction b2Shape_ArePreSolveEventsEnabled(shapeId) {\n  const world = b2GetWorld(shapeId.world0);\n  const shape = b2GetShape(world, shapeId);\n  return shape.enablePreSolveEvents;\n}\nfunction b2Shape_EnableHitEvents(shapeId, flag) {\n  const world = b2GetWorldLocked(shapeId.world0);\n  if (world === null) {\n    return;\n  }\n  const shape = b2GetShape(world, shapeId);\n  shape.enableHitEvents = flag;\n}\nfunction b2Shape_AreHitEventsEnabled(shapeId) {\n  const world = b2GetWorld(shapeId.world0);\n  const shape = b2GetShape(world, shapeId);\n  return shape.enableHitEvents;\n}\nfunction b2Shape_GetType(shapeId) {\n  const world = b2GetWorld(shapeId.world0);\n  const shape = b2GetShape(world, shapeId);\n  return shape.type;\n}\nfunction b2Shape_GetCircle(shapeId) {\n  const world = b2GetWorld(shapeId.world0);\n  const shape = b2GetShape(world, shapeId);\n  return shape.circle;\n}\nfunction b2Shape_GetSegment(shapeId) {\n  const world = b2GetWorld(shapeId.world0);\n  const shape = b2GetShape(world, shapeId);\n  return shape.segment;\n}\nfunction b2Shape_GetChainSegment(shapeId) {\n  const world = b2GetWorld(shapeId.world0);\n  const shape = b2GetShape(world, shapeId);\n  return shape.chainSegment;\n}\nfunction b2Shape_GetCapsule(shapeId) {\n  const world = b2GetWorld(shapeId.world0);\n  const shape = b2GetShape(world, shapeId);\n  return shape.capsule;\n}\nfunction b2Shape_GetPolygon(shapeId) {\n  const world = b2GetWorld(shapeId.world0);\n  const shape = b2GetShape(world, shapeId);\n  return shape.polygon;\n}\nfunction b2Shape_SetCircle(shapeId, circle) {\n  const world = b2GetWorldLocked(shapeId.world0);\n  if (world === null) {\n    return;\n  }\n  const shape = b2GetShape(world, shapeId);\n  shape.circle = circle;\n  shape.type = b2ShapeType.b2_circleShape;\n  const wakeBodies = true;\n  const destroyProxy = true;\n  b2ResetProxy(world, shape, wakeBodies, destroyProxy);\n}\nfunction b2Shape_SetCapsule(shapeId, capsule) {\n  const world = b2GetWorldLocked(shapeId.world0);\n  if (world === null) {\n    return;\n  }\n  const shape = b2GetShape(world, shapeId);\n  shape.capsule = capsule;\n  shape.type = b2ShapeType.b2_capsuleShape;\n  const wakeBodies = true;\n  const destroyProxy = true;\n  b2ResetProxy(world, shape, wakeBodies, destroyProxy);\n}\nfunction b2Shape_SetSegment(shapeId, segment) {\n  const world = b2GetWorldLocked(shapeId.world0);\n  if (world === null) {\n    return;\n  }\n  const shape = b2GetShape(world, shapeId);\n  shape.segment = segment;\n  shape.type = b2ShapeType.b2_segmentShape;\n  const wakeBodies = true;\n  const destroyProxy = true;\n  b2ResetProxy(world, shape, wakeBodies, destroyProxy);\n}\nfunction b2Shape_SetPolygon(shapeId, polygon) {\n  const world = b2GetWorldLocked(shapeId.world0);\n  if (world === null) {\n    return;\n  }\n  const shape = b2GetShape(world, shapeId);\n  shape.polygon = polygon;\n  shape.type = b2ShapeType.b2_polygonShape;\n  const wakeBodies = true;\n  const destroyProxy = true;\n  b2ResetProxy(world, shape, wakeBodies, destroyProxy);\n}\nfunction b2Shape_GetParentChain(shapeId) {\n  const world = b2GetWorld(shapeId.world0);\n  const shape = b2GetShape(world, shapeId);\n  if (shape.type === b2ShapeType.b2_chainSegmentShape) {\n    const chainId = shape.chainSegment.chainId;\n    if (chainId !== B2_NULL_INDEX) {\n      const chain = world.chainArray[chainId];\n      return new b2ChainId(chainId + 1, shapeId.world0, chain.revision);\n    }\n  }\n  return new b2ChainId();\n}\nfunction b2Chain_SetFriction(chainId, friction) {\n  const world = b2GetWorldLocked(chainId.world0);\n  if (world === null) {\n    return;\n  }\n  const chainShape = b2GetChainShape(world, chainId);\n  const count = chainShape.count;\n  for (let i = 0; i < count; ++i) {\n    const shapeId = chainShape.shapeIndices[i];\n    const shape = world.shapeArray[shapeId];\n    shape.friction = friction;\n  }\n}\nfunction b2Chain_SetRestitution(chainId, restitution) {\n  const world = b2GetWorldLocked(chainId.world0);\n  if (world === null) {\n    return;\n  }\n  const chainShape = b2GetChainShape(world, chainId);\n  const count = chainShape.count;\n  for (let i = 0; i < count; ++i) {\n    const shapeId = chainShape.shapeIndices[i];\n    const shape = world.shapeArray[shapeId];\n    shape.restitution = restitution;\n  }\n}\nfunction b2Shape_GetContactCapacity(shapeId) {\n  const world = b2GetWorldLocked(shapeId.world0);\n  if (world === null) {\n    return 0;\n  }\n  const shape = b2GetShape(world, shapeId);\n  if (shape.isSensor) {\n    return 0;\n  }\n  const body = b2GetBody(world, shape.bodyId);\n  return body.contactCount;\n}\nfunction b2Shape_GetContactData(shapeId, contactData, capacity) {\n  const world = b2GetWorldLocked(shapeId.world0);\n  if (world === null) {\n    return 0;\n  }\n  const shape = b2GetShape(world, shapeId);\n  if (shape.isSensor) {\n    return 0;\n  }\n  const body = b2GetBody(world, shape.bodyId);\n  let contactKey = body.headContactKey;\n  let index = 0;\n  while (contactKey !== B2_NULL_INDEX && index < capacity) {\n    const contactId = contactKey >> 1;\n    const edgeIndex = contactKey & 1;\n    const contact = world.contactArray[contactId];\n    if ((contact.shapeIdA === shapeId.index1 - 1 || contact.shapeIdB === shapeId.index1 - 1) && (contact.flags & b2ContactFlags.b2_contactTouchingFlag) !== 0) {\n      const shapeA = world.shapeArray[contact.shapeIdA];\n      const shapeB = world.shapeArray[contact.shapeIdB];\n      contactData[index].shapeIdA = new b2ShapeId(shapeA.id + 1, shapeId.world0, shapeA.revision);\n      contactData[index].shapeIdB = new b2ShapeId(shapeB.id + 1, shapeId.world0, shapeB.revision);\n      const contactSim = b2GetContactSim(world, contact);\n      contactData[index].manifold = contactSim.manifold;\n      index += 1;\n    }\n    contactKey = contact.edges[edgeIndex].nextKey;\n  }\n  return index;\n}\nfunction b2Shape_GetAABB(shapeId) {\n  const world = b2GetWorld(shapeId.world0);\n  if (world === null) {\n    return new b2AABB();\n  }\n  const shape = b2GetShape(world, shapeId);\n  return shape.aabb;\n}\nfunction b2Shape_GetClosestPoint(shapeId, target) {\n  const world = b2GetWorld(shapeId.world0);\n  if (world === null) {\n    return new b2Vec2(0, 0);\n  }\n  const shape = b2GetShape(world, shapeId);\n  const body = b2GetBody(world, shape.bodyId);\n  const transform = b2GetBodyTransformQuick(world, body);\n  const input = new b2DistanceInput();\n  input.proxyA = b2MakeShapeDistanceProxy(shape);\n  input.proxyB = b2MakeProxy([target], 1, 0);\n  input.transformA = transform;\n  input.transformB = new b2Transform(new b2Vec2(0, 0), new b2Rot(1, 0));\n  input.useRadii = true;\n  const cache = new b2DistanceCache();\n  const output = b2ShapeDistance(cache, input, null, 0);\n  return output.pointA;\n}\n\n// src/include/shape_h.js\nvar b2Shape = class {\n  constructor() {\n    this.id = 0;\n    this.bodyId = 0;\n    this.prevShapeId = 0;\n    this.nextShapeId = 0;\n    this.type = b2ShapeType.e_unknown;\n    this.density = 0;\n    this.friction = 0;\n    this.restitution = 0;\n    this.aabb = new b2AABB();\n    this.fatAABB = new b2AABB();\n    this.localCentroid = new b2Vec2();\n    this.proxyKey = 0;\n    this.filter = new b2Filter();\n    this.userData = null;\n    this.customColor = 0;\n    this.capsule = new b2Capsule();\n    this.circle = new b2Circle();\n    this.polygon = new b2Polygon();\n    this.segment = new b2Segment();\n    this.chainSegment = new b2ChainSegment();\n    this.revision = 0;\n    this.isSensor = false;\n    this.enableSensorEvents = false;\n    this.enableContactEvents = false;\n    this.enableHitEvents = false;\n    this.enablePreSolveEvents = false;\n    this.enlargedAABB = false;\n    this.isFast = false;\n    this.imageNoDebug = false;\n    this.image = null;\n    this.imageScale = null;\n    this.imageOffset = null;\n    this.imageRect = null;\n  }\n};\nvar b2ChainShape = class {\n  constructor() {\n    this.id = 0;\n    this.bodyId = 0;\n    this.nextChainId = 0;\n    this.shapeIndices = [];\n    this.count = 0;\n    this.revision = 0;\n  }\n};\nvar b2ShapeExtent = class {\n  constructor() {\n    this.minExtent = 0;\n    this.maxExtent = 0;\n  }\n};\n\n// src/bitset_c.js\nvar b2_64bits = 8;\nfunction b2CreateBitSet(bitCapacity) {\n  const bitSet = new b2BitSet();\n  const cap = Math.floor((bitCapacity + b2_64bits * 8 - 1) / (b2_64bits * 8));\n  bitSet.blockCapacity = cap;\n  bitSet.blockCount = 0;\n  bitSet.bits = new BigUint64Array(bitSet.blockCapacity);\n  bitSet.bits.fill(0n);\n  return bitSet;\n}\nfunction b2DestroyBitSet(bitSet) {\n  bitSet.blockCapacity = 0;\n  bitSet.blockCount = 0;\n  bitSet.bits = null;\n}\nfunction b2SetBitCountAndClear(bitSet, bitCount) {\n  const blockCount = Math.floor((bitCount + b2_64bits * 8 - 1) / (b2_64bits * 8));\n  if (bitSet.blockCapacity < blockCount) {\n    b2DestroyBitSet(bitSet);\n    const newBitCapacity = bitCount + (bitCount >> 1);\n    bitSet = b2CreateBitSet(newBitCapacity);\n  }\n  bitSet.blockCount = blockCount;\n  bitSet.bits.fill(0n);\n  return bitSet;\n}\nfunction b2InPlaceUnion(setA, setB) {\n  const blockCount = setA.blockCount;\n  for (let i = 0; i < blockCount; ++i) {\n    setA.bits[i] |= setB.bits[i];\n  }\n}\n\n// src/include/bitset_h.js\nvar b2BitSet = class {\n  constructor() {\n    this.bits = null;\n    this.blockCapacity = 0;\n    this.blockCount = 0;\n  }\n};\nfunction b2SetBit(bitSet, bitIndex) {\n  const blockIndex = Math.floor(bitIndex / 64);\n  bitSet.bits[blockIndex] |= BigInt(1) << BigInt(bitIndex % 64);\n}\nfunction b2ClearBit(bitSet, bitIndex) {\n  const blockIndex = Math.floor(bitIndex / 64);\n  if (blockIndex >= bitSet.blockCount) {\n    return;\n  }\n  bitSet.bits[blockIndex] &= ~(BigInt(1) << BigInt(bitIndex % 64));\n}\nfunction b2GetBit(bitSet, bitIndex) {\n  const blockIndex = Math.floor(bitIndex / 64);\n  if (blockIndex >= bitSet.blockCount) {\n    return false;\n  }\n  return (bitSet.bits[blockIndex] & BigInt(1) << BigInt(bitIndex % 64)) !== BigInt(0);\n}\n\n// src/constraint_graph_c.js\nvar b2_overflowIndex = b2_graphColorCount - 1;\nvar b2GraphColor = class {\n  constructor() {\n    this.bodySet = new b2BitSet();\n    this.contacts = new b2ContactArray();\n    this.joints = new b2JointArray();\n    this.overflowConstraints = null;\n  }\n};\nvar b2ConstraintGraph = class {\n  constructor() {\n    this.colors = [];\n    for (let i = 0; i < b2_graphColorCount; i++) {\n      this.colors.push(new b2GraphColor());\n    }\n  }\n};\nfunction b2CreateGraph(graph, bodyCapacity) {\n  graph = new b2ConstraintGraph();\n  bodyCapacity = Math.max(bodyCapacity, 8);\n  for (let i = 0; i < b2_overflowIndex; i++) {\n    const color = graph.colors[i];\n    color.bodySet = b2CreateBitSet(bodyCapacity);\n    color.bodySet = b2SetBitCountAndClear(color.bodySet, bodyCapacity);\n  }\n  return graph;\n}\nfunction b2DestroyGraph(graph) {\n  for (let i = 0; i < b2_graphColorCount; i++) {\n    const color = graph.colors[i];\n    b2DestroyBitSet(color.bodySet);\n    color.bodySet = null;\n    color.contacts = null;\n    color.joints = null;\n  }\n}\nfunction b2AddContactToGraph(world, contactSim, contact) {\n  if (contactSim.manifold.pointCount <= 0) {\n    throw new Error(\"Assert failed: contactSim.manifold.pointCount > 0\");\n  }\n  if (!(contactSim.simFlags & b2ContactSimFlags.b2_simTouchingFlag)) {\n    throw new Error(\"Assert failed: contactSim.simFlags & b2_simTouchingFlag\");\n  }\n  if (!(contact.flags & b2ContactFlags.b2_contactTouchingFlag)) {\n    throw new Error(\"Assert failed: contact.flags & b2_contactTouchingFlag\");\n  }\n  const graph = world.constraintGraph;\n  const colorIndex = b2_overflowIndex;\n  const bodyIdA = contact.edges[0].bodyId;\n  const bodyIdB = contact.edges[1].bodyId;\n  b2CheckIndex(world.bodyArray, bodyIdA);\n  b2CheckIndex(world.bodyArray, bodyIdB);\n  const bodyA = world.bodyArray[bodyIdA];\n  const bodyB = world.bodyArray[bodyIdB];\n  const staticA = bodyA.setIndex == b2SetType.b2_staticSet;\n  const staticB = bodyB.setIndex == b2SetType.b2_staticSet;\n  if (staticA && staticB) {\n    throw new Error(\"Assert failed: staticA == false || staticB == false\");\n  }\n  const color = graph.colors[colorIndex];\n  contact.colorIndex = colorIndex;\n  contact.localIndex = color.contacts.count;\n  const newContact = b2AddContact(color.contacts);\n  newContact.set(contactSim);\n  if (staticA) {\n    newContact.bodySimIndexA = B2_NULL_INDEX;\n    newContact.invMassA = 0;\n    newContact.invIA = 0;\n  } else {\n    if (bodyA.setIndex !== b2SetType.b2_awakeSet) {\n      throw new Error(\"Assert failed: bodyA.setIndex == b2SetType.b2_awakeSet\");\n    }\n    const awakeSet = world.solverSetArray[b2SetType.b2_awakeSet];\n    const localIndex = bodyA.localIndex;\n    if (!(0 <= localIndex && localIndex < awakeSet.sims.count)) {\n      throw new Error(\"Assert failed: 0 <= localIndex && localIndex < awakeSet.sims.count\");\n    }\n    newContact.bodySimIndexA = localIndex;\n    const bodySimA = awakeSet.sims.data[localIndex];\n    newContact.invMassA = bodySimA.invMass;\n    newContact.invIA = bodySimA.invInertia;\n  }\n  if (staticB) {\n    newContact.bodySimIndexB = B2_NULL_INDEX;\n    newContact.invMassB = 0;\n    newContact.invIB = 0;\n  } else {\n    if (bodyB.setIndex !== b2SetType.b2_awakeSet) {\n      throw new Error(\"Assert failed: bodyB.setIndex == b2SetType.b2_awakeSet\");\n    }\n    const awakeSet = world.solverSetArray[b2SetType.b2_awakeSet];\n    const localIndex = bodyB.localIndex;\n    if (!(0 <= localIndex && localIndex < awakeSet.sims.count)) {\n      throw new Error(\"Assert failed: 0 <= localIndex && localIndex < awakeSet.sims.count\");\n    }\n    newContact.bodySimIndexB = localIndex;\n    const bodySimB = awakeSet.sims.data[localIndex];\n    newContact.invMassB = bodySimB.invMass;\n    newContact.invIB = bodySimB.invInertia;\n  }\n}\nfunction b2RemoveContactFromGraph(world, bodyIdA, bodyIdB, colorIndex, localIndex) {\n  const graph = world.constraintGraph;\n  if (colorIndex !== b2_overflowIndex) {\n    throw new Error(\"Assert failed: colorIndex == b2_overflowIndex\");\n  }\n  const color = graph.colors[colorIndex];\n  if (colorIndex != b2_overflowIndex) {\n    b2ClearBit(color.bodySet, bodyIdA);\n    b2ClearBit(color.bodySet, bodyIdB);\n  }\n  const movedIndex = b2RemoveContact(color.contacts, localIndex);\n  if (movedIndex !== B2_NULL_INDEX) {\n    const movedContactSim = color.contacts.data[localIndex];\n    const movedId = movedContactSim.contactId;\n    const movedContact = world.contactArray[movedId];\n    if (movedContact.setIndex !== b2SetType.b2_awakeSet) {\n      throw new Error(\"Assert failed: movedContact.setIndex == b2SetType.b2_awakeSet\");\n    }\n    if (movedContact.colorIndex !== colorIndex) {\n      throw new Error(\"Assert failed: movedContact.colorIndex == colorIndex\");\n    }\n    if (movedContact.localIndex !== movedIndex) {\n      throw new Error(\"Assert failed: movedContact.localIndex == movedIndex\");\n    }\n    movedContact.localIndex = localIndex;\n  }\n}\nfunction b2AssignJointColor(graph, bodyIdA, bodyIdB, staticA, staticB) {\n  return b2_overflowIndex;\n}\nfunction b2CreateJointInGraph(world, joint) {\n  const graph = world.constraintGraph;\n  const bodyIdA = joint.edges[0].bodyId;\n  const bodyIdB = joint.edges[1].bodyId;\n  const bodyA = world.bodyArray[bodyIdA];\n  const bodyB = world.bodyArray[bodyIdB];\n  const staticA = bodyA.setIndex === b2SetType.b2_staticSet;\n  const staticB = bodyB.setIndex === b2SetType.b2_staticSet;\n  if (staticA && staticB) {\n    throw new Error(\"Assert failed: staticA == false || staticB == false\");\n  }\n  const colorIndex = b2AssignJointColor(graph, bodyIdA, bodyIdB, staticA, staticB);\n  const jointSim = b2AddJoint(graph.colors[colorIndex].joints);\n  joint.colorIndex = colorIndex;\n  joint.localIndex = graph.colors[colorIndex].joints.count - 1;\n  return jointSim;\n}\nfunction b2AddJointToGraph(world, jointSim, joint) {\n  const jointDst = b2CreateJointInGraph(world, joint);\n  Object.assign(jointDst, jointSim);\n}\nfunction b2RemoveJointFromGraph(world, bodyIdA, bodyIdB, colorIndex, localIndex) {\n  const graph = world.constraintGraph;\n  const color = graph.colors[colorIndex];\n  if (colorIndex != b2_overflowIndex) {\n    b2ClearBit(color.bodySet, bodyIdA);\n    b2ClearBit(color.bodySet, bodyIdB);\n  }\n  const movedIndex = b2RemoveJoint(color.joints, localIndex);\n  if (movedIndex !== B2_NULL_INDEX) {\n    const movedJointSim = color.joints.data[localIndex];\n    const movedId = movedJointSim.jointId;\n    if (movedId != world.jointArray[movedId].jointId) {\n      throw new Error(\"Assert failed: movedId != jointId\");\n    }\n    const movedJoint = world.jointArray[movedId];\n    if (movedJoint.setIndex !== b2SetType.b2_awakeSet) {\n      throw new Error(\"Assert failed: movedJoint.setIndex == b2SetType.b2_awakeSet\");\n    }\n    if (movedJoint.colorIndex !== colorIndex) {\n      throw new Error(\"Assert failed: movedJoint.colorIndex == colorIndex\");\n    }\n    if (movedJoint.localIndex !== movedIndex) {\n      throw new Error(\"Assert failed: movedJoint.localIndex == movedIndex\");\n    }\n    movedJoint.localIndex = localIndex;\n  }\n}\n\n// src/contact_solver_c.js\nvar b2ContactConstraint = class {\n  constructor() {\n    this.indexA = 0;\n    this.indexB = 0;\n    this.normalX = 0;\n    this.normalY = 0;\n    this.friction = 0;\n    this.restitution = 0;\n    this.pointCount = 0;\n    this.softness = new b2Softness();\n    this.invMassA = 0;\n    this.invIA = 0;\n    this.invMassB = 0;\n    this.invIB = 0;\n    this.points = [];\n  }\n};\nvar b2ContactConstraintPoint = class {\n  constructor() {\n    this.normalImpulse = 0;\n    this.tangentImpulse = 0;\n    this.maxNormalImpulse = 0;\n    this.anchorAX = 0;\n    this.anchorAY = 0;\n    this.anchorBX = 0;\n    this.anchorBY = 0;\n    this.baseSeparation = 0;\n    this.normalMass = 0;\n    this.tangentMass = 0;\n    this.relativeVelocity = 0;\n  }\n};\nfunction b2PrepareOverflowContacts(context) {\n  const world = context.world;\n  const graph = context.graph;\n  const color = graph.colors[b2_overflowIndex];\n  const constraints = color.overflowConstraints;\n  const contactCount = color.contacts.count;\n  const contacts = color.contacts.data;\n  const awakeStates = context.states;\n  const contactSoftness = context.contactSoftness;\n  const staticSoftness = context.staticSoftness;\n  const warmStartScale = world.enableWarmStarting ? 1 : 0;\n  for (let i = 0; i < contactCount; ++i) {\n    const contactSim = contacts[i];\n    const manifold = contactSim.manifold;\n    const pointCount = manifold.pointCount;\n    const indexA = contactSim.bodySimIndexA;\n    const indexB = contactSim.bodySimIndexB;\n    const constraint = constraints[i];\n    constraint.indexA = indexA;\n    constraint.indexB = indexB;\n    constraint.normalX = manifold.normalX;\n    constraint.normalY = manifold.normalY;\n    constraint.friction = contactSim.friction;\n    constraint.restitution = contactSim.restitution;\n    constraint.pointCount = pointCount;\n    let vAX = 0;\n    let vAY = 0;\n    let wA = 0;\n    const mA = contactSim.invMassA;\n    const iA = contactSim.invIA;\n    if (indexA !== B2_NULL_INDEX) {\n      const stateA = awakeStates[indexA];\n      vAX = stateA.linearVelocity.x;\n      vAY = stateA.linearVelocity.y;\n      wA = stateA.angularVelocity;\n    }\n    let vBX = 0;\n    let vBY = 0;\n    let wB = 0;\n    const mB = contactSim.invMassB;\n    const iB = contactSim.invIB;\n    if (indexB !== B2_NULL_INDEX) {\n      const stateB = awakeStates[indexB];\n      vBX = stateB.linearVelocity.x;\n      vBY = stateB.linearVelocity.y;\n      wB = stateB.angularVelocity;\n    }\n    constraint.softness = indexA === B2_NULL_INDEX || indexB === B2_NULL_INDEX ? staticSoftness : contactSoftness;\n    constraint.invMassA = mA;\n    constraint.invIA = iA;\n    constraint.invMassB = mB;\n    constraint.invIB = iB;\n    const normalX = constraint.normalX;\n    const normalY = constraint.normalY;\n    const tangentX = constraint.normalY;\n    const tangentY = -constraint.normalX;\n    for (let j = 0; j < pointCount; ++j) {\n      const mp = manifold.points[j];\n      const cp = constraint.points[j] = new b2ContactConstraintPoint();\n      cp.normalImpulse = warmStartScale * mp.normalImpulse;\n      cp.tangentImpulse = warmStartScale * mp.tangentImpulse;\n      cp.maxNormalImpulse = 0;\n      const rAX = mp.anchorAX;\n      const rAY = mp.anchorAY;\n      const rBX = mp.anchorBX;\n      const rBY = mp.anchorBY;\n      cp.anchorAX = rAX;\n      cp.anchorAY = rAY;\n      cp.anchorBX = rBX;\n      cp.anchorBY = rBY;\n      const subX = rBX - rAX;\n      const subY = rBY - rAY;\n      cp.baseSeparation = mp.separation - (subX * normalX + subY * normalY);\n      const rnA = rAX * normalY - rAY * normalX;\n      const rnB = rBX * normalY - rBY * normalX;\n      const kNormal = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\n      cp.normalMass = kNormal > 0 ? 1 / kNormal : 0;\n      const rtA = rAX * tangentY - rAY * tangentX;\n      const rtB = rBX * tangentY - rBY * tangentX;\n      const kTangent = mA + mB + iA * rtA * rtA + iB * rtB * rtB;\n      cp.tangentMass = kTangent > 0 ? 1 / kTangent : 0;\n      const vrAX = vAX + -wA * rAY;\n      const vrAY = vAY + wA * rAX;\n      const vrBX = vBX + -wB * rBY;\n      const vrBY = vBY + wB * rBX;\n      cp.relativeVelocity = normalX * (vrBX - vrAX) + normalY * (vrBY - vrAY);\n    }\n  }\n}\nfunction b2WarmStartOverflowContacts(context) {\n  const graph = context.graph;\n  const color = graph.colors[b2_overflowIndex];\n  const constraints = color.overflowConstraints;\n  const contactCount = color.contacts.count;\n  const awakeSet = context.world.solverSetArray[b2SetType.b2_awakeSet];\n  const states = awakeSet.states.data;\n  const dummyState = new b2BodyState();\n  for (let i = 0; i < contactCount; ++i) {\n    const constraint = constraints[i];\n    const indexA = constraint.indexA;\n    const indexB = constraint.indexB;\n    const stateA = indexA === B2_NULL_INDEX ? dummyState : states[indexA];\n    const stateB = indexB === B2_NULL_INDEX ? dummyState : states[indexB];\n    const vA = stateA.linearVelocity;\n    let wA = stateA.angularVelocity;\n    const vB = stateB.linearVelocity;\n    let wB = stateB.angularVelocity;\n    const mA = constraint.invMassA;\n    const iA = constraint.invIA;\n    const mB = constraint.invMassB;\n    const iB = constraint.invIB;\n    const normalX = constraint.normalX;\n    const normalY = constraint.normalY;\n    const tangentx = constraint.normalY;\n    const tangenty = -constraint.normalX;\n    const pointCount = constraint.pointCount;\n    for (let j = 0; j < pointCount; ++j) {\n      const cp = constraint.points[j];\n      const rAX = cp.anchorAX;\n      const rAY = cp.anchorAY;\n      const rBX = cp.anchorBX;\n      const rBY = cp.anchorBY;\n      const Px = cp.normalImpulse * normalX + cp.tangentImpulse * tangentx;\n      const Py = cp.normalImpulse * normalY + cp.tangentImpulse * tangenty;\n      wA -= iA * (rAX * Py - rAY * Px);\n      vA.x -= mA * Px;\n      vA.y -= mA * Py;\n      wB += iB * (rBX * Py - rBY * Px);\n      vB.x += mB * Px;\n      vB.y += mB * Py;\n    }\n    stateA.linearVelocity = vA;\n    stateA.angularVelocity = wA;\n    stateB.linearVelocity = vB;\n    stateB.angularVelocity = wB;\n  }\n}\nfunction b2SolveOverflowContacts(context, useBias) {\n  const graph = context.graph;\n  const color = graph.colors[b2_overflowIndex];\n  const constraints = color.overflowConstraints;\n  const contactCount = color.contacts.count;\n  const awakeSet = context.world.solverSetArray[b2SetType.b2_awakeSet];\n  const states = awakeSet.states;\n  const inv_h = context.inv_h;\n  const pushout = context.world.contactPushoutVelocity;\n  const dummyState = new b2BodyState();\n  for (let i = 0; i < contactCount; ++i) {\n    const constraint = constraints[i];\n    const mA = constraint.invMassA;\n    const iA = constraint.invIA;\n    const mB = constraint.invMassB;\n    const iB = constraint.invIB;\n    const stateA = constraint.indexA === B2_NULL_INDEX ? dummyState : states.data[constraint.indexA];\n    let vAX = stateA.linearVelocity.x;\n    let vAY = stateA.linearVelocity.y;\n    let wA = stateA.angularVelocity;\n    const dqA = stateA.deltaRotation;\n    const stateB = constraint.indexB === B2_NULL_INDEX ? dummyState : states.data[constraint.indexB];\n    let vBX = stateB.linearVelocity.x;\n    let vBY = stateB.linearVelocity.y;\n    let wB = stateB.angularVelocity;\n    const dqB = stateB.deltaRotation;\n    const dpx = stateB.deltaPosition.x - stateA.deltaPosition.x;\n    const dpy = stateB.deltaPosition.y - stateA.deltaPosition.y;\n    const normalX = constraint.normalX;\n    const normalY = constraint.normalY;\n    const tangentx = normalY;\n    const tangenty = -normalX;\n    const friction = constraint.friction;\n    const softness = constraint.softness;\n    const pointCount = constraint.pointCount;\n    for (let j = 0; j < pointCount; ++j) {\n      const cp = constraint.points[j];\n      const rx = dqB.c * cp.anchorBX - dqB.s * cp.anchorBY - (dqA.c * cp.anchorAX - dqA.s * cp.anchorAY);\n      const ry = dqB.s * cp.anchorBX + dqB.c * cp.anchorBY - (dqA.s * cp.anchorAX + dqA.c * cp.anchorAY);\n      const s = (dpx + rx) * normalX + (dpy + ry) * normalY + cp.baseSeparation;\n      let velocityBias = 0;\n      let massScale = 1;\n      let impulseScale = 0;\n      if (s > 0) {\n        velocityBias = s * inv_h;\n      } else if (useBias) {\n        velocityBias = Math.max(softness.biasRate * s, -pushout);\n        massScale = softness.massScale;\n        impulseScale = softness.impulseScale;\n      }\n      const rAX = cp.anchorAX;\n      const rAY = cp.anchorAY;\n      const rBX = cp.anchorBX;\n      const rBY = cp.anchorBY;\n      const vn = (vBX - vAX + wB * -rBY - wA * -rAY) * normalX + (vBY - vAY + wB * rBX - wA * rAX) * normalY;\n      let impulse = -cp.normalMass * massScale * (vn + velocityBias) - impulseScale * cp.normalImpulse;\n      const newImpulse = Math.max(cp.normalImpulse + impulse, 0);\n      impulse = newImpulse - cp.normalImpulse;\n      cp.normalImpulse = newImpulse;\n      cp.maxNormalImpulse = Math.max(cp.maxNormalImpulse, impulse);\n      const Px = impulse * normalX;\n      const Py = impulse * normalY;\n      vAX -= mA * Px;\n      vAY -= mA * Py;\n      wA -= iA * (rAX * Py - rAY * Px);\n      vBX += mB * Px;\n      vBY += mB * Py;\n      wB += iB * (rBX * Py - rBY * Px);\n    }\n    for (let j = 0; j < pointCount; ++j) {\n      const cp = constraint.points[j];\n      const rAX = cp.anchorAX;\n      const rAY = cp.anchorAY;\n      const rBX = cp.anchorBX;\n      const rBY = cp.anchorBY;\n      const vtx = vBX - wB * rBY - (vAX - wA * rAY);\n      const vty = vBY + wB * rBX - (vAY + wA * rAX);\n      const vt = vtx * tangentx + vty * tangenty;\n      let impulse = cp.tangentMass * -vt;\n      const maxFriction = friction * cp.normalImpulse;\n      const oldTangentImpulse = cp.tangentImpulse;\n      cp.tangentImpulse = oldTangentImpulse + impulse;\n      cp.tangentImpulse = cp.tangentImpulse < -maxFriction ? -maxFriction : cp.tangentImpulse > maxFriction ? maxFriction : cp.tangentImpulse;\n      impulse = cp.tangentImpulse - oldTangentImpulse;\n      const Px = impulse * tangentx;\n      const Py = impulse * tangenty;\n      vAX -= mA * Px;\n      vAY -= mA * Py;\n      wA -= iA * (rAX * Py - rAY * Px);\n      vBX += mB * Px;\n      vBY += mB * Py;\n      wB += iB * (rBX * Py - rBY * Px);\n    }\n    stateA.linearVelocity.x = vAX;\n    stateA.linearVelocity.y = vAY;\n    stateA.angularVelocity = wA;\n    stateB.linearVelocity.x = vBX;\n    stateB.linearVelocity.y = vBY;\n    stateB.angularVelocity = wB;\n  }\n}\nfunction b2ApplyOverflowRestitution(context) {\n  const graph = context.graph;\n  const color = graph.colors[b2_overflowIndex];\n  const constraints = color.overflowConstraints;\n  const contactCount = color.contacts.count;\n  const awakeSet = context.world.solverSetArray[b2SetType.b2_awakeSet];\n  const states = awakeSet.states;\n  const threshold = context.world.restitutionThreshold;\n  const dummyState = new b2BodyState();\n  for (let i = 0; i < contactCount; ++i) {\n    const constraint = constraints[i];\n    const restitution = constraint.restitution;\n    if (restitution === 0) {\n      continue;\n    }\n    const mA = constraint.invMassA;\n    const iA = constraint.invIA;\n    const mB = constraint.invMassB;\n    const iB = constraint.invIB;\n    const stateA = constraint.indexA === B2_NULL_INDEX ? dummyState : states.data[constraint.indexA];\n    const vA = stateA.linearVelocity;\n    let wA = stateA.angularVelocity;\n    const stateB = constraint.indexB === B2_NULL_INDEX ? dummyState : states.data[constraint.indexB];\n    const vB = stateB.linearVelocity;\n    let wB = stateB.angularVelocity;\n    const normalX = constraint.normalX;\n    const normalY = constraint.normalY;\n    const pointCount = constraint.pointCount;\n    for (let j = 0; j < pointCount; ++j) {\n      const cp = constraint.points[j];\n      if (cp.relativeVelocity > -threshold || cp.maxNormalImpulse === 0) {\n        continue;\n      }\n      const rAX = cp.anchorAX;\n      const rAY = cp.anchorAY;\n      const rBX = cp.anchorBX;\n      const rBY = cp.anchorBY;\n      const vrBX = vB.x + -wB * rBY;\n      const vrBY = vB.y + wB * rBX;\n      const vrAX = vA.x + -wA * rAY;\n      const vrAY = vA.y + wA * rAX;\n      const subX = vrBX - vrAX;\n      const subY = vrBY - vrAY;\n      const vn = subX * normalX + subY * normalY;\n      let impulse = -cp.normalMass * (vn + restitution * cp.relativeVelocity);\n      const newImpulse = Math.max(cp.normalImpulse + impulse, 0);\n      impulse = newImpulse - cp.normalImpulse;\n      cp.normalImpulse = newImpulse;\n      cp.maxNormalImpulse = Math.max(cp.maxNormalImpulse, impulse);\n      const PX = impulse * normalX;\n      const PY = impulse * normalY;\n      vA.x -= mA * PX;\n      vA.y -= mA * PY;\n      wA -= iA * (rAX * PY - rAY * PX);\n      vB.x += mB * PX;\n      vB.y += mB * PY;\n      wB += iB * (rBX * PY - rBY * PX);\n    }\n    stateA.angularVelocity = wA;\n    stateB.angularVelocity = wB;\n  }\n}\nfunction b2StoreOverflowImpulses(context) {\n  const graph = context.graph;\n  const color = graph.colors[b2_overflowIndex];\n  const constraints = color.overflowConstraints;\n  const contacts = color.contacts;\n  const contactCount = color.contacts.count;\n  for (let i = 0; i < contactCount; ++i) {\n    const constraint = constraints[i];\n    const contact = contacts.data[i];\n    const manifold = contact.manifold;\n    const pointCount = manifold.pointCount;\n    for (let j = 0; j < pointCount; ++j) {\n      manifold.points[j].normalImpulse = constraint.points[j].normalImpulse;\n      manifold.points[j].tangentImpulse = constraint.points[j].tangentImpulse;\n      manifold.points[j].maxNormalImpulse = constraint.points[j].maxNormalImpulse;\n      manifold.points[j].normalVelocity = constraint.points[j].relativeVelocity;\n    }\n  }\n}\n\n// src/aabb_c.js\nfunction b2Perimeter(a) {\n  const wx = a.upperBoundX - a.lowerBoundX;\n  const wy = a.upperBoundY - a.lowerBoundY;\n  return 2 * (wx + wy);\n}\nfunction b2EnlargeAABB(a, b) {\n  let changed = false;\n  if (b.lowerBoundX < a.lowerBoundX) {\n    a.lowerBoundX = b.lowerBoundX;\n    changed = true;\n  }\n  if (b.lowerBoundY < a.lowerBoundY) {\n    a.lowerBoundY = b.lowerBoundY;\n    changed = true;\n  }\n  if (a.upperBoundX < b.upperBoundX) {\n    a.upperBoundX = b.upperBoundX;\n    changed = true;\n  }\n  if (a.upperBoundY < b.upperBoundY) {\n    a.upperBoundY = b.upperBoundY;\n    changed = true;\n  }\n  return changed;\n}\nfunction b2AABB_Overlaps(a, b) {\n  return !(a.lowerBoundX >= b.upperBoundX || a.upperBoundX <= b.lowerBoundX || a.lowerBoundY >= b.upperBoundY || a.upperBoundY <= b.lowerBoundY);\n}\n\n// src/dynamic_tree_c.js\nvar B2_TREE_STACK_SIZE = 1024;\nfunction b2IsLeaf(node) {\n  return node.height === 0;\n}\nfunction b2DynamicTree_Create() {\n  const tree = new b2DynamicTree();\n  tree.root = B2_NULL_INDEX;\n  tree.nodeCapacity = 16;\n  tree.nodeCount = 0;\n  tree.nodes = Array.from({ length: tree.nodeCapacity }, () => new b2TreeNode());\n  for (let i = 0; i < tree.nodeCapacity - 1; ++i) {\n    tree.nodes[i].parent_next = i + 1;\n    tree.nodes[i].height = -1;\n  }\n  tree.nodes[tree.nodeCapacity - 1].parent_next = B2_NULL_INDEX;\n  tree.nodes[tree.nodeCapacity - 1].height = -1;\n  tree.freeList = 0;\n  tree.proxyCount = 0;\n  tree.leafIndices = null;\n  tree.leafCenters = null;\n  tree.rebuildCapacity = 0;\n  return tree;\n}\nfunction b2DynamicTree_Destroy(tree) {\n  tree.nodes = null;\n  tree.leafIndices = null;\n  tree.leafCenters = null;\n}\nfunction b2AllocateNode(tree) {\n  if (tree.freeList === B2_NULL_INDEX) {\n    const oldNodes = tree.nodes;\n    tree.nodeCapacity += tree.nodeCapacity >> 1;\n    tree.nodes = Array.from({ length: tree.nodeCapacity }, () => new b2TreeNode());\n    tree.nodes = Array.from({ length: tree.nodeCapacity }, (_, i) => {\n      if (i < oldNodes.length) {\n        return oldNodes[i];\n      } else {\n        return new b2TreeNode();\n      }\n    });\n    for (let i = tree.nodeCount; i < tree.nodeCapacity - 1; ++i) {\n      tree.nodes[i].parent_next = i + 1;\n      tree.nodes[i].height = -1;\n    }\n    tree.nodes[tree.nodeCapacity - 1].parent_next = B2_NULL_INDEX;\n    tree.nodes[tree.nodeCapacity - 1].height = -1;\n    tree.freeList = tree.nodeCount;\n  }\n  const nodeIndex = tree.freeList;\n  const node = tree.nodes[nodeIndex];\n  tree.freeList = node.parent_next;\n  tree.nodes[nodeIndex] = new b2TreeNode();\n  ++tree.nodeCount;\n  return nodeIndex;\n}\nfunction b2FreeNode(tree, nodeId) {\n  tree.nodes[nodeId].parent_next = tree.freeList;\n  tree.nodes[nodeId].height = -1;\n  tree.freeList = nodeId;\n  --tree.nodeCount;\n}\nfunction b2FindBestSibling(tree, boxD) {\n  const centerD = b2AABB_Center(boxD);\n  const areaD = b2Perimeter(boxD);\n  const nodes = tree.nodes;\n  const rootIndex = tree.root;\n  const rootBox = nodes[rootIndex].aabb;\n  let areaBase = b2Perimeter(rootBox);\n  let directCost = b2Perimeter(b2AABB_Union(rootBox, boxD));\n  let inheritedCost = 0;\n  let bestSibling = rootIndex;\n  let bestCost = directCost;\n  let index = rootIndex;\n  while (nodes[index].height > 0) {\n    const child1 = nodes[index].child1;\n    const child2 = nodes[index].child2;\n    const cost = directCost + inheritedCost;\n    if (cost < bestCost) {\n      bestSibling = index;\n      bestCost = cost;\n    }\n    inheritedCost += directCost - areaBase;\n    const leaf1 = nodes[child1].height === 0;\n    const leaf2 = nodes[child2].height === 0;\n    let lowerCost1 = Number.MAX_VALUE;\n    const box1 = nodes[child1].aabb;\n    const directCost1 = b2Perimeter(b2AABB_Union(box1, boxD));\n    let area1 = 0;\n    if (leaf1) {\n      const cost1 = directCost1 + inheritedCost;\n      if (cost1 < bestCost) {\n        bestSibling = child1;\n        bestCost = cost1;\n      }\n    } else {\n      area1 = b2Perimeter(box1);\n      lowerCost1 = inheritedCost + directCost1 + Math.min(areaD - area1, 0);\n    }\n    let lowerCost2 = Number.MAX_VALUE;\n    const box2 = nodes[child2].aabb;\n    const directCost2 = b2Perimeter(b2AABB_Union(box2, boxD));\n    let area2 = 0;\n    if (leaf2) {\n      const cost2 = directCost2 + inheritedCost;\n      if (cost2 < bestCost) {\n        bestSibling = child2;\n        bestCost = cost2;\n      }\n    } else {\n      area2 = b2Perimeter(box2);\n      lowerCost2 = inheritedCost + directCost2 + Math.min(areaD - area2, 0);\n    }\n    if (leaf1 && leaf2) {\n      break;\n    }\n    if (bestCost <= lowerCost1 && bestCost <= lowerCost2) {\n      break;\n    }\n    if (lowerCost1 === lowerCost2 && !leaf1) {\n      const d1 = b2Sub(b2AABB_Center(box1), centerD);\n      const d2 = b2Sub(b2AABB_Center(box2), centerD);\n      lowerCost1 = b2LengthSquared(d1);\n      lowerCost2 = b2LengthSquared(d2);\n    }\n    if (lowerCost1 < lowerCost2 && !leaf1) {\n      index = child1;\n      areaBase = area1;\n      directCost = directCost1;\n    } else {\n      index = child2;\n      areaBase = area2;\n      directCost = directCost2;\n    }\n  }\n  return bestSibling;\n}\nvar b2RotateType = {\n  b2_rotateNone: 0,\n  b2_rotateBF: 1,\n  b2_rotateBG: 2,\n  b2_rotateCD: 3,\n  b2_rotateCE: 4\n};\nfunction b2RotateNodes(tree, iA) {\n  const nodes = tree.nodes;\n  const A = nodes[iA];\n  if (A.height < 2) {\n    return;\n  }\n  const iB = A.child1;\n  const iC = A.child2;\n  const B = nodes[iB];\n  const C = nodes[iC];\n  if (B.height === 0) {\n    const iF = C.child1;\n    const iG = C.child2;\n    const F = nodes[iF];\n    const G = nodes[iG];\n    const costBase = b2Perimeter(C.aabb);\n    const aabbBG = b2AABB_Union(B.aabb, G.aabb);\n    const costBF = b2Perimeter(aabbBG);\n    const aabbBF = b2AABB_Union(B.aabb, F.aabb);\n    const costBG = b2Perimeter(aabbBF);\n    if (costBase < costBF && costBase < costBG) {\n      return;\n    }\n    if (costBF < costBG) {\n      A.child1 = iF;\n      C.child1 = iB;\n      B.parent_next = iC;\n      F.parent_next = iA;\n      C.aabb = aabbBG;\n      C.height = 1 + Math.max(B.height, G.height);\n      A.height = 1 + Math.max(C.height, F.height);\n      C.categoryBits = B.categoryBits | G.categoryBits;\n      A.categoryBits = C.categoryBits | F.categoryBits;\n      C.enlarged = B.enlarged || G.enlarged;\n      A.enlarged = C.enlarged || F.enlarged;\n    } else {\n      A.child1 = iG;\n      C.child2 = iB;\n      B.parent_next = iC;\n      G.parent_next = iA;\n      C.aabb = aabbBF;\n      C.height = 1 + Math.max(B.height, F.height);\n      A.height = 1 + Math.max(C.height, G.height);\n      C.categoryBits = B.categoryBits | F.categoryBits;\n      A.categoryBits = C.categoryBits | G.categoryBits;\n      C.enlarged = B.enlarged || F.enlarged;\n      A.enlarged = C.enlarged || G.enlarged;\n    }\n  } else if (C.height === 0) {\n    const iD = B.child1;\n    const iE = B.child2;\n    const D = nodes[iD];\n    const E = nodes[iE];\n    const costBase = b2Perimeter(B.aabb);\n    const aabbCE = b2AABB_Union(C.aabb, E.aabb);\n    const costCD = b2Perimeter(aabbCE);\n    const aabbCD = b2AABB_Union(C.aabb, D.aabb);\n    const costCE = b2Perimeter(aabbCD);\n    if (costBase < costCD && costBase < costCE) {\n      return;\n    }\n    if (costCD < costCE) {\n      A.child2 = iD;\n      B.child1 = iC;\n      C.parent_next = iB;\n      D.parent_next = iA;\n      B.aabb = aabbCE;\n      B.height = 1 + Math.max(C.height, E.height);\n      A.height = 1 + Math.max(B.height, D.height);\n      B.categoryBits = C.categoryBits | E.categoryBits;\n      A.categoryBits = B.categoryBits | D.categoryBits;\n      B.enlarged = C.enlarged || E.enlarged;\n      A.enlarged = B.enlarged || D.enlarged;\n    } else {\n      A.child2 = iE;\n      B.child2 = iC;\n      C.parent_next = iB;\n      E.parent_next = iA;\n      B.aabb = aabbCD;\n      B.height = 1 + Math.max(C.height, D.height);\n      A.height = 1 + Math.max(B.height, E.height);\n      B.categoryBits = C.categoryBits | D.categoryBits;\n      A.categoryBits = B.categoryBits | E.categoryBits;\n      B.enlarged = C.enlarged || D.enlarged;\n      A.enlarged = B.enlarged || E.enlarged;\n    }\n  } else {\n    const iD = B.child1;\n    const iE = B.child2;\n    const iF = C.child1;\n    const iG = C.child2;\n    const D = nodes[iD];\n    const E = nodes[iE];\n    const F = nodes[iF];\n    const G = nodes[iG];\n    const areaB = b2Perimeter(B.aabb);\n    const areaC = b2Perimeter(C.aabb);\n    const costBase = areaB + areaC;\n    let bestRotation = b2RotateType.b2_rotateNone;\n    let bestCost = costBase;\n    const aabbBG = b2AABB_Union(B.aabb, G.aabb);\n    const costBF = areaB + b2Perimeter(aabbBG);\n    if (costBF < bestCost) {\n      bestRotation = b2RotateType.b2_rotateBF;\n      bestCost = costBF;\n    }\n    const aabbBF = b2AABB_Union(B.aabb, F.aabb);\n    const costBG = areaB + b2Perimeter(aabbBF);\n    if (costBG < bestCost) {\n      bestRotation = b2RotateType.b2_rotateBG;\n      bestCost = costBG;\n    }\n    const aabbCE = b2AABB_Union(C.aabb, E.aabb);\n    const costCD = areaC + b2Perimeter(aabbCE);\n    if (costCD < bestCost) {\n      bestRotation = b2RotateType.b2_rotateCD;\n      bestCost = costCD;\n    }\n    const aabbCD = b2AABB_Union(C.aabb, D.aabb);\n    const costCE = areaC + b2Perimeter(aabbCD);\n    if (costCE < bestCost) {\n      bestRotation = b2RotateType.b2_rotateCE;\n    }\n    switch (bestRotation) {\n      case b2RotateType.b2_rotateNone:\n        break;\n      case b2RotateType.b2_rotateBF:\n        A.child1 = iF;\n        C.child1 = iB;\n        B.parent_next = iC;\n        F.parent_next = iA;\n        C.aabb = aabbBG;\n        C.height = 1 + Math.max(B.height, G.height);\n        A.height = 1 + Math.max(C.height, F.height);\n        C.categoryBits = B.categoryBits | G.categoryBits;\n        A.categoryBits = C.categoryBits | F.categoryBits;\n        C.enlarged = B.enlarged || G.enlarged;\n        A.enlarged = C.enlarged || F.enlarged;\n        break;\n      case b2RotateType.b2_rotateBG:\n        A.child1 = iG;\n        C.child2 = iB;\n        B.parent_next = iC;\n        G.parent_next = iA;\n        C.aabb = aabbBF;\n        C.height = 1 + Math.max(B.height, F.height);\n        A.height = 1 + Math.max(C.height, G.height);\n        C.categoryBits = B.categoryBits | F.categoryBits;\n        A.categoryBits = C.categoryBits | G.categoryBits;\n        C.enlarged = B.enlarged || F.enlarged;\n        A.enlarged = C.enlarged || G.enlarged;\n        break;\n      case b2RotateType.b2_rotateCD:\n        A.child2 = iD;\n        B.child1 = iC;\n        C.parent_next = iB;\n        D.parent_next = iA;\n        B.aabb = aabbCE;\n        B.height = 1 + Math.max(C.height, E.height);\n        A.height = 1 + Math.max(B.height, D.height);\n        B.categoryBits = C.categoryBits | E.categoryBits;\n        A.categoryBits = B.categoryBits | D.categoryBits;\n        B.enlarged = C.enlarged || E.enlarged;\n        A.enlarged = B.enlarged || D.enlarged;\n        break;\n      case b2RotateType.b2_rotateCE:\n        A.child2 = iE;\n        B.child2 = iC;\n        C.parent_next = iB;\n        E.parent_next = iA;\n        B.aabb = aabbCD;\n        B.height = 1 + Math.max(C.height, D.height);\n        A.height = 1 + Math.max(B.height, E.height);\n        B.categoryBits = C.categoryBits | D.categoryBits;\n        A.categoryBits = B.categoryBits | E.categoryBits;\n        B.enlarged = C.enlarged || D.enlarged;\n        A.enlarged = B.enlarged || E.enlarged;\n        break;\n      default:\n        break;\n    }\n  }\n}\nfunction b2InsertLeaf(tree, leaf, shouldRotate) {\n  if (tree.root === B2_NULL_INDEX) {\n    tree.root = leaf;\n    tree.nodes[tree.root].parent_next = B2_NULL_INDEX;\n    return;\n  }\n  const leafAABB = tree.nodes[leaf].aabb;\n  const sibling = b2FindBestSibling(tree, leafAABB);\n  const oldParent = tree.nodes[sibling].parent_next;\n  const newParent = b2AllocateNode(tree);\n  const nodes = tree.nodes;\n  nodes[newParent].parent_next = oldParent;\n  nodes[newParent].userData = -1;\n  nodes[newParent].aabb = b2AABB_Union(leafAABB, nodes[sibling].aabb);\n  nodes[newParent].categoryBits = nodes[leaf].categoryBits | nodes[sibling].categoryBits;\n  nodes[newParent].height = nodes[sibling].height + 1;\n  if (oldParent !== B2_NULL_INDEX) {\n    if (nodes[oldParent].child1 === sibling) {\n      nodes[oldParent].child1 = newParent;\n    } else {\n      nodes[oldParent].child2 = newParent;\n    }\n    nodes[newParent].child1 = sibling;\n    nodes[newParent].child2 = leaf;\n    nodes[sibling].parent_next = newParent;\n    nodes[leaf].parent_next = newParent;\n  } else {\n    nodes[newParent].child1 = sibling;\n    nodes[newParent].child2 = leaf;\n    nodes[sibling].parent_next = newParent;\n    nodes[leaf].parent_next = newParent;\n    tree.root = newParent;\n  }\n  let index = nodes[leaf].parent_next;\n  while (index !== B2_NULL_INDEX) {\n    const child1 = nodes[index].child1;\n    const child2 = nodes[index].child2;\n    nodes[index].aabb = b2AABB_Union(nodes[child1].aabb, nodes[child2].aabb);\n    nodes[index].categoryBits = nodes[child1].categoryBits | nodes[child2].categoryBits;\n    nodes[index].height = 1 + Math.max(nodes[child1].height, nodes[child2].height);\n    nodes[index].enlarged = nodes[child1].enlarged || nodes[child2].enlarged;\n    if (shouldRotate) {\n      b2RotateNodes(tree, index);\n    }\n    index = nodes[index].parent_next;\n  }\n}\nfunction b2RemoveLeaf(tree, leaf) {\n  if (leaf === tree.root) {\n    tree.root = B2_NULL_INDEX;\n    return;\n  }\n  const nodes = tree.nodes;\n  const parent = nodes[leaf].parent_next;\n  const grandParent = nodes[parent].parent_next;\n  let sibling;\n  if (nodes[parent].child1 === leaf) {\n    sibling = nodes[parent].child2;\n  } else {\n    sibling = nodes[parent].child1;\n  }\n  if (grandParent !== B2_NULL_INDEX) {\n    if (nodes[grandParent].child1 === parent) {\n      nodes[grandParent].child1 = sibling;\n    } else {\n      nodes[grandParent].child2 = sibling;\n    }\n    nodes[sibling].parent_next = grandParent;\n    b2FreeNode(tree, parent);\n    let index = grandParent;\n    while (index !== B2_NULL_INDEX) {\n      const node = nodes[index];\n      const child1 = nodes[node.child1];\n      const child2 = nodes[node.child2];\n      node.aabb = b2AABB_Union(child1.aabb, child2.aabb);\n      node.categoryBits = child1.categoryBits | child2.categoryBits;\n      node.height = 1 + Math.max(child1.height, child2.height);\n      index = node.parent_next;\n    }\n  } else {\n    tree.root = sibling;\n    tree.nodes[sibling].parent_next = B2_NULL_INDEX;\n    b2FreeNode(tree, parent);\n  }\n}\nfunction b2DynamicTree_CreateProxy(tree, aabb, categoryBits, userData) {\n  const proxyId = b2AllocateNode(tree);\n  const node = tree.nodes[proxyId];\n  node.aabb = aabb;\n  node.userData = userData;\n  node.categoryBits = categoryBits;\n  node.height = 0;\n  const shouldRotate = true;\n  b2InsertLeaf(tree, proxyId, shouldRotate);\n  tree.proxyCount += 1;\n  return proxyId;\n}\nfunction b2DynamicTree_DestroyProxy(tree, proxyId) {\n  b2RemoveLeaf(tree, proxyId);\n  b2FreeNode(tree, proxyId);\n  tree.proxyCount -= 1;\n}\nfunction b2DynamicTree_GetProxyCount(tree) {\n  return tree.proxyCount;\n}\nfunction b2DynamicTree_MoveProxy(tree, proxyId, aabb) {\n  b2RemoveLeaf(tree, proxyId);\n  tree.nodes[proxyId].aabb = aabb;\n  const shouldRotate = false;\n  b2InsertLeaf(tree, proxyId, shouldRotate);\n}\nfunction b2DynamicTree_EnlargeProxy(tree, proxyId, aabb) {\n  const nodes = tree.nodes;\n  nodes[proxyId].aabb = aabb;\n  let parentIndex = nodes[proxyId].parent_next;\n  while (parentIndex !== B2_NULL_INDEX) {\n    const changed = b2EnlargeAABB(nodes[parentIndex].aabb, aabb);\n    nodes[parentIndex].enlarged = true;\n    parentIndex = nodes[parentIndex].parent_next;\n    if (!changed) {\n      break;\n    }\n  }\n  while (parentIndex !== B2_NULL_INDEX) {\n    if (nodes[parentIndex].enlarged === true) {\n      break;\n    }\n    nodes[parentIndex].enlarged = true;\n    parentIndex = nodes[parentIndex].parent_next;\n  }\n}\nfunction b2DynamicTree_GetHeight(tree) {\n  if (tree.root === B2_NULL_INDEX) {\n    return 0;\n  }\n  return tree.nodes[tree.root].height;\n}\nfunction b2DynamicTree_GetAreaRatio(tree) {\n  if (tree.root === B2_NULL_INDEX) {\n    return 0;\n  }\n  const root = tree.nodes[tree.root];\n  const rootArea = b2Perimeter(root.aabb);\n  let totalArea = 0;\n  for (let i = 0; i < tree.nodeCapacity; ++i) {\n    const node = tree.nodes[i];\n    if (node.height < 0 || b2IsLeaf(node) || i === tree.root) {\n      continue;\n    }\n    totalArea += b2Perimeter(node.aabb);\n  }\n  return totalArea / rootArea;\n}\nfunction b2DynamicTree_Validate(tree) {\n}\nfunction b2DynamicTree_GetMaxBalance(tree) {\n  let maxBalance = 0;\n  for (let i = 0; i < tree.nodeCapacity; ++i) {\n    const node = tree.nodes[i];\n    if (node.height <= 1) {\n      continue;\n    }\n    const child1 = node.child1;\n    const child2 = node.child2;\n    const balance = Math.abs(tree.nodes[child2].height - tree.nodes[child1].height);\n    maxBalance = Math.max(maxBalance, balance);\n  }\n  return maxBalance;\n}\nfunction b2DynamicTree_RebuildBottomUp(tree) {\n  const nodes = new Array(tree.nodeCount);\n  let count = 0;\n  for (let i = 0; i < tree.nodeCapacity; ++i) {\n    if (tree.nodes[i].height < 0) {\n      continue;\n    }\n    if (b2IsLeaf(tree.nodes[i])) {\n      tree.nodes[i].parent_next = B2_NULL_INDEX;\n      nodes[count] = i;\n      ++count;\n    } else {\n      b2FreeNode(tree, i);\n    }\n  }\n  while (count > 1) {\n    let minCost = Number.MAX_VALUE;\n    let iMin = -1, jMin = -1;\n    for (let i = 0; i < count; ++i) {\n      const aabbi = tree.nodes[nodes[i]].aabb;\n      for (let j = i + 1; j < count; ++j) {\n        const aabbj = tree.nodes[nodes[j]].aabb;\n        const b = b2AABB_Union(aabbi, aabbj);\n        const cost = b2Perimeter(b);\n        if (cost < minCost) {\n          iMin = i;\n          jMin = j;\n          minCost = cost;\n        }\n      }\n    }\n    const index_i = nodes[iMin];\n    const index_j = nodes[jMin];\n    const child1 = tree.nodes[index_i];\n    const child2 = tree.nodes[index_j];\n    const parentIndex = b2AllocateNode(tree);\n    const parent = tree.nodes[parentIndex];\n    parent.child1 = index_i;\n    parent.child2 = index_j;\n    parent.aabb = b2AABB_Union(child1.aabb, child2.aabb);\n    parent.categoryBits = child1.categoryBits | child2.categoryBits;\n    parent.height = 1 + Math.max(child1.height, child2.height);\n    parent.parent_next = B2_NULL_INDEX;\n    child1.parent_next = parentIndex;\n    child2.parent_next = parentIndex;\n    nodes[jMin] = nodes[count - 1];\n    nodes[iMin] = parentIndex;\n    --count;\n  }\n  tree.root = nodes[0];\n  b2DynamicTree_Validate(tree);\n}\nfunction b2DynamicTree_ShiftOrigin(tree, newOrigin) {\n  for (let i = 0; i < tree.nodeCapacity; ++i) {\n    const n = tree.nodes[i];\n    n.aabb.lowerBoundX -= newOrigin.x;\n    n.aabb.lowerBoundY -= newOrigin.y;\n    n.aabb.upperBoundX -= newOrigin.x;\n    n.aabb.upperBoundY -= newOrigin.y;\n  }\n}\nfunction b2DynamicTree_GetByteCount(tree) {\n  const size = Object.keys(tree).length * 8 + // Rough estimate for object properties\n  tree.nodeCapacity * Object.keys(tree.nodes[0]).length * 8 + // Estimate for nodes\n  tree.rebuildCapacity * (4 + 16 + 8 + 4);\n  return size;\n}\nfunction b2DynamicTree_Query(tree, aabb, maskBits, callback, context) {\n  if (tree.root == B2_NULL_INDEX) {\n    return;\n  }\n  const stack2 = [];\n  stack2.push(tree.root);\n  while (stack2.length > 0) {\n    const nodeId = stack2.pop();\n    if (nodeId == B2_NULL_INDEX) {\n      continue;\n    }\n    const node = tree.nodes[nodeId];\n    if ((node.categoryBits & maskBits) !== 0 && b2AABB_Overlaps(node.aabb, aabb)) {\n      if (node.height == 0) {\n        const proceed = callback(nodeId, node.userData, context);\n        if (proceed === false) {\n          return;\n        }\n      } else {\n        stack2.push(node.child1);\n        stack2.push(node.child2);\n      }\n    }\n  }\n}\nvar stack = Array(64);\nfunction b2DynamicTree_QueryAll(tree, aabb, context) {\n  if (tree.root == B2_NULL_INDEX) {\n    return;\n  }\n  const lx = aabb.lowerBoundX, ux = aabb.upperBoundX;\n  const ly = aabb.lowerBoundY, uy = aabb.upperBoundY;\n  const nodes = tree.nodes;\n  let stackCount = 0;\n  stack[stackCount++] = tree.root;\n  let nodeId, node, a;\n  while (stackCount > 0) {\n    nodeId = stack[--stackCount];\n    node = nodes[nodeId];\n    if (node.height == 0) {\n      a = node.aabb;\n      if (a.lowerBoundX < ux && a.upperBoundX > lx && a.lowerBoundY < uy && a.upperBoundY > ly) {\n        b2PairQueryCallback(nodeId, node.userData, context);\n      }\n    } else {\n      a = node.aabb;\n      if (a.lowerBoundX < ux && a.upperBoundX > lx && a.lowerBoundY < uy && a.upperBoundY > ly) {\n        stack[stackCount++] = node.child1;\n        stack[stackCount++] = node.child2;\n      }\n    }\n  }\n}\nfunction b2DynamicTree_RayCast(tree, input, maskBits, callback, context) {\n  const p14 = input.origin;\n  const d = input.translation;\n  const r = b2Normalize(d);\n  const v = b2CrossSV(1, r);\n  const abs_v = b2Abs(v);\n  let maxFraction = input.maxFraction;\n  let p23 = b2MulAdd(p14, maxFraction, d);\n  const segmentAABB = new b2AABB(Math.min(p14.x, p23.x), Math.min(p14.y, p23.y), Math.max(p14.x, p23.x), Math.max(p14.y, p23.y));\n  const stack2 = [];\n  stack2.push(tree.root);\n  const subInput = input;\n  while (stack2.length > 0) {\n    const nodeId = stack2.pop();\n    if (nodeId == B2_NULL_INDEX) {\n      continue;\n    }\n    const node = tree.nodes[nodeId];\n    if (b2AABB_Overlaps(node.aabb, segmentAABB) == false || (node.categoryBits & maskBits) == 0) {\n      continue;\n    }\n    const c2 = b2AABB_Center(node.aabb);\n    const h = b2AABB_Extents(node.aabb);\n    const term1 = Math.abs(b2Dot(v, b2Sub(p14, c2)));\n    const term2 = b2Dot(abs_v, h);\n    if (term2 < term1) {\n      continue;\n    }\n    if (node.height == 0) {\n      subInput.maxFraction = maxFraction;\n      const value = callback(subInput, nodeId, node.userData, context);\n      if (value == 0) {\n        return;\n      }\n      if (0 < value && value <= maxFraction) {\n        maxFraction = value;\n        p23 = b2MulAdd(p14, maxFraction, d);\n        segmentAABB.lowerBoundX = Math.min(p14.x, p23.x);\n        segmentAABB.lowerBoundY = Math.min(p14.y, p23.y);\n        segmentAABB.upperBoundX = Math.max(p14.x, p23.x);\n        segmentAABB.upperBoundY = Math.max(p14.y, p23.y);\n      }\n    } else {\n      stack2.push(node.child1);\n      stack2.push(node.child2);\n    }\n  }\n}\nfunction b2DynamicTree_ShapeCast(tree, input, maskBits, callback, context) {\n  if (input.count == 0) {\n    return;\n  }\n  const originAABB = new b2AABB(input.points[0], input.points[0]);\n  for (let i = 1; i < input.count; ++i) {\n    originAABB.lowerBoundX = Math.min(originAABB.lowerBoundX, input.points[i].x);\n    originAABB.lowerBoundY = Math.min(originAABB.lowerBoundY, input.points[i].y);\n    originAABB.upperBoundX = Math.max(originAABB.upperBoundX, input.points[i].x);\n    originAABB.upperBoundY = Math.max(originAABB.upperBoundY, input.points[i].y);\n  }\n  originAABB.lowerBoundX = originAABB.lowerBoundX - input.radius;\n  originAABB.lowerBoundY = originAABB.lowerBoundY - input.radius;\n  originAABB.upperBoundX = originAABB.upperBoundX + input.radius;\n  originAABB.upperBoundY = originAABB.upperBoundY + input.radius;\n  const p14 = b2AABB_Center(originAABB);\n  const extension = b2AABB_Extents(originAABB);\n  const r = input.translation;\n  const v = b2CrossSV(1, r);\n  const abs_v = b2Abs(v);\n  let maxFraction = input.maxFraction;\n  let t = b2MulSV(maxFraction, input.translation);\n  const totalAABB = new b2AABB(\n    Math.min(originAABB.lowerBoundX, originAABB.lowerBoundX + t.x),\n    Math.min(originAABB.lowerBoundY, originAABB.lowerBoundY + t.y),\n    Math.max(originAABB.upperBoundX, originAABB.upperBoundX + t.x),\n    Math.max(originAABB.upperBoundY, originAABB.upperBoundY + t.y)\n  );\n  const subInput = input;\n  const stack2 = [];\n  stack2.push(tree.root);\n  while (stack2.length > 0) {\n    const nodeId = stack2.pop();\n    if (nodeId == B2_NULL_INDEX) {\n      continue;\n    }\n    const node = tree.nodes[nodeId];\n    if (b2AABB_Overlaps(node.aabb, totalAABB) == false || (node.categoryBits & maskBits) == 0) {\n      continue;\n    }\n    const c2 = b2AABB_Center(node.aabb);\n    const h = b2Add(b2AABB_Extents(node.aabb), extension);\n    const term1 = Math.abs(b2Dot(v, b2Sub(p14, c2)));\n    const term2 = b2Dot(abs_v, h);\n    if (term2 < term1) {\n      continue;\n    }\n    if (node.height == 0) {\n      subInput.maxFraction = maxFraction;\n      const value = callback(subInput, nodeId, node.userData, context);\n      if (value == 0) {\n        return;\n      }\n      if (0 < value && value < maxFraction) {\n        maxFraction = value;\n        t = b2MulSV(maxFraction, input.translation);\n        totalAABB.lowerBoundX = Math.min(originAABB.lowerBoundX, originAABB.lowerBoundX + t.x);\n        totalAABB.lowerBoundY = Math.min(originAABB.lowerBoundY, originAABB.lowerBoundY + t.y);\n        totalAABB.upperBoundX = Math.max(originAABB.upperBoundX, originAABB.upperBoundX + t.x);\n        totalAABB.upperBoundY = Math.max(originAABB.upperBoundY, originAABB.upperBoundY + t.y);\n      }\n    } else {\n      stack2.push(node.child1);\n      stack2.push(node.child2);\n    }\n  }\n}\nfunction b2PartitionMid(indices, centers, startIndex, endIndex, count) {\n  if (count <= 2) {\n    return startIndex + (count >> 1);\n  }\n  let lowerBoundX = centers[startIndex].x;\n  let upperBoundX = centers[startIndex].x;\n  let lowerBoundY = centers[startIndex].y;\n  let upperBoundY = centers[startIndex].y;\n  for (let i = startIndex + 1; i < endIndex; ++i) {\n    const x = centers[i].x;\n    const y = centers[i].y;\n    if (x < lowerBoundX) {\n      lowerBoundX = x;\n    } else if (x > upperBoundX) {\n      upperBoundX = x;\n    }\n    if (y < lowerBoundY) {\n      lowerBoundY = y;\n    } else if (y > upperBoundY) {\n      upperBoundY = y;\n    }\n  }\n  const dX = upperBoundX - lowerBoundX;\n  const dY = upperBoundY - lowerBoundY;\n  const dirX = dX > dY;\n  let left = startIndex;\n  let right = endIndex - 1;\n  if (dirX) {\n    const pivot = 0.5 * (lowerBoundX + upperBoundX);\n    while (true) {\n      while (left <= right && centers[left].x < pivot) {\n        left++;\n      }\n      while (left <= right && centers[right].x > pivot) {\n        right--;\n      }\n      if (left >= right) {\n        break;\n      }\n      let temp = indices[left];\n      indices[left] = indices[right];\n      indices[right] = temp;\n      temp = centers[left];\n      centers[left] = centers[right];\n      centers[right] = temp;\n      left++;\n      right--;\n    }\n  } else {\n    const pivot = 0.5 * (lowerBoundY + upperBoundY);\n    while (true) {\n      while (left <= right && centers[left].y < pivot) {\n        left++;\n      }\n      while (left <= right && centers[right].y > pivot) {\n        right--;\n      }\n      if (left >= right) {\n        break;\n      }\n      let temp = indices[left];\n      indices[left] = indices[right];\n      indices[right] = temp;\n      temp = centers[left];\n      centers[left] = centers[right];\n      centers[right] = temp;\n      left++;\n      right--;\n    }\n  }\n  return left > startIndex && left < endIndex ? left : startIndex + (count >> 1);\n}\nfunction b2BuildTree(tree, leafCount) {\n  const { nodes, leafIndices, leafCenters } = tree;\n  if (leafCount === 1) {\n    nodes[leafIndices[0]].parent_next = B2_NULL_INDEX;\n    return leafIndices[0];\n  }\n  const stack2 = new Array(B2_TREE_STACK_SIZE);\n  let top = 0;\n  stack2[0] = {\n    nodeIndex: b2AllocateNode(tree),\n    childCount: -1,\n    startIndex: 0,\n    endIndex: leafCount,\n    splitIndex: b2PartitionMid(leafIndices, leafCenters, 0, leafCount, leafCount)\n  };\n  while (true) {\n    const item = stack2[top];\n    item.childCount++;\n    if (item.childCount === 2) {\n      if (top === 0) {\n        break;\n      }\n      const parentItem = stack2[top - 1];\n      const parentNode = nodes[parentItem.nodeIndex];\n      const childIndex = item.nodeIndex;\n      if (parentItem.childCount === 0) {\n        parentNode.child1 = childIndex;\n      } else {\n        parentNode.child2 = childIndex;\n      }\n      const node = nodes[childIndex];\n      node.parent_next = parentItem.nodeIndex;\n      const child12 = nodes[node.child1];\n      const child22 = nodes[node.child2];\n      node.aabb = b2AABB_Union(child12.aabb, child22.aabb);\n      node.height = 1 + Math.max(child12.height, child22.height);\n      node.categoryBits = child12.categoryBits | child22.categoryBits;\n      top--;\n    } else {\n      const [startIndex, endIndex] = item.childCount === 0 ? [item.startIndex, item.splitIndex] : [item.splitIndex, item.endIndex];\n      const count = endIndex - startIndex;\n      if (count === 1) {\n        const childIndex = leafIndices[startIndex];\n        const node = nodes[item.nodeIndex];\n        node[item.childCount === 0 ? \"child1\" : \"child2\"] = childIndex;\n        nodes[childIndex].parent_next = item.nodeIndex;\n      } else {\n        stack2[++top] = {\n          nodeIndex: b2AllocateNode(tree),\n          childCount: -1,\n          startIndex,\n          endIndex,\n          splitIndex: b2PartitionMid(\n            leafIndices,\n            leafCenters,\n            startIndex,\n            endIndex,\n            count\n          )\n        };\n      }\n    }\n  }\n  const rootNode = nodes[stack2[0].nodeIndex];\n  const child1 = nodes[rootNode.child1];\n  const child2 = nodes[rootNode.child2];\n  rootNode.aabb = b2AABB_Union(child1.aabb, child2.aabb);\n  rootNode.height = 1 + Math.max(child1.height, child2.height);\n  rootNode.categoryBits = child1.categoryBits | child2.categoryBits;\n  return stack2[0].nodeIndex;\n}\nfunction b2DynamicTree_Rebuild(tree) {\n  const proxyCount = tree.proxyCount;\n  if (proxyCount === 0) {\n    return 0;\n  }\n  if (proxyCount > tree.rebuildCapacity) {\n    const newCapacity = proxyCount + Math.floor(proxyCount / 2);\n    tree.leafIndices = Array(newCapacity);\n    tree.leafCenters = Array(newCapacity);\n    tree.rebuildCapacity = newCapacity;\n  }\n  let leafCount = 0;\n  const stack2 = [];\n  let nodeIndex = tree.root;\n  const nodes = tree.nodes;\n  let node = nodes[nodeIndex];\n  const leafIndices = tree.leafIndices;\n  const leafCenters = tree.leafCenters;\n  while (true) {\n    if (node.height === 0 || node.enlarged === false) {\n      leafIndices[leafCount] = nodeIndex;\n      leafCenters[leafCount] = b2AABB_Center(node.aabb);\n      leafCount++;\n      node.parent_next = B2_NULL_INDEX;\n    } else {\n      const doomedNodeIndex = nodeIndex;\n      stack2.push(node.child2);\n      nodeIndex = node.child1;\n      node = nodes[nodeIndex];\n      b2FreeNode(tree, doomedNodeIndex);\n      continue;\n    }\n    if (stack2.length === 0) {\n      break;\n    }\n    nodeIndex = stack2.pop();\n    node = nodes[nodeIndex];\n  }\n  tree.root = b2BuildTree(tree, leafCount);\n  return leafCount;\n}\n\n// src/include/dynamic_tree_h.js\nfunction b2DynamicTree_GetUserData(tree, proxyId) {\n  const node = tree.nodes[proxyId];\n  return node ? node.userData : 0;\n}\nvar b2DynamicTree = class {\n  constructor() {\n    this.nodes = [];\n    this.root = 0;\n    this.nodeCount = 0;\n    this.nodeCapacity = 0;\n    this.freeList = B2_NULL_INDEX;\n    this.proxyCount = 0;\n    this.leafIndices = [];\n    this.leafCenters = [];\n    this.rebuildCapacity = 0;\n  }\n};\n\n// src/include/ctz_h.js\nfunction b2CTZ64(block) {\n  if (block === 0n) {\n    return 0;\n  }\n  const low32 = Number(block & 0xFFFFFFFFn);\n  if (low32 !== 0) {\n    return Math.clz32(low32 & -low32) ^ 31;\n  } else {\n    const high32 = Number(block >> 32n);\n    return Math.clz32(high32 & -high32) ^ 31 | 32;\n  }\n}\n\n// src/solver_set_c.js\nvar b2SolverSet = class {\n  constructor() {\n    this.sims = new b2BodySimArray();\n    this.states = new b2BodyStateArray();\n    this.joints = new b2JointArray();\n    this.contacts = new b2ContactArray();\n    this.islands = new b2IslandArray();\n    this.setIndex = 0;\n  }\n};\nfunction b2DestroySolverSet(world, setIndex) {\n  let set = world.solverSetArray[setIndex];\n  set.sims = null;\n  set.states = null;\n  set.contacts = null;\n  set.joints = null;\n  set.islands = null;\n  b2FreeId(world.solverSetIdPool, setIndex);\n  set = new b2SolverSet();\n  set.setIndex = B2_NULL_INDEX;\n  world.solverSetArray[setIndex] = set;\n}\nfunction b2WakeSolverSet(world, setIndex) {\n  const set = world.solverSetArray[setIndex];\n  const awakeSet = world.solverSetArray[b2SetType.b2_awakeSet];\n  const disabledSet = world.solverSetArray[b2SetType.b2_disabledSet];\n  const bodies = world.bodyArray;\n  const contacts = world.contactArray;\n  const bodyCount = set.sims.count;\n  for (let i = 0; i < bodyCount; ++i) {\n    const simSrc = set.sims.data[i];\n    const body = bodies[simSrc.bodyId];\n    body.setIndex = b2SetType.b2_awakeSet;\n    body.localIndex = awakeSet.sims.count;\n    body.sleepTime = 0;\n    const simDst = b2AddBodySim(awakeSet.sims);\n    Object.assign(simDst, simSrc);\n    const state = b2AddBodyState(awakeSet.states);\n    Object.assign(state, new b2BodyState());\n    let contactKey = body.headContactKey;\n    while (contactKey !== B2_NULL_INDEX) {\n      const edgeIndex = contactKey & 1;\n      const contactId = contactKey >> 1;\n      const contact = contacts[contactId];\n      contactKey = contact.edges[edgeIndex].nextKey;\n      if (contact.setIndex !== b2SetType.b2_disabledSet) {\n        continue;\n      }\n      const localIndex = contact.localIndex;\n      const contactSim = disabledSet.contacts.data[localIndex];\n      contact.setIndex = b2SetType.b2_awakeSet;\n      contact.localIndex = awakeSet.contacts.count;\n      const awakeContactSim = b2AddContact(awakeSet.contacts);\n      awakeContactSim.set(contactSim);\n      const movedLocalIndex = b2RemoveContact(disabledSet.contacts, localIndex);\n      if (movedLocalIndex !== B2_NULL_INDEX) {\n        const movedContact = disabledSet.contacts.data[localIndex];\n        const movedId = movedContact.contactId;\n        contacts[movedId].localIndex = localIndex;\n      }\n    }\n  }\n  const contactCount = set.contacts.count;\n  for (let i = 0; i < contactCount; ++i) {\n    const contactSim = set.contacts.data[i];\n    const contact = contacts[contactSim.contactId];\n    b2AddContactToGraph(world, contactSim, contact);\n    contact.setIndex = b2SetType.b2_awakeSet;\n  }\n  const joints = world.jointArray;\n  const jointCount = set.joints.count;\n  for (let i = 0; i < jointCount; ++i) {\n    const jointSim = set.joints.data[i];\n    const joint = joints[jointSim.jointId];\n    b2AddJointToGraph(world, jointSim, joint);\n    joint.setIndex = b2SetType.b2_awakeSet;\n  }\n  const islands = world.islandArray;\n  const islandCount = set.islands.count;\n  for (let i = 0; i < islandCount; ++i) {\n    const islandSrc = set.islands.data[i];\n    const island = islands[islandSrc.islandId];\n    island.setIndex = b2SetType.b2_awakeSet;\n    island.localIndex = awakeSet.islands.count;\n    const islandDst = b2AddIsland(awakeSet.islands);\n    Object.assign(islandDst, islandSrc);\n  }\n  b2DestroySolverSet(world, setIndex);\n  b2ValidateSolverSets(world);\n}\nfunction b2TrySleepIsland(world, islandId) {\n  const island = world.islandArray[islandId];\n  if (island.constraintRemoveCount > 0) {\n    return;\n  }\n  const moveEvents = world.bodyMoveEventArray;\n  const sleepSetId = b2AllocId(world.solverSetIdPool);\n  if (sleepSetId === world.solverSetArray.length) {\n    const set = new b2SolverSet();\n    set.setIndex = B2_NULL_INDEX;\n    world.solverSetArray.push(set);\n  }\n  const awakeSet = world.solverSetArray[b2SetType.b2_awakeSet];\n  const sleepSet = world.solverSetArray[sleepSetId];\n  sleepSet.setIndex = sleepSetId;\n  sleepSet.sims = b2CreateBodySimArray(island.bodyCount);\n  sleepSet.contacts = b2CreateContactArray(island.contactCount);\n  sleepSet.joints = b2CreateJointArray(island.jointCount);\n  const disabledSet = world.solverSetArray[b2SetType.b2_disabledSet];\n  const bodies = world.bodyArray;\n  const contacts = world.contactArray;\n  let bodyId = island.headBody;\n  while (bodyId !== B2_NULL_INDEX) {\n    const body = bodies[bodyId];\n    if (body.bodyMoveIndex !== B2_NULL_INDEX) {\n      moveEvents[body.bodyMoveIndex].fellAsleep = true;\n      body.bodyMoveIndex = B2_NULL_INDEX;\n    }\n    const awakeBodyIndex = body.localIndex;\n    const awakeSim = awakeSet.sims.data[awakeBodyIndex];\n    const sleepBodyIndex = sleepSet.sims.count;\n    const sleepBodySim = b2AddBodySim(sleepSet.sims);\n    awakeSim.copyTo(sleepBodySim);\n    const movedIndex = b2RemoveBodySim(awakeSet.sims, awakeBodyIndex);\n    if (movedIndex !== B2_NULL_INDEX) {\n      const movedSim = awakeSet.sims.data[awakeBodyIndex];\n      const movedId = movedSim.bodyId;\n      const movedBody = bodies[movedId];\n      movedBody.localIndex = awakeBodyIndex;\n    }\n    b2RemoveBodyState(awakeSet.states, awakeBodyIndex);\n    body.setIndex = sleepSetId;\n    body.localIndex = sleepBodyIndex;\n    let contactKey = body.headContactKey;\n    while (contactKey !== B2_NULL_INDEX) {\n      const contactId2 = contactKey >> 1;\n      const edgeIndex = contactKey & 1;\n      const contact = contacts[contactId2];\n      contactKey = contact.edges[edgeIndex].nextKey;\n      if (contact.setIndex === b2SetType.b2_disabledSet) {\n        continue;\n      }\n      if (contact.colorIndex !== B2_NULL_INDEX) {\n        continue;\n      }\n      const otherEdgeIndex = edgeIndex ^ 1;\n      const otherBodyId = contact.edges[otherEdgeIndex].bodyId;\n      const otherBody = bodies[otherBodyId];\n      if (otherBody.setIndex === b2SetType.b2_awakeSet) {\n        continue;\n      }\n      const localIndex = contact.localIndex;\n      const contactSim = awakeSet.contacts.data[localIndex];\n      contact.setIndex = b2SetType.b2_disabledSet;\n      contact.localIndex = disabledSet.contacts.count;\n      const disabledContactSim = b2AddContact(disabledSet.contacts);\n      disabledContactSim.set(contactSim);\n      const movedContactIndex = b2RemoveContact(awakeSet.contacts, localIndex);\n      if (movedContactIndex !== B2_NULL_INDEX) {\n        const movedContactSim = awakeSet.contacts.data[localIndex];\n        const movedId = movedContactSim.contactId;\n        contacts[movedId].localIndex = localIndex;\n      }\n    }\n    bodyId = body.islandNext;\n  }\n  let contactId = island.headContact;\n  while (contactId !== B2_NULL_INDEX) {\n    const contact = contacts[contactId];\n    const colorIndex = contact.colorIndex;\n    const color = world.constraintGraph.colors[colorIndex];\n    if (colorIndex !== b2_overflowIndex) {\n      b2ClearBit(color.bodySet, contact.edges[0].bodyId);\n      b2ClearBit(color.bodySet, contact.edges[1].bodyId);\n    }\n    const awakeContactIndex = contact.localIndex;\n    const awakeContactSim = color.contacts.data[awakeContactIndex];\n    const sleepContactIndex = sleepSet.contacts.count;\n    const sleepContactSim = b2AddContact(sleepSet.contacts);\n    sleepContactSim.set(awakeContactSim);\n    const movedIndex = b2RemoveContact(color.contacts, awakeContactIndex);\n    if (movedIndex !== B2_NULL_INDEX) {\n      const movedContactSim = color.contacts.data[awakeContactIndex];\n      const movedId = movedContactSim.contactId;\n      const movedContact = contacts[movedId];\n      movedContact.localIndex = awakeContactIndex;\n    }\n    contact.setIndex = sleepSetId;\n    contact.colorIndex = B2_NULL_INDEX;\n    contact.localIndex = sleepContactIndex;\n    contactId = contact.islandNext;\n  }\n  const joints = world.jointArray;\n  let jointId = island.headJoint;\n  while (jointId !== B2_NULL_INDEX) {\n    const joint = joints[jointId];\n    const colorIndex = joint.colorIndex;\n    const localIndex = joint.localIndex;\n    const color = world.constraintGraph.colors[colorIndex];\n    const awakeJointSim = color.joints.data[localIndex];\n    if (colorIndex !== b2_overflowIndex) {\n      b2ClearBit(color.bodySet, joint.edges[0].bodyId);\n      b2ClearBit(color.bodySet, joint.edges[1].bodyId);\n    }\n    const sleepJointIndex = sleepSet.joints.count;\n    const sleepJointSim = b2AddJoint(sleepSet.joints);\n    awakeJointSim.copyTo(sleepJointSim);\n    const movedIndex = b2RemoveJoint(color.joints, localIndex);\n    if (movedIndex !== B2_NULL_INDEX) {\n      const movedJointSim = color.joints.data[localIndex];\n      const movedId = movedJointSim.jointId;\n      const movedJoint = joints[movedId];\n      movedJoint.localIndex = localIndex;\n    }\n    joint.setIndex = sleepSetId;\n    joint.colorIndex = B2_NULL_INDEX;\n    joint.localIndex = sleepJointIndex;\n    jointId = joint.islandNext;\n  }\n  const islandIndex = island.localIndex;\n  const sleepIsland = b2AddIsland(sleepSet.islands);\n  sleepIsland.islandId = islandId;\n  const movedIslandIndex = b2RemoveIsland(awakeSet.islands, islandIndex);\n  if (movedIslandIndex !== B2_NULL_INDEX) {\n    const movedIslandSim = awakeSet.islands.data[islandIndex];\n    const movedIslandId = movedIslandSim.islandId;\n    const movedIsland = world.islandArray[movedIslandId];\n    movedIsland.localIndex = islandIndex;\n  }\n  island.setIndex = sleepSetId;\n  island.localIndex = 0;\n  b2ValidateSolverSets(world);\n}\nfunction b2MergeSolverSets(world, setId1, setId2) {\n  let set1 = world.solverSetArray[setId1];\n  let set2 = world.solverSetArray[setId2];\n  if (set1.sims.count < set2.sims.count) {\n    [set1, set2] = [set2, set1];\n    [setId1, setId2] = [setId2, setId1];\n  }\n  const bodies = world.bodyArray;\n  const bodyCount = set2.sims.count;\n  for (let i = 0; i < bodyCount; ++i) {\n    const simSrc = set2.sims.data[i];\n    const body = bodies[simSrc.bodyId];\n    body.setIndex = setId1;\n    body.localIndex = set1.sims.count;\n    const simDst = b2AddBodySim(set1.sims);\n    Object.assign(simDst, simSrc);\n  }\n  const contacts = world.contactArray;\n  const contactCount = set2.contacts.count;\n  for (let i = 0; i < contactCount; ++i) {\n    const contactSrc = set2.contacts.data[i];\n    const contact = contacts[contactSrc.contactId];\n    contact.setIndex = setId1;\n    contact.localIndex = set1.contacts.count;\n    const contactDst = b2AddContact(set1.contacts);\n    contactDst.set(contactSrc);\n  }\n  const joints = world.jointArray;\n  const jointCount = set2.joints.count;\n  for (let i = 0; i < jointCount; ++i) {\n    const jointSrc = set2.joints.data[i];\n    const joint = joints[jointSrc.jointId];\n    joint.setIndex = setId1;\n    joint.localIndex = set1.joints.count;\n    const jointDst = b2AddJoint(set1.joints);\n    Object.assign(jointDst, jointSrc);\n  }\n  const islands = world.islandArray;\n  const islandCount = set2.islands.count;\n  for (let i = 0; i < islandCount; ++i) {\n    const islandSrc = set2.islands.data[i];\n    const islandId = islandSrc.islandId;\n    const island = islands[islandId];\n    island.setIndex = setId1;\n    island.localIndex = set1.islands.count;\n    const islandDst = b2AddIsland(set1.islands);\n    Object.assign(islandDst, islandSrc);\n  }\n  b2DestroySolverSet(world, setId2);\n  b2ValidateSolverSets(world);\n}\nfunction b2TransferBody(world, targetSet, sourceSet, body) {\n  const sourceIndex = body.localIndex;\n  const sourceSim = sourceSet.sims.data[sourceIndex];\n  const targetIndex = targetSet.sims.count;\n  const targetSim = b2AddBodySim(targetSet.sims);\n  Object.assign(targetSim, sourceSim);\n  const movedIndex = b2RemoveBodySim(sourceSet.sims, sourceIndex);\n  if (movedIndex !== B2_NULL_INDEX) {\n    const movedSim = sourceSet.sims.data[sourceIndex];\n    const movedId = movedSim.bodyId;\n    const movedBody = world.bodyArray[movedId];\n    movedBody.localIndex = sourceIndex;\n  }\n  if (sourceSet.setIndex === b2SetType.b2_awakeSet) {\n    b2RemoveBodyState(sourceSet.states, sourceIndex);\n  } else if (targetSet.setIndex === b2SetType.b2_awakeSet) {\n    const state = b2AddBodyState(targetSet.states);\n    Object.assign(state, new b2BodyState());\n  }\n  body.setIndex = targetSet.setIndex;\n  body.localIndex = targetIndex;\n}\nfunction b2TransferJoint(world, targetSet, sourceSet, joint) {\n  const localIndex = joint.localIndex;\n  const colorIndex = joint.colorIndex;\n  let sourceSim;\n  if (sourceSet.setIndex === b2SetType.b2_awakeSet) {\n    const color = world.constraintGraph.colors[colorIndex];\n    sourceSim = color.joints.data[localIndex];\n  } else {\n    sourceSim = sourceSet.joints.data[localIndex];\n  }\n  if (targetSet.setIndex === b2SetType.b2_awakeSet) {\n    b2AddJointToGraph(world, sourceSim, joint);\n    joint.setIndex = b2SetType.b2_awakeSet;\n  } else {\n    joint.setIndex = targetSet.setIndex;\n    joint.localIndex = targetSet.joints.count;\n    joint.colorIndex = B2_NULL_INDEX;\n    const targetSim = b2AddJoint(targetSet.joints);\n    Object.assign(targetSim, sourceSim);\n  }\n  if (sourceSet.setIndex === b2SetType.b2_awakeSet) {\n    b2RemoveJointFromGraph(world, joint.edges[0].bodyId, joint.edges[1].bodyId, colorIndex, localIndex);\n  } else {\n    const movedIndex = b2RemoveJoint(sourceSet.joints, localIndex);\n    if (movedIndex !== B2_NULL_INDEX) {\n      const movedJointSim = sourceSet.joints.data[localIndex];\n      const movedId = movedJointSim.jointId;\n      const movedJoint = world.jointArray[movedId];\n      movedJoint.localIndex = localIndex;\n    }\n  }\n}\n\n// src/solver_c.js\nvar b2SolverStageType = {\n  b2_stagePrepareJoints: 0,\n  b2_stagePrepareContacts: 1,\n  b2_stageIntegrateVelocities: 2,\n  b2_stageWarmStart: 3,\n  b2_stageSolve: 4,\n  b2_stageIntegratePositions: 5,\n  b2_stageRelax: 6,\n  b2_stageRestitution: 7,\n  b2_stageStoreImpulses: 8\n};\nvar b2SolverBlockType = {\n  b2_bodyBlock: 0,\n  b2_jointBlock: 1,\n  b2_contactBlock: 2,\n  b2_graphJointBlock: 3,\n  b2_graphContactBlock: 4\n};\nvar b2SolverBlock = class {\n  constructor() {\n    this.startIndex = 0;\n    this.count = 0;\n    this.blockType = 0;\n    this.syncIndex = 0;\n  }\n};\nvar b2SolverStage = class {\n  constructor() {\n    this.type = 0;\n    this.blocks = null;\n    this.blockCount = 0;\n    this.colorIndex = 0;\n    this.completionCount = 0;\n  }\n};\nvar b2WorkerContext = class {\n  constructor() {\n    this.context = new b2StepContext();\n    this.workerIndex = 0;\n    this.userTask = null;\n  }\n};\nvar b2Softness = class _b2Softness {\n  constructor(biasRate = 0, massScale = 0, impulseScale = 0) {\n    this.biasRate = biasRate;\n    this.massScale = massScale;\n    this.impulseScale = impulseScale;\n  }\n  clone() {\n    return new _b2Softness(this.biasRate, this.massScale, this.impulseScale);\n  }\n};\nvar b2StepContext = class {\n  constructor() {\n    this.dt = 0;\n    this.inv_dt = 0;\n    this.h = 0;\n    this.inv_h = 0;\n    this.subStepCount = 0;\n    this.jointSoftness = new b2Softness(0, 0, 0);\n    this.contactSoftness = new b2Softness(0, 0, 0);\n    this.staticSoftness = new b2Softness(0, 0, 0);\n    this.restitutionThreshold = 0;\n    this.maxLinearVelocity = 0;\n    this.world = null;\n    this.graph = null;\n    this.states = null;\n    this.sims = null;\n    this.enlargedShapes = null;\n    this.enlargedShapeCount = 0;\n    this.fastBodies = null;\n    this.fastBodyCount = 0;\n    this.bulletBodies = null;\n    this.bulletBodyCount = 0;\n    this.joints = null;\n    this.contacts = null;\n    this.simdContactConstraints = null;\n    this.activeColorCount = 0;\n    this.workerCount = 0;\n    this.stages = null;\n    this.stageCount = 0;\n    this.enableWarmStarting = false;\n    this.atomicSyncBits = 0;\n  }\n};\nfunction b2MakeSoft(hertz, zeta, h) {\n  if (hertz === 0) {\n    return new b2Softness(0, 1, 0);\n  }\n  const omega = 2 * B2_PI * hertz;\n  const a1 = 2 * zeta + h * omega;\n  const a2 = h * omega * a1;\n  const a3 = 1 / (1 + a2);\n  return new b2Softness(omega / a1, a2 * a3, a3);\n}\nfunction b2IntegrateVelocitiesTask(startIndex, endIndex, context) {\n  const states = context.states;\n  const sims = context.sims;\n  const gravity = context.world.gravity;\n  const h = context.h;\n  const maxLinearSpeed = context.maxLinearVelocity;\n  const maxAngularSpeed = B2_MAX_ROTATION * context.inv_dt;\n  const maxLinearSpeedSquared = maxLinearSpeed * maxLinearSpeed;\n  const maxAngularSpeedSquared = maxAngularSpeed * maxAngularSpeed;\n  for (let i = startIndex; i < endIndex; ++i) {\n    const sim = sims[i];\n    const state = states[i];\n    const v = state.linearVelocity;\n    let w = state.angularVelocity;\n    const linearDamping = 1 / (1 + h * sim.linearDamping);\n    const angularDamping = 1 / (1 + h * sim.angularDamping);\n    const m = sim.mass * sim.gravityScale;\n    const im = h * sim.invMass;\n    const lvdX = im * (sim.force.x + m * gravity.x);\n    const lvdY = im * (sim.force.y + m * gravity.y);\n    const angularVelocityDelta = h * sim.invInertia * sim.torque;\n    v.x = lvdX + linearDamping * v.x;\n    v.y = lvdY + linearDamping * v.y;\n    w = angularVelocityDelta + angularDamping * w;\n    const l = v.x * v.x + v.y * v.y;\n    if (l > maxLinearSpeedSquared) {\n      const ratio = maxLinearSpeed / Math.sqrt(l);\n      v.x *= ratio;\n      v.y *= ratio;\n      sim.isSpeedCapped = true;\n    }\n    if (w * w > maxAngularSpeedSquared && sim.allowFastRotation === false) {\n      const ratio = maxAngularSpeed / Math.abs(w);\n      w *= ratio;\n      sim.isSpeedCapped = true;\n    }\n    state.linearVelocity = v;\n    state.angularVelocity = w;\n  }\n}\nfunction b2IntegratePositionsTask(startIndex, endIndex, context) {\n  const states = context.states;\n  const h = context.h;\n  for (let i = startIndex; i < endIndex; ++i) {\n    const state = states[i];\n    b2IntegrateRotationOut(state.deltaRotation, h * state.angularVelocity, state.deltaRotation);\n    state.deltaPosition.x = state.deltaPosition.x + h * state.linearVelocity.x;\n    state.deltaPosition.y = state.deltaPosition.y + h * state.linearVelocity.y;\n  }\n}\nfunction b2FinalizeBodiesTask(startIndex, endIndex, threadIndex, context) {\n  const stepContext = context;\n  const world = stepContext.world;\n  const enableSleep = world.enableSleep;\n  const states = stepContext.states;\n  const sims = stepContext.sims;\n  const bodies = world.bodyArray;\n  const timeStep = stepContext.dt;\n  const invTimeStep = stepContext.inv_dt;\n  const worldId = world.worldId;\n  const moveEvents = world.bodyMoveEventArray;\n  const islands = world.islandArray;\n  const enlargedSimBitSet = world.taskContextArray[threadIndex].enlargedSimBitSet;\n  const awakeIslandBitSet = world.taskContextArray[threadIndex].awakeIslandBitSet;\n  const taskContext = world.taskContextArray[threadIndex];\n  const enableContinuous = world.enableContinuous;\n  const speculativeDistance = b2_speculativeDistance;\n  const aabbMargin = b2_aabbMargin;\n  for (let simIndex = startIndex; simIndex < endIndex; ++simIndex) {\n    const state = states[simIndex];\n    const sim = sims[simIndex];\n    const v = state.linearVelocity;\n    const w = state.angularVelocity;\n    sim.center.x += state.deltaPosition.x;\n    sim.center.y += state.deltaPosition.y;\n    const c2 = b2MulRotC(state.deltaRotation, sim.transform.q);\n    const s = b2MulRotS(state.deltaRotation, sim.transform.q);\n    const im = b2InvMagRot(c2, s);\n    sim.transform.q = new b2Rot(im * c2, im * s);\n    const maxVelocity = b2Length(v) + Math.abs(w) * sim.maxExtent;\n    const maxDeltaPosition = b2Length(state.deltaPosition) + Math.abs(state.deltaRotation.s) * sim.maxExtent;\n    const positionSleepFactor = 0.5;\n    const sleepVelocity = Math.max(maxVelocity, positionSleepFactor * invTimeStep * maxDeltaPosition);\n    state.deltaPosition.x = 0;\n    state.deltaPosition.y = 0;\n    state.deltaRotation.c = 1;\n    state.deltaRotation.s = 0;\n    sim.transform.p.x = sim.center.x - (sim.transform.q.c * sim.localCenter.x - sim.transform.q.s * sim.localCenter.y);\n    sim.transform.p.y = sim.center.y - (sim.transform.q.s * sim.localCenter.x + sim.transform.q.c * sim.localCenter.y);\n    const body = bodies[sim.bodyId];\n    body.bodyMoveIndex = simIndex;\n    moveEvents[simIndex].transform = sim.transform;\n    moveEvents[simIndex].bodyId = new b2BodyId(sim.bodyId + 1, worldId, body.revision);\n    moveEvents[simIndex].userData = body.userData;\n    moveEvents[simIndex].fellAsleep = false;\n    sim.force.x = 0;\n    sim.force.y = 0;\n    sim.torque = 0;\n    body.isSpeedCapped = sim.isSpeedCapped;\n    sim.isSpeedCapped = false;\n    sim.isFast = false;\n    if (enableSleep === false || body.enableSleep === false || sleepVelocity > body.sleepThreshold) {\n      body.sleepTime = 0;\n      const safetyFactor = 0.5;\n      if (body.type === b2BodyType.b2_dynamicBody && enableContinuous && maxVelocity * timeStep > safetyFactor * sim.minExtent) {\n        if (sim.isBullet) {\n          stepContext.bulletBodyCount++;\n          stepContext.bulletBodies[stepContext.bulletBodyCount - 1] = simIndex;\n        } else {\n          stepContext.fastBodyCount++;\n          stepContext.fastBodies[stepContext.fastBodyCount - 1] = simIndex;\n        }\n        sim.isFast = true;\n      } else {\n        sim.center0X = sim.center.x;\n        sim.center0Y = sim.center.y;\n        sim.rotation0.x = sim.transform.q.x;\n        sim.rotation0.y = sim.transform.q.y;\n      }\n    } else {\n      sim.center0X = sim.center.x;\n      sim.center0Y = sim.center.y;\n      sim.rotation0.x = sim.transform.q.x;\n      sim.rotation0.y = sim.transform.q.y;\n      body.sleepTime += timeStep;\n    }\n    const island = islands[body.islandId];\n    if (body.sleepTime < b2_timeToSleep) {\n      const islandIndex = island.localIndex;\n      b2SetBit(awakeIslandBitSet, islandIndex);\n    } else if (island.constraintRemoveCount > 0) {\n      if (body.sleepTime > taskContext.splitSleepTime) {\n        taskContext.splitIslandId = body.islandId;\n        taskContext.splitSleepTime = body.sleepTime;\n      }\n    }\n    const transform = sim.transform;\n    const isFast = sim.isFast;\n    let shapeId = body.headShapeId;\n    while (shapeId !== B2_NULL_INDEX) {\n      const shape = world.shapeArray[shapeId];\n      if (isFast) {\n        shape.isFast = true;\n        b2SetBit(enlargedSimBitSet, simIndex);\n      } else {\n        const aabb = b2ComputeShapeAABB(shape, transform);\n        aabb.lowerBoundX -= speculativeDistance;\n        aabb.lowerBoundY -= speculativeDistance;\n        aabb.upperBoundX += speculativeDistance;\n        aabb.upperBoundY += speculativeDistance;\n        shape.aabb = aabb;\n        if (b2AABB_Contains(shape.fatAABB, aabb) === false) {\n          const fatAABB = new b2AABB(\n            aabb.lowerBoundX - aabbMargin,\n            aabb.lowerBoundY - aabbMargin,\n            aabb.upperBoundX + aabbMargin,\n            aabb.upperBoundY + aabbMargin\n          );\n          shape.fatAABB = fatAABB;\n          shape.enlargedAABB = true;\n          b2SetBit(enlargedSimBitSet, simIndex);\n        }\n      }\n      shapeId = shape.nextShapeId;\n    }\n  }\n}\nfunction b2ExecuteBlock(stage, context, block) {\n  const stageType = stage.type;\n  const startIndex = block.startIndex;\n  const endIndex = startIndex + block.count;\n  if (stageType === b2SolverStageType.b2_stageIntegrateVelocities) {\n    b2IntegrateVelocitiesTask(startIndex, endIndex, context);\n  } else if (stageType === b2SolverStageType.b2_stageIntegratePositions) {\n    b2IntegratePositionsTask(startIndex, endIndex, context);\n  } else {\n  }\n}\nfunction b2ExecuteMainStage(stage, context) {\n  const blockCount = stage.blockCount;\n  for (let i = 0; i < blockCount; i++) {\n    b2ExecuteBlock(stage, context, stage.blocks[i]);\n  }\n}\nfunction b2SolverTask(workerContext) {\n  const workerIndex = workerContext.workerIndex;\n  const context = workerContext.context;\n  const activeColorCount = context.activeColorCount;\n  const stages = context.stages;\n  if (workerIndex === 0) {\n    let stageIndex = 0;\n    b2ExecuteMainStage(stages[stageIndex], context);\n    stageIndex += 1;\n    b2ExecuteMainStage(stages[stageIndex], context);\n    stageIndex += 1;\n    b2PrepareOverflowJoints(context);\n    b2PrepareOverflowContacts(context);\n    const subStepCount = context.subStepCount;\n    for (let i = 0; i < subStepCount; ++i) {\n      let iterStageIndex = stageIndex;\n      b2ExecuteMainStage(stages[iterStageIndex], context);\n      iterStageIndex += 1;\n      b2WarmStartOverflowJoints(context);\n      b2WarmStartOverflowContacts(context);\n      for (let colorIndex = 0; colorIndex < activeColorCount; ++colorIndex) {\n        b2ExecuteMainStage(stages[iterStageIndex], context);\n        iterStageIndex += 1;\n      }\n      let useBias = true;\n      b2SolveOverflowJoints(context, useBias);\n      b2SolveOverflowContacts(context, useBias);\n      for (let colorIndex = 0; colorIndex < activeColorCount; ++colorIndex) {\n        b2ExecuteMainStage(stages[iterStageIndex], context);\n        iterStageIndex += 1;\n      }\n      b2ExecuteMainStage(stages[iterStageIndex], context);\n      iterStageIndex += 1;\n      useBias = false;\n      b2SolveOverflowJoints(context, useBias);\n      b2SolveOverflowContacts(context, useBias);\n      for (let colorIndex = 0; colorIndex < activeColorCount; ++colorIndex) {\n        b2ExecuteMainStage(stages[iterStageIndex], context);\n        iterStageIndex += 1;\n      }\n    }\n    stageIndex += 1 + activeColorCount + activeColorCount + 1 + activeColorCount;\n    {\n      b2ApplyOverflowRestitution(context);\n      let iterStageIndex = stageIndex;\n      for (let colorIndex = 0; colorIndex < activeColorCount; ++colorIndex) {\n        b2ExecuteMainStage(stages[iterStageIndex], context);\n        iterStageIndex += 1;\n      }\n      stageIndex += activeColorCount;\n    }\n    b2StoreOverflowImpulses(context);\n    b2ExecuteMainStage(stages[stageIndex], context);\n    context.atomicSyncBits = Number.MAX_SAFE_INTEGER;\n    return;\n  }\n}\nvar constSweep = new b2Sweep(new b2Vec2(), new b2Vec2(), new b2Vec2(), new b2Rot(), new b2Rot());\nfunction b2ContinuousQueryCallback(proxyId, shapeId, context) {\n  const continuousContext = context;\n  const fastShape = continuousContext.fastShape;\n  const fastBodySim = continuousContext.fastBodySim;\n  if (shapeId === fastShape.id) {\n    return true;\n  }\n  const world = continuousContext.world;\n  const shape = world.shapeArray[shapeId];\n  if (shape.bodyId === fastShape.bodyId) {\n    return true;\n  }\n  if (shape.isSensor === true) {\n    return true;\n  }\n  let canCollide = b2ShouldShapesCollide(fastShape.filter, shape.filter);\n  if (canCollide === false) {\n    return true;\n  }\n  const body = world.bodyArray[shape.bodyId];\n  const bodySim = b2GetBodySim(world, body);\n  if (bodySim.isBullet) {\n    return true;\n  }\n  const fastBody = world.bodyArray[fastBodySim.bodyId];\n  canCollide = b2ShouldBodiesCollide(world, fastBody, body);\n  if (canCollide === false) {\n    return true;\n  }\n  const customFilterFcn = world.customFilterFcn;\n  if (customFilterFcn != null) {\n    const idA = new b2ShapeId(shape.id + 1, world.worldId, shape.revision);\n    const idB = new b2ShapeId(fastShape.id + 1, world.worldId, fastShape.revision);\n    canCollide = customFilterFcn(idA, idB, world.customFilterContext);\n    if (canCollide === false) {\n      return true;\n    }\n  }\n  if (shape.type === b2ShapeType.b2_chainSegmentShape) {\n    const transform = bodySim.transform;\n    const p14 = b2TransformPoint(transform, shape.chainSegment.segment.point1);\n    const p23 = b2TransformPoint(transform, shape.chainSegment.segment.point2);\n    const eX = p23.x - p14.x;\n    const eY = p23.y - p14.y;\n    const c1X = continuousContext.centroid1X;\n    const c1Y = continuousContext.centroid1Y;\n    const c2X = continuousContext.centroid2X;\n    const c2Y = continuousContext.centroid2Y;\n    let dx = c1X - p14.x;\n    let dy = c1Y - p14.y;\n    const offset1 = dx * eY - dy * eX;\n    dx = c2X - p14.x;\n    dy = c2Y - p14.y;\n    const offset2 = dx * eY - dy * eX;\n    if (offset1 < 0 || offset2 > 0) {\n      return true;\n    }\n  }\n  const input = new b2TOIInput();\n  input.proxyA = b2MakeShapeDistanceProxy(shape);\n  input.proxyB = b2MakeShapeDistanceProxy(fastShape);\n  input.sweepA = b2MakeSweep(bodySim, constSweep);\n  input.sweepB = continuousContext.sweep;\n  input.tMax = continuousContext.fraction;\n  let hitFraction = continuousContext.fraction;\n  let didHit = false;\n  let output = b2TimeOfImpact(input);\n  if (0 < output.t && output.t < continuousContext.fraction) {\n    hitFraction = output.t;\n    didHit = true;\n  } else if (0 === output.t) {\n    const centroid = b2GetShapeCentroid(fastShape);\n    input.proxyB = b2MakeProxy([centroid], 1, b2_speculativeDistance);\n    output = b2TimeOfImpact(input);\n    if (0 < output.t && output.t < continuousContext.fraction) {\n      hitFraction = output.t;\n      didHit = true;\n    }\n  }\n  if (didHit && (shape.enablePreSolveEvents || fastShape.enablePreSolveEvents)) {\n    const transformA = b2GetSweepTransform(input.sweepA, hitFraction);\n    const transformB = b2GetSweepTransform(input.sweepB, hitFraction);\n    const manifold = new b2Manifold();\n    b2ComputeManifold(shape, transformA, fastShape, transformB, manifold);\n    const shapeIdA = new b2ShapeId(shape.id + 1, world.worldId, shape.revision);\n    const shapeIdB = new b2ShapeId(fastShape.id + 1, world.worldId, fastShape.revision);\n    didHit = world.preSolveFcn(shapeIdA, shapeIdB, manifold, world.preSolveContext);\n  }\n  if (didHit) {\n    continuousContext.fraction = hitFraction;\n  }\n  return true;\n}\nvar b2ContinuousContext = class {\n  constructor() {\n    this.world = null;\n    this.fastBodySim = null;\n    this.fastShape = null;\n    this.centroid1X = 0;\n    this.centroid1Y = 0;\n    this.centroid2X = 0;\n    this.centroid2Y = 0;\n    this.sweep = null;\n    this.fraction = 0;\n  }\n};\nvar p = new b2Vec2();\nvar p1 = new b2Vec2();\nvar constSweep2 = new b2Sweep(new b2Vec2(), new b2Vec2(), new b2Vec2(), new b2Rot(), new b2Rot());\nfunction b2SolveContinuous(world, bodySimIndex) {\n  const awakeSet = world.solverSetArray[b2SetType.b2_awakeSet];\n  const fastBodySim = awakeSet.sims.data[bodySimIndex];\n  const shapes = world.shapeArray;\n  const sweep = b2MakeSweep(fastBodySim, constSweep2);\n  p.x = sweep.c1.x - (sweep.q1.c * sweep.localCenter.x - sweep.q1.s * sweep.localCenter.y);\n  p.y = sweep.c1.y - (sweep.q1.s * sweep.localCenter.x + sweep.q1.c * sweep.localCenter.y);\n  const xf12 = new b2Transform(p, sweep.q1);\n  p1.x = sweep.c2.x - (sweep.q2.c * sweep.localCenter.x - sweep.q2.s * sweep.localCenter.y);\n  p1.y = sweep.c2.y - (sweep.q2.s * sweep.localCenter.x + sweep.q2.c * sweep.localCenter.y);\n  const xf2 = new b2Transform(p1, sweep.q2);\n  const staticTree = world.broadPhase.trees[b2BodyType.b2_staticBody];\n  const kinematicTree = world.broadPhase.trees[b2BodyType.b2_kinematicBody];\n  const dynamicTree = world.broadPhase.trees[b2BodyType.b2_dynamicBody];\n  const fastBody = world.bodyArray[fastBodySim.bodyId];\n  const context = new b2ContinuousContext();\n  context.world = world;\n  context.sweep = sweep;\n  context.fastBodySim = fastBodySim;\n  context.fraction = 1;\n  const isBullet = fastBodySim.isBullet;\n  let shapeId = fastBody.headShapeId;\n  while (shapeId != B2_NULL_INDEX) {\n    const fastShape = shapes[shapeId];\n    shapeId = fastShape.nextShapeId;\n    fastShape.isFast = false;\n    context.fastShape = fastShape;\n    b2TransformPointOut(xf12, fastShape.localCentroid, p);\n    context.centroid1X = p.x;\n    context.centroid1Y = p.y;\n    b2TransformPointOut(xf2, fastShape.localCentroid, p);\n    context.centroid2X = p.x;\n    context.centroid2Y = p.y;\n    const box1 = fastShape.aabb;\n    const box2 = b2ComputeShapeAABB(fastShape, xf2);\n    const box = b2AABB_Union(box1, box2);\n    fastShape.aabb = box2;\n    if (fastShape.isSensor) {\n      continue;\n    }\n    b2DynamicTree_Query(staticTree, box, B2_DEFAULT_MASK_BITS, b2ContinuousQueryCallback, context);\n    if (isBullet) {\n      b2DynamicTree_Query(kinematicTree, box, B2_DEFAULT_MASK_BITS, b2ContinuousQueryCallback, context);\n      b2DynamicTree_Query(dynamicTree, box, B2_DEFAULT_MASK_BITS, b2ContinuousQueryCallback, context);\n    }\n  }\n  const speculativeDistance = b2_speculativeDistance;\n  const aabbMargin = b2_aabbMargin;\n  if (context.fraction < 1) {\n    const q3 = b2NLerp(sweep.q1, sweep.q2, context.fraction);\n    const c2 = b2Lerp(sweep.c1, sweep.c2, context.fraction);\n    const origin = b2Sub(c2, b2RotateVector(q3, sweep.localCenter));\n    const transform = new b2Transform(origin, q3);\n    fastBodySim.transform = transform;\n    fastBodySim.center = c2;\n    fastBodySim.rotation0 = q3;\n    fastBodySim.center0X = c2.x;\n    fastBodySim.center0Y = c2.y;\n    shapeId = fastBody.headShapeId;\n    while (shapeId != B2_NULL_INDEX) {\n      const shape = shapes[shapeId];\n      const aabb = b2ComputeShapeAABB(shape, transform);\n      aabb.lowerBoundX -= speculativeDistance;\n      aabb.lowerBoundY -= speculativeDistance;\n      aabb.upperBoundX += speculativeDistance;\n      aabb.upperBoundY += speculativeDistance;\n      shape.aabb = aabb;\n      if (!b2AABB_Contains(shape.fatAABB, aabb)) {\n        const fatAABB = new b2AABB(\n          aabb.lowerBoundX - aabbMargin,\n          aabb.lowerBoundY - aabbMargin,\n          aabb.upperBoundX + aabbMargin,\n          aabb.upperBoundY + aabbMargin\n        );\n        shape.fatAABB = fatAABB;\n        shape.enlargedAABB = true;\n        fastBodySim.enlargeAABB = true;\n      }\n      shapeId = shape.nextShapeId;\n    }\n  } else {\n    fastBodySim.rotation0 = fastBodySim.transform.q;\n    fastBodySim.center0X = fastBodySim.center.x;\n    fastBodySim.center0Y = fastBodySim.center.y;\n    shapeId = fastBody.headShapeId;\n    while (shapeId != B2_NULL_INDEX) {\n      const shape = shapes[shapeId];\n      if (!b2AABB_Contains(shape.fatAABB, shape.aabb)) {\n        const fatAABB = new b2AABB(\n          shape.aabb.lowerBoundX - aabbMargin,\n          shape.aabb.lowerBoundY - aabbMargin,\n          shape.aabb.upperBoundX + aabbMargin,\n          shape.aabb.upperBoundY + aabbMargin\n        );\n        shape.fatAABB = fatAABB;\n        shape.enlargedAABB = true;\n        fastBodySim.enlargeAABB = true;\n      }\n      shapeId = shape.nextShapeId;\n    }\n  }\n}\nfunction b2FastBodyTask(startIndex, endIndex, taskContext) {\n  const stepContext = taskContext;\n  for (let i = startIndex; i < endIndex; ++i) {\n    const simIndex = stepContext.fastBodies[i];\n    b2SolveContinuous(stepContext.world, simIndex);\n  }\n}\nfunction b2BulletBodyTask(startIndex, endIndex, taskContext) {\n  const stepContext = taskContext;\n  for (let i = startIndex; i < endIndex; ++i) {\n    const simIndex = stepContext.bulletBodies[i];\n    b2SolveContinuous(stepContext.world, simIndex);\n  }\n}\nfunction b2Solve(world, stepContext) {\n  world.stepIndex += 1;\n  b2MergeAwakeIslands(world);\n  const awakeSet = world.solverSetArray[b2SetType.b2_awakeSet];\n  const awakeBodyCount = awakeSet.sims.count;\n  if (awakeBodyCount === 0) {\n    return;\n  }\n  stepContext.fastBodyCount = 0;\n  stepContext.fastBodies = b2AllocateStackItem(world.stackAllocator, awakeBodyCount, \"fast bodies\");\n  stepContext.bulletBodyCount = 0;\n  stepContext.bulletBodies = b2AllocateStackItem(world.stackAllocator, awakeBodyCount, \"bullet bodies\");\n  {\n    const graph = world.constraintGraph;\n    const colors = graph.colors;\n    stepContext.sims = awakeSet.sims.data;\n    stepContext.states = awakeSet.states.data;\n    let awakeJointCount = 0;\n    let activeColorCount = 0;\n    for (let i = 0; i < b2_graphColorCount - 1; ++i) {\n      const perColorContactCount = colors[i].contacts.count;\n      const perColorJointCount = colors[i].joints.count;\n      const occupancyCount = perColorContactCount + perColorJointCount;\n      activeColorCount += occupancyCount > 0 ? 1 : 0;\n      awakeJointCount += perColorJointCount;\n    }\n    {\n      const bodyMoveEventArray = world.bodyMoveEventArray;\n      while (bodyMoveEventArray.length < awakeBodyCount) {\n        bodyMoveEventArray.push(new b2BodyMoveEvent());\n      }\n    }\n    const workerCount = world.workerCount;\n    const blocksPerWorker = 4;\n    const maxBlockCount = blocksPerWorker * workerCount;\n    let bodyBlockSize = 1 << 5;\n    let bodyBlockCount;\n    if (awakeBodyCount > bodyBlockSize * maxBlockCount) {\n      bodyBlockSize = Math.floor(awakeBodyCount / maxBlockCount);\n      bodyBlockCount = maxBlockCount;\n    } else {\n      bodyBlockCount = Math.floor(awakeBodyCount - 1 >> 5) + 1;\n    }\n    const colorContactCounts = new Array(b2_graphColorCount);\n    const colorContactBlockSizes = new Array(b2_graphColorCount);\n    const colorContactBlockCounts = new Array(b2_graphColorCount);\n    const colorJointCounts = new Array(b2_graphColorCount);\n    const colorJointBlockSizes = new Array(b2_graphColorCount);\n    const colorJointBlockCounts = new Array(b2_graphColorCount);\n    const graphBlockCount = 0;\n    const simdContactCount = 0;\n    const overflowContactCount = colors[b2_overflowIndex].contacts.count;\n    const overflowContactConstraints = b2AllocateStackItem(\n      world.stackAllocator,\n      overflowContactCount,\n      \"overflow contact constraint\",\n      () => {\n        return new b2ContactConstraint();\n      }\n    );\n    graph.colors[b2_overflowIndex].overflowConstraints = overflowContactConstraints;\n    let contactBlockSize = blocksPerWorker;\n    let contactBlockCount = simdContactCount > 0 ? Math.floor(simdContactCount - 1 >> 2) + 1 : 0;\n    if (simdContactCount > contactBlockSize * maxBlockCount) {\n      contactBlockSize = Math.floor(simdContactCount / maxBlockCount);\n      contactBlockCount = maxBlockCount;\n    }\n    let jointBlockSize = blocksPerWorker;\n    let jointBlockCount = awakeJointCount > 0 ? Math.floor(awakeJointCount - 1 >> 2) + 1 : 0;\n    if (awakeJointCount > jointBlockSize * maxBlockCount) {\n      jointBlockSize = Math.floor(awakeJointCount / maxBlockCount);\n      jointBlockCount = maxBlockCount;\n    }\n    let stageCount = 0;\n    stageCount += 1;\n    stageCount += 1;\n    stageCount += 1;\n    stageCount += activeColorCount;\n    stageCount += activeColorCount;\n    stageCount += 1;\n    stageCount += activeColorCount;\n    stageCount += activeColorCount;\n    stageCount += 1;\n    const stages = Array.from({ length: stageCount }, () => new b2SolverStage());\n    const bodyBlocks = b2AllocateStackItem(world.stackAllocator, bodyBlockCount, \"body blocks\");\n    const contactBlocks = b2AllocateStackItem(world.stackAllocator, contactBlockCount, \"contact blocks\");\n    const jointBlocks = b2AllocateStackItem(world.stackAllocator, jointBlockCount, \"joint blocks\");\n    const graphBlocks = b2AllocateStackItem(world.stackAllocator, graphBlockCount, \"graph blocks\");\n    if (world.splitIslandId != B2_NULL_INDEX) {\n      b2SplitIsland(world, world.splitIslandId);\n    }\n    for (let i = 0; i < bodyBlockCount; ++i) {\n      const block = new b2SolverBlock();\n      block.startIndex = i * bodyBlockSize;\n      block.count = bodyBlockSize;\n      block.blockType = b2SolverBlockType.b2_bodyBlock;\n      block.syncIndex = 0;\n      bodyBlocks[i] = block;\n    }\n    bodyBlocks[bodyBlockCount - 1].count = awakeBodyCount - (bodyBlockCount - 1) * bodyBlockSize;\n    for (let i = 0; i < jointBlockCount; ++i) {\n      const block = new b2SolverBlock();\n      block.startIndex = i * jointBlockSize;\n      block.count = jointBlockSize;\n      block.blockType = b2SolverBlockType.b2_jointBlock;\n      block.syncIndex = 0;\n      jointBlocks[i] = block;\n    }\n    if (jointBlockCount > 0) {\n      jointBlocks[jointBlockCount - 1].count = awakeJointCount - (jointBlockCount - 1) * jointBlockSize;\n    }\n    for (let i = 0; i < contactBlockCount; ++i) {\n      const block = new b2SolverBlock();\n      block.startIndex = i * contactBlockSize;\n      block.count = contactBlockSize;\n      block.blockType = b2SolverBlockType.b2_contactBlock;\n      block.syncIndex = 0;\n      contactBlocks[i] = block;\n    }\n    if (contactBlockCount > 0) {\n      contactBlocks[contactBlockCount - 1].count = simdContactCount - (contactBlockCount - 1) * contactBlockSize;\n    }\n    const graphColorBlocks = new Array(b2_graphColorCount);\n    let baseGraphBlock = 0;\n    for (let i = 0; i < activeColorCount; ++i) {\n      graphColorBlocks[i] = baseGraphBlock;\n      const colorJointBlockCount = colorJointBlockCounts[i];\n      const colorJointBlockSize = colorJointBlockSizes[i];\n      for (let j = 0; j < colorJointBlockCount; ++j) {\n        const block = new b2SolverBlock();\n        block.startIndex = j * colorJointBlockSize;\n        block.count = colorJointBlockSize;\n        block.blockType = b2SolverBlockType.b2_graphJointBlock;\n        block.syncIndex = 0;\n        graphBlocks[baseGraphBlock + j] = block;\n      }\n      if (colorJointBlockCount > 0) {\n        graphBlocks[baseGraphBlock + colorJointBlockCount - 1].count = colorJointCounts[i] - (colorJointBlockCount - 1) * colorJointBlockSize;\n        baseGraphBlock += colorJointBlockCount;\n      }\n      const colorContactBlockCount = colorContactBlockCounts[i];\n      const colorContactBlockSize = colorContactBlockSizes[i];\n      for (let j = 0; j < colorContactBlockCount; ++j) {\n        const block = new b2SolverBlock();\n        block.startIndex = j * colorContactBlockSize;\n        block.count = colorContactBlockSize;\n        block.blockType = b2SolverBlockType.b2_graphContactBlock;\n        block.syncIndex = 0;\n        graphBlocks[baseGraphBlock + j] = block;\n      }\n      if (colorContactBlockCount > 0) {\n        graphBlocks[baseGraphBlock + colorContactBlockCount - 1].count = colorContactCounts[i] - (colorContactBlockCount - 1) * colorContactBlockSize;\n        baseGraphBlock += colorContactBlockCount;\n      }\n    }\n    const blockDiff = baseGraphBlock;\n    let si = 0;\n    const setStageProperties = (stage, type, blocks, blockCount, colorIndex = -1) => {\n      stage.type = type;\n      stage.blocks = blocks;\n      stage.blockCount = blockCount;\n      stage.colorIndex = colorIndex;\n      stage.completionCount = 0;\n    };\n    setStageProperties(stages[si++], b2SolverStageType.b2_stagePrepareJoints, jointBlocks, jointBlockCount);\n    setStageProperties(stages[si++], b2SolverStageType.b2_stagePrepareContacts, contactBlocks, contactBlockCount);\n    setStageProperties(stages[si++], b2SolverStageType.b2_stageIntegrateVelocities, bodyBlocks, bodyBlockCount);\n    setStageProperties(stages[si++], b2SolverStageType.b2_stageIntegratePositions, bodyBlocks, bodyBlockCount);\n    setStageProperties(stages[si++], b2SolverStageType.b2_stageStoreImpulses, contactBlocks, contactBlockCount);\n    stepContext.graph = graph;\n    stepContext.joints = null;\n    stepContext.contacts = null;\n    stepContext.simdContactConstraints = null;\n    stepContext.activeColorCount = activeColorCount;\n    stepContext.workerCount = workerCount;\n    stepContext.stageCount = stageCount;\n    stepContext.stages = stages;\n    {\n      const workerContext = new b2WorkerContext();\n      workerContext.context = stepContext;\n      workerContext.workerIndex = 0;\n      b2SolverTask(workerContext);\n    }\n    world.splitIslandId = B2_NULL_INDEX;\n    const awakeIslandCount = awakeSet.islands.count;\n    for (let i = 0; i < world.workerCount; ++i) {\n      const taskContext = world.taskContextArray[i];\n      taskContext.enlargedSimBitSet = b2SetBitCountAndClear(taskContext.enlargedSimBitSet, awakeBodyCount);\n      taskContext.awakeIslandBitSet = b2SetBitCountAndClear(taskContext.awakeIslandBitSet, awakeIslandCount);\n      taskContext.splitIslandId = B2_NULL_INDEX;\n      taskContext.splitSleepTime = 0;\n    }\n    b2FinalizeBodiesTask(0, awakeBodyCount, 0, stepContext);\n    b2FreeStackItem(world.stackAllocator, graphBlocks);\n    b2FreeStackItem(world.stackAllocator, jointBlocks);\n    b2FreeStackItem(world.stackAllocator, contactBlocks);\n    b2FreeStackItem(world.stackAllocator, bodyBlocks);\n    b2FreeStackItem(world.stackAllocator, overflowContactConstraints);\n  }\n  {\n    const threshold = world.hitEventThreshold;\n    const colors = world.constraintGraph.colors;\n    for (let i = 0; i < b2_graphColorCount; ++i) {\n      const color = colors[i];\n      const contactCount = color.contacts.count;\n      const contactSims = color.contacts.data;\n      for (let j = 0; j < contactCount; ++j) {\n        const contactSim = contactSims[j];\n        if ((contactSim.simFlags & b2ContactSimFlags.b2_simEnableHitEvent) === 0) {\n          continue;\n        }\n        const event = new b2ContactHitEvent();\n        event.approachSpeed = threshold;\n        event.shapeIdA = new b2ShapeId(0, 0, 0);\n        event.shapeIdB = new b2ShapeId(0, 0, 0);\n        let hit = false;\n        const pointCount = contactSim.manifold.pointCount;\n        for (let k = 0; k < pointCount; ++k) {\n          const mp = contactSim.manifold.points[k];\n          const approachSpeed = -mp.normalVelocity;\n          if (approachSpeed > event.approachSpeed && mp.maxNormalImpulse > 0) {\n            event.approachSpeed = approachSpeed;\n            event.pointX = mp.pointX;\n            event.pointY = mp.pointY;\n            hit = true;\n          }\n        }\n        if (hit === true) {\n          event.normalX = contactSim.manifold.normalX;\n          event.normalY = contactSim.manifold.normalY;\n          const shapeA = world.shapeArray[contactSim.shapeIdA];\n          const shapeB = world.shapeArray[contactSim.shapeIdB];\n          event.shapeIdA = new b2ShapeId(shapeA.id + 1, world.worldId, shapeA.revision);\n          event.shapeIdB = new b2ShapeId(shapeB.id + 1, world.worldId, shapeB.revision);\n          world.contactHitArray.push(event);\n        }\n      }\n    }\n  }\n  const simBitSet = world.taskContextArray[0].enlargedSimBitSet;\n  for (let i = 1; i < world.workerCount; ++i) {\n    b2InPlaceUnion(simBitSet, world.taskContextArray[i].enlargedSimBitSet);\n  }\n  {\n    const broadPhase = world.broadPhase;\n    const shapes = world.shapeArray;\n    const wordCount = simBitSet.blockCount;\n    const bits = simBitSet.bits;\n    for (let k = 0; k < wordCount; ++k) {\n      let word = bits[k];\n      while (word !== 0n) {\n        const ctz = b2CTZ64(word);\n        const bodySimIndex = 64 * k + ctz;\n        const bodySim = awakeSet.sims.data[bodySimIndex];\n        const body = world.bodyArray[bodySim.bodyId];\n        let shapeId = body.headShapeId;\n        while (shapeId !== B2_NULL_INDEX) {\n          const shape = shapes[shapeId];\n          if (shape.enlargedAABB) {\n            b2BroadPhase_EnlargeProxy(broadPhase, shape.proxyKey, shape.fatAABB);\n            shape.enlargedAABB = false;\n          } else if (shape.isFast) {\n            b2BufferMove(broadPhase, shape.proxyKey);\n          }\n          shapeId = shape.nextShapeId;\n        }\n        word = word & word - 1n;\n      }\n    }\n  }\n  if (stepContext.fastBodyCount > 0) {\n    b2FastBodyTask(0, stepContext.fastBodyCount, stepContext);\n  }\n  {\n    const broadPhase = world.broadPhase;\n    const dynamicTree = broadPhase.trees[b2BodyType.b2_dynamicBody];\n    const bodies = world.bodyArray;\n    const shapes = world.shapeArray;\n    const fastBodies = stepContext.fastBodies;\n    const fastBodyCount = stepContext.fastBodyCount;\n    for (let i = 0; i < fastBodyCount; ++i) {\n      const fastBodySim = awakeSet.sims.data[fastBodies[i]];\n      if (fastBodySim.enlargeAABB === false) {\n        continue;\n      }\n      fastBodySim.enlargeAABB = false;\n      const fastBody = bodies[fastBodySim.bodyId];\n      let shapeId = fastBody.headShapeId;\n      while (shapeId !== B2_NULL_INDEX) {\n        const shape = shapes[shapeId];\n        if (shape.enlargedAABB === false) {\n          shapeId = shape.nextShapeId;\n          continue;\n        }\n        shape.enlargedAABB = false;\n        const proxyKey = shape.proxyKey;\n        const proxyId = B2_PROXY_ID(proxyKey);\n        b2DynamicTree_EnlargeProxy(dynamicTree, proxyId, shape.fatAABB);\n        shapeId = shape.nextShapeId;\n      }\n    }\n  }\n  if (stepContext.bulletBodyCount > 0) {\n    b2BulletBodyTask(0, stepContext.bulletBodyCount, stepContext);\n  }\n  {\n    const broadPhase = world.broadPhase;\n    const dynamicTree = broadPhase.trees[b2BodyType.b2_dynamicBody];\n    const bodies = world.bodyArray;\n    const shapes = world.shapeArray;\n    const bulletBodies = stepContext.bulletBodies;\n    const bulletBodyCount = stepContext.bulletBodyCount;\n    for (let i = 0; i < bulletBodyCount; ++i) {\n      const bulletBodySim = awakeSet.sims.data[bulletBodies[i]];\n      if (bulletBodySim.enlargeAABB === false) {\n        continue;\n      }\n      bulletBodySim.enlargeAABB = false;\n      const bulletBody = bodies[bulletBodySim.bodyId];\n      let shapeId = bulletBody.headShapeId;\n      while (shapeId !== B2_NULL_INDEX) {\n        const shape = shapes[shapeId];\n        if (shape.enlargedAABB === false) {\n          shapeId = shape.nextShapeId;\n          continue;\n        }\n        shape.enlargedAABB = false;\n        const proxyKey = shape.proxyKey;\n        const proxyId = B2_PROXY_ID(proxyKey);\n        b2DynamicTree_EnlargeProxy(dynamicTree, proxyId, shape.fatAABB);\n        shapeId = shape.nextShapeId;\n      }\n    }\n  }\n  b2FreeStackItem(world.stackAllocator, stepContext.bulletBodies);\n  stepContext.bulletBodies = null;\n  stepContext.bulletBodyCount = 0;\n  b2FreeStackItem(world.stackAllocator, stepContext.fastBodies);\n  stepContext.fastBodies = null;\n  stepContext.fastBodyCount = 0;\n  if (world.enableSleep === true) {\n    let splitSleepTimer = 0;\n    for (let i = 0; i < world.workerCount; ++i) {\n      const taskContext = world.taskContextArray[i];\n      if (taskContext.splitIslandId !== B2_NULL_INDEX && taskContext.splitSleepTime > splitSleepTimer) {\n        world.splitIslandId = taskContext.splitIslandId;\n        splitSleepTimer = taskContext.splitSleepTime;\n      }\n    }\n    const awakeIslandBitSet = world.taskContextArray[0].awakeIslandBitSet;\n    for (let i = 1; i < world.workerCount; ++i) {\n      b2InPlaceUnion(awakeIslandBitSet, world.taskContextArray[i].awakeIslandBitSet);\n    }\n    const islands = awakeSet.islands.data;\n    const count = awakeSet.islands.count;\n    for (let islandIndex = count - 1; islandIndex >= 0; islandIndex -= 1) {\n      if (b2GetBit(awakeIslandBitSet, islandIndex) === true) {\n        continue;\n      }\n      const island = islands[islandIndex];\n      const islandId = island.islandId;\n      b2TrySleepIsland(world, islandId);\n    }\n    b2ValidateSolverSets(world);\n  }\n}\n\n// src/distance_joint_c.js\nfunction b2DistanceJoint_SetLength(jointId, length) {\n  const base = b2GetJointSimCheckType(jointId, b2JointType.b2_distanceJoint);\n  const joint = base.distanceJoint;\n  joint.length = b2ClampFloat(length, b2_linearSlop, B2_HUGE);\n  joint.impulse = 0;\n  joint.lowerImpulse = 0;\n  joint.upperImpulse = 0;\n}\nfunction b2DistanceJoint_GetLength(jointId) {\n  const base = b2GetJointSimCheckType(jointId, b2JointType.b2_distanceJoint);\n  const joint = base.distanceJoint;\n  return joint.length;\n}\nfunction b2DistanceJoint_EnableLimit(jointId, enableLimit) {\n  const base = b2GetJointSimCheckType(jointId, b2JointType.b2_distanceJoint);\n  const joint = base.distanceJoint;\n  joint.enableLimit = enableLimit;\n}\nfunction b2DistanceJoint_IsLimitEnabled(jointId) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_distanceJoint);\n  return joint.distanceJoint.enableLimit;\n}\nfunction b2DistanceJoint_SetLengthRange(jointId, minLength, maxLength) {\n  const base = b2GetJointSimCheckType(jointId, b2JointType.b2_distanceJoint);\n  const joint = base.distanceJoint;\n  minLength = b2ClampFloat(minLength, b2_linearSlop, B2_HUGE);\n  maxLength = b2ClampFloat(maxLength, b2_linearSlop, B2_HUGE);\n  joint.minLength = Math.min(minLength, maxLength);\n  joint.maxLength = Math.max(minLength, maxLength);\n  joint.impulse = 0;\n  joint.lowerImpulse = 0;\n  joint.upperImpulse = 0;\n}\nfunction b2DistanceJoint_GetMinLength(jointId) {\n  const base = b2GetJointSimCheckType(jointId, b2JointType.b2_distanceJoint);\n  const joint = base.distanceJoint;\n  return joint.minLength;\n}\nfunction b2DistanceJoint_GetMaxLength(jointId) {\n  const base = b2GetJointSimCheckType(jointId, b2JointType.b2_distanceJoint);\n  const joint = base.distanceJoint;\n  return joint.maxLength;\n}\nfunction b2DistanceJoint_GetCurrentLength(jointId) {\n  const base = b2GetJointSimCheckType(jointId, b2JointType.b2_distanceJoint);\n  const world = b2GetWorld(jointId.world0);\n  if (world.locked) {\n    return 0;\n  }\n  const transformA = b2GetBodyTransform(world, base.bodyIdA);\n  const transformB = b2GetBodyTransform(world, base.bodyIdB);\n  const pA = b2TransformPoint(transformA, base.localOriginAnchorA);\n  const pB = b2TransformPoint(transformB, base.localOriginAnchorB);\n  const d = b2Sub(pB, pA);\n  const length = b2Length(d);\n  return length;\n}\nfunction b2DistanceJoint_EnableSpring(jointId, enableSpring) {\n  const base = b2GetJointSimCheckType(jointId, b2JointType.b2_distanceJoint);\n  base.distanceJoint.enableSpring = enableSpring;\n}\nfunction b2DistanceJoint_IsSpringEnabled(jointId) {\n  const base = b2GetJointSimCheckType(jointId, b2JointType.b2_distanceJoint);\n  return base.distanceJoint.enableSpring;\n}\nfunction b2DistanceJoint_SetSpringHertz(jointId, hertz) {\n  const base = b2GetJointSimCheckType(jointId, b2JointType.b2_distanceJoint);\n  base.distanceJoint.hertz = hertz;\n}\nfunction b2DistanceJoint_SetSpringDampingRatio(jointId, dampingRatio) {\n  const base = b2GetJointSimCheckType(jointId, b2JointType.b2_distanceJoint);\n  base.distanceJoint.dampingRatio = dampingRatio;\n}\nfunction b2DistanceJoint_GetHertz(jointId) {\n  const base = b2GetJointSimCheckType(jointId, b2JointType.b2_distanceJoint);\n  const joint = base.distanceJoint;\n  return joint.hertz;\n}\nfunction b2DistanceJoint_GetDampingRatio(jointId) {\n  const base = b2GetJointSimCheckType(jointId, b2JointType.b2_distanceJoint);\n  const joint = base.distanceJoint;\n  return joint.dampingRatio;\n}\nfunction b2DistanceJoint_EnableMotor(jointId, enableMotor) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_distanceJoint);\n  if (enableMotor !== joint.distanceJoint.enableMotor) {\n    joint.distanceJoint.enableMotor = enableMotor;\n    joint.distanceJoint.motorImpulse = 0;\n  }\n}\nfunction b2DistanceJoint_IsMotorEnabled(jointId) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_distanceJoint);\n  return joint.distanceJoint.enableMotor;\n}\nfunction b2DistanceJoint_SetMotorSpeed(jointId, motorSpeed) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_distanceJoint);\n  joint.distanceJoint.motorSpeed = motorSpeed;\n}\nfunction b2DistanceJoint_GetMotorSpeed(jointId) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_distanceJoint);\n  return joint.distanceJoint.motorSpeed;\n}\nfunction b2DistanceJoint_GetMotorForce(jointId) {\n  const world = b2GetWorld(jointId.world0);\n  const base = b2GetJointSimCheckType(jointId, b2JointType.b2_distanceJoint);\n  return world.inv_h * base.distanceJoint.motorImpulse;\n}\nfunction b2DistanceJoint_SetMaxMotorForce(jointId, force) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_distanceJoint);\n  joint.distanceJoint.maxMotorForce = force;\n}\nfunction b2DistanceJoint_GetMaxMotorForce(jointId) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_distanceJoint);\n  return joint.distanceJoint.maxMotorForce;\n}\nfunction b2GetDistanceJointForce(world, base) {\n  const joint = base.distanceJoint;\n  const transformA = b2GetBodyTransform(world, base.bodyIdA);\n  const transformB = b2GetBodyTransform(world, base.bodyIdB);\n  const pA = b2TransformPoint(transformA, base.localOriginAnchorA);\n  const pB = b2TransformPoint(transformB, base.localOriginAnchorB);\n  const d = b2Sub(pB, pA);\n  const axis = b2Normalize(d);\n  const force = (joint.impulse + joint.lowerImpulse - joint.upperImpulse + joint.motorImpulse) * world.inv_h;\n  return b2MulSV(force, axis);\n}\nfunction b2PrepareDistanceJoint(base, context) {\n  const world = context.world;\n  const bodies = world.bodyArray;\n  const idA = base.bodyIdA;\n  const idB = base.bodyIdB;\n  const bodyA = bodies[idA];\n  const bodyB = bodies[idB];\n  const setA = world.solverSetArray[bodyA.setIndex];\n  const setB = world.solverSetArray[bodyB.setIndex];\n  const bodySimA = setA.sims.data[bodyA.localIndex];\n  const bodySimB = setB.sims.data[bodyB.localIndex];\n  const mA = bodySimA.invMass;\n  const iA = bodySimA.invInertia;\n  const mB = bodySimB.invMass;\n  const iB = bodySimB.invInertia;\n  base.invMassA = mA;\n  base.invMassB = mB;\n  base.invIA = iA;\n  base.invIB = iB;\n  const joint = base.distanceJoint;\n  joint.indexA = bodyA.setIndex === b2SetType.b2_awakeSet ? bodyA.localIndex : B2_NULL_INDEX;\n  joint.indexB = bodyB.setIndex === b2SetType.b2_awakeSet ? bodyB.localIndex : B2_NULL_INDEX;\n  joint.anchorA = b2RotateVector(bodySimA.transform.q, b2Sub(base.localOriginAnchorA, bodySimA.localCenter));\n  joint.anchorB = b2RotateVector(bodySimB.transform.q, b2Sub(base.localOriginAnchorB, bodySimB.localCenter));\n  joint.deltaCenter = b2Sub(bodySimB.center, bodySimA.center);\n  const rA = joint.anchorA;\n  const rB = joint.anchorB;\n  const separation = b2Add(b2Sub(rB, rA), joint.deltaCenter);\n  const axis = b2Normalize(separation);\n  const crA = b2Cross(rA, axis);\n  const crB = b2Cross(rB, axis);\n  const k = mA + mB + iA * crA * crA + iB * crB * crB;\n  joint.axialMass = k > 0 ? 1 / k : 0;\n  joint.distanceSoftness = b2MakeSoft(joint.hertz, joint.dampingRatio, context.h);\n  if (context.enableWarmStarting === false) {\n    joint.impulse = 0;\n    joint.lowerImpulse = 0;\n    joint.upperImpulse = 0;\n    joint.motorImpulse = 0;\n  }\n}\nfunction b2WarmStartDistanceJoint(base, context) {\n  const mA = base.invMassA;\n  const mB = base.invMassB;\n  const iA = base.invIA;\n  const iB = base.invIB;\n  const dummyState = new b2BodyState();\n  const joint = base.distanceJoint;\n  const stateA = joint.indexA === B2_NULL_INDEX ? dummyState : context.states[joint.indexA];\n  const stateB = joint.indexB === B2_NULL_INDEX ? dummyState : context.states[joint.indexB];\n  const rA = b2RotateVector(stateA.deltaRotation, joint.anchorA);\n  const rB = b2RotateVector(stateB.deltaRotation, joint.anchorB);\n  const ds = b2Add(b2Sub(stateB.deltaPosition, stateA.deltaPosition), b2Sub(rB, rA));\n  const separation = b2Add(joint.deltaCenter, ds);\n  const axis = b2Normalize(separation);\n  const axialImpulse = joint.impulse + joint.lowerImpulse - joint.upperImpulse + joint.motorImpulse;\n  const P = b2MulSV(axialImpulse, axis);\n  stateA.linearVelocity = b2MulSub(stateA.linearVelocity, mA, P);\n  stateA.angularVelocity -= iA * b2Cross(rA, P);\n  stateB.linearVelocity = b2MulAdd(stateB.linearVelocity, mB, P);\n  stateB.angularVelocity += iB * b2Cross(rB, P);\n}\nfunction b2SolveDistanceJoint(base, context, useBias) {\n  const mA = base.invMassA;\n  const mB = base.invMassB;\n  const iA = base.invIA;\n  const iB = base.invIB;\n  const dummyState = new b2BodyState();\n  const joint = base.distanceJoint;\n  const stateA = joint.indexA === B2_NULL_INDEX ? dummyState : context.states[joint.indexA];\n  const stateB = joint.indexB === B2_NULL_INDEX ? dummyState : context.states[joint.indexB];\n  let vA = stateA.linearVelocity;\n  let wA = stateA.angularVelocity;\n  let vB = stateB.linearVelocity;\n  let wB = stateB.angularVelocity;\n  const rA = b2RotateVector(stateA.deltaRotation, joint.anchorA);\n  const rB = b2RotateVector(stateB.deltaRotation, joint.anchorB);\n  const ds = b2Add(b2Sub(stateB.deltaPosition, stateA.deltaPosition), b2Sub(rB, rA));\n  const separation = b2Add(joint.deltaCenter, ds);\n  const length = b2Length(separation);\n  const axis = b2Normalize(separation);\n  if (joint.enableSpring && (joint.minLength < joint.maxLength || joint.enableLimit === false)) {\n    if (joint.hertz > 0) {\n      const vr = b2Add(b2Sub(vB, vA), b2Sub(b2CrossSV(wB, rB), b2CrossSV(wA, rA)));\n      const Cdot = b2Dot(axis, vr);\n      const C = length - joint.length;\n      const bias = joint.distanceSoftness.biasRate * C;\n      const m = joint.distanceSoftness.massScale * joint.axialMass;\n      const impulse = -m * (Cdot + bias) - joint.distanceSoftness.impulseScale * joint.impulse;\n      joint.impulse += impulse;\n      const P = b2MulSV(impulse, axis);\n      vA = b2MulSub(vA, mA, P);\n      wA -= iA * b2Cross(rA, P);\n      vB = b2MulAdd(vB, mB, P);\n      wB += iB * b2Cross(rB, P);\n    }\n    if (joint.enableLimit) {\n      {\n        const vr = b2Add(b2Sub(vB, vA), b2Sub(b2CrossSV(wB, rB), b2CrossSV(wA, rA)));\n        const Cdot = b2Dot(axis, vr);\n        const C = length - joint.minLength;\n        let bias = 0;\n        let massCoeff = 1;\n        let impulseCoeff = 0;\n        if (C > 0) {\n          bias = C * context.inv_h;\n        } else if (useBias) {\n          bias = context.jointSoftness.biasRate * C;\n          massCoeff = context.jointSoftness.massScale;\n          impulseCoeff = context.jointSoftness.impulseScale;\n        }\n        const impulse = -massCoeff * joint.axialMass * (Cdot + bias) - impulseCoeff * joint.lowerImpulse;\n        const newImpulse = Math.max(0, joint.lowerImpulse + impulse);\n        const deltaImpulse = newImpulse - joint.lowerImpulse;\n        joint.lowerImpulse = newImpulse;\n        const P = b2MulSV(deltaImpulse, axis);\n        vA = b2MulSub(vA, mA, P);\n        wA -= iA * b2Cross(rA, P);\n        vB = b2MulAdd(vB, mB, P);\n        wB += iB * b2Cross(rB, P);\n      }\n      {\n        const vr = b2Add(b2Sub(vA, vB), b2Sub(b2CrossSV(wA, rA), b2CrossSV(wB, rB)));\n        const Cdot = b2Dot(axis, vr);\n        const C = joint.maxLength - length;\n        let bias = 0;\n        let massScale = 1;\n        let impulseScale = 0;\n        if (C > 0) {\n          bias = C * context.inv_h;\n        } else if (useBias) {\n          bias = context.jointSoftness.biasRate * C;\n          massScale = context.jointSoftness.massScale;\n          impulseScale = context.jointSoftness.impulseScale;\n        }\n        const impulse = -massScale * joint.axialMass * (Cdot + bias) - impulseScale * joint.upperImpulse;\n        const newImpulse = Math.max(0, joint.upperImpulse + impulse);\n        const deltaImpulse = newImpulse - joint.upperImpulse;\n        joint.upperImpulse = newImpulse;\n        const P = b2MulSV(-deltaImpulse, axis);\n        vA = b2MulSub(vA, mA, P);\n        wA -= iA * b2Cross(rA, P);\n        vB = b2MulAdd(vB, mB, P);\n        wB += iB * b2Cross(rB, P);\n      }\n    }\n    if (joint.enableMotor) {\n      const vr = b2Add(b2Sub(vB, vA), b2Sub(b2CrossSV(wB, rB), b2CrossSV(wA, rA)));\n      const Cdot = b2Dot(axis, vr);\n      const impulse = joint.axialMass * (joint.motorSpeed - Cdot);\n      const oldImpulse = joint.motorImpulse;\n      const maxImpulse = context.h * joint.maxMotorForce;\n      joint.motorImpulse = b2ClampFloat(joint.motorImpulse + impulse, -maxImpulse, maxImpulse);\n      const deltaImpulse = joint.motorImpulse - oldImpulse;\n      const P = b2MulSV(deltaImpulse, axis);\n      vA = b2MulSub(vA, mA, P);\n      wA -= iA * b2Cross(rA, P);\n      vB = b2MulAdd(vB, mB, P);\n      wB += iB * b2Cross(rB, P);\n    }\n  } else {\n    const vr = b2Add(b2Sub(vB, vA), b2Sub(b2CrossSV(wB, rB), b2CrossSV(wA, rA)));\n    const Cdot = b2Dot(axis, vr);\n    const C = length - joint.length;\n    let bias = 0;\n    let massScale = 1;\n    let impulseScale = 0;\n    if (useBias) {\n      bias = context.jointSoftness.biasRate * C;\n      massScale = context.jointSoftness.massScale;\n      impulseScale = context.jointSoftness.impulseScale;\n    }\n    const impulse = -massScale * joint.axialMass * (Cdot + bias) - impulseScale * joint.impulse;\n    joint.impulse += impulse;\n    const P = b2MulSV(impulse, axis);\n    vA = b2MulSub(vA, mA, P);\n    wA -= iA * b2Cross(rA, P);\n    vB = b2MulAdd(vB, mB, P);\n    wB += iB * b2Cross(rB, P);\n  }\n  stateA.linearVelocity = vA;\n  stateA.angularVelocity = wA;\n  stateB.linearVelocity = vB;\n  stateB.angularVelocity = wB;\n}\nfunction b2DrawDistanceJoint(draw, base, transformA, transformB) {\n  const joint = base.distanceJoint;\n  const pA = b2TransformPoint(transformA, base.localOriginAnchorA);\n  const pB = b2TransformPoint(transformB, base.localOriginAnchorB);\n  const axis = b2Normalize(b2Sub(pB, pA));\n  if (joint.minLength < joint.maxLength && joint.enableLimit) {\n    const pMin = b2MulAdd(pA, joint.minLength, axis);\n    const pMax = b2MulAdd(pA, joint.maxLength, axis);\n    const offset = b2MulSV(0.05 * b2_lengthUnitsPerMeter2, b2RightPerp(axis));\n    if (joint.minLength > b2_linearSlop) {\n      draw.DrawSegment(b2Sub(pMin, offset), b2Add(pMin, offset), b2HexColor.b2_colorLightGreen, draw.context);\n    }\n    if (joint.maxLength < B2_HUGE) {\n      draw.DrawSegment(b2Sub(pMax, offset), b2Add(pMax, offset), b2HexColor.b2_colorRed, draw.context);\n    }\n    if (joint.minLength > b2_linearSlop && joint.maxLength < B2_HUGE) {\n      draw.DrawSegment(pMin, pMax, b2HexColor.b2_colorGray, draw.context);\n    }\n  }\n  draw.DrawSegment(pA, pB, b2HexColor.b2_colorWhite, draw.context);\n  draw.DrawPoint(pA.x, pA.y, 4, b2HexColor.b2_colorWhite, draw.context);\n  draw.DrawPoint(pB.x, pB.y, 4, b2HexColor.b2_colorWhite, draw.context);\n  if (joint.hertz > 0 && joint.enableSpring) {\n    const pRest = b2MulAdd(pA, joint.length, axis);\n    draw.DrawPoint(pRest.x, pRest.y, 4, b2HexColor.b2_colorBlue, draw.context);\n  }\n}\n\n// src/prismatic_joint_c.js\nfunction b2PrismaticJoint_EnableSpring(jointId, enableSpring) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_prismaticJoint);\n  if (enableSpring !== joint.prismaticJoint.enableSpring) {\n    joint.prismaticJoint.enableSpring = enableSpring;\n    joint.prismaticJoint.springImpulse = 0;\n  }\n}\nfunction b2PrismaticJoint_IsSpringEnabled(jointId) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_prismaticJoint);\n  return joint.prismaticJoint.enableSpring;\n}\nfunction b2PrismaticJoint_SetSpringHertz(jointId, hertz) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_prismaticJoint);\n  joint.prismaticJoint.hertz = hertz;\n}\nfunction b2PrismaticJoint_GetSpringHertz(jointId) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_prismaticJoint);\n  return joint.prismaticJoint.hertz;\n}\nfunction b2PrismaticJoint_SetSpringDampingRatio(jointId, dampingRatio) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_prismaticJoint);\n  joint.prismaticJoint.dampingRatio = dampingRatio;\n}\nfunction b2PrismaticJoint_GetSpringDampingRatio(jointId) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_prismaticJoint);\n  return joint.prismaticJoint.dampingRatio;\n}\nfunction b2PrismaticJoint_EnableLimit(jointId, enableLimit) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_prismaticJoint);\n  if (enableLimit !== joint.prismaticJoint.enableLimit) {\n    joint.prismaticJoint.enableLimit = enableLimit;\n    joint.prismaticJoint.lowerImpulse = 0;\n    joint.prismaticJoint.upperImpulse = 0;\n  }\n}\nfunction b2PrismaticJoint_IsLimitEnabled(jointId) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_prismaticJoint);\n  return joint.prismaticJoint.enableLimit;\n}\nfunction b2PrismaticJoint_GetLowerLimit(jointId) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_prismaticJoint);\n  return joint.prismaticJoint.lowerTranslation;\n}\nfunction b2PrismaticJoint_GetUpperLimit(jointId) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_prismaticJoint);\n  return joint.prismaticJoint.upperTranslation;\n}\nfunction b2PrismaticJoint_SetLimits(jointId, lower, upper) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_prismaticJoint);\n  if (lower !== joint.prismaticJoint.lowerTranslation || upper !== joint.prismaticJoint.upperTranslation) {\n    joint.prismaticJoint.lowerTranslation = Math.min(lower, upper);\n    joint.prismaticJoint.upperTranslation = Math.max(lower, upper);\n    joint.prismaticJoint.lowerImpulse = 0;\n    joint.prismaticJoint.upperImpulse = 0;\n  }\n}\nfunction b2PrismaticJoint_EnableMotor(jointId, enableMotor) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_prismaticJoint);\n  if (enableMotor !== joint.prismaticJoint.enableMotor) {\n    joint.prismaticJoint.enableMotor = enableMotor;\n    joint.prismaticJoint.motorImpulse = 0;\n  }\n}\nfunction b2PrismaticJoint_IsMotorEnabled(jointId) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_prismaticJoint);\n  return joint.prismaticJoint.enableMotor;\n}\nfunction b2PrismaticJoint_SetMotorSpeed(jointId, motorSpeed) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_prismaticJoint);\n  joint.prismaticJoint.motorSpeed = motorSpeed;\n}\nfunction b2PrismaticJoint_GetMotorSpeed(jointId) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_prismaticJoint);\n  return joint.prismaticJoint.motorSpeed;\n}\nfunction b2PrismaticJoint_GetMotorForce(jointId) {\n  const world = b2GetWorld(jointId.world0);\n  const base = b2GetJointSimCheckType(jointId, b2JointType.b2_prismaticJoint);\n  return world.inv_h * base.prismaticJoint.motorImpulse;\n}\nfunction b2PrismaticJoint_SetMaxMotorForce(jointId, force) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_prismaticJoint);\n  joint.prismaticJoint.maxMotorForce = force;\n}\nfunction b2PrismaticJoint_GetMaxMotorForce(jointId) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_prismaticJoint);\n  return joint.prismaticJoint.maxMotorForce;\n}\nfunction b2GetPrismaticJointForce(world, base) {\n  const idA = base.bodyIdA;\n  const transformA = b2GetBodyTransform(world, idA);\n  const joint = base.prismaticJoint;\n  const axisA = b2RotateVector(transformA.q, joint.localAxisA);\n  const perpA = b2LeftPerp(axisA);\n  const inv_h = world.inv_h;\n  const perpForce = inv_h * joint.impulse.x;\n  const axialForce = inv_h * (joint.motorImpulse + joint.lowerImpulse - joint.upperImpulse);\n  const force = b2Add(b2MulSV(perpForce, perpA), b2MulSV(axialForce, axisA));\n  return force;\n}\nfunction b2GetPrismaticJointTorque(world, base) {\n  return world.inv_h * base.prismaticJoint.impulse.y;\n}\nfunction b2PreparePrismaticJoint(base, context) {\n  const idA = base.bodyIdA;\n  const idB = base.bodyIdB;\n  const world = context.world;\n  const bodies = world.bodyArray;\n  const bodyA = bodies[idA];\n  const bodyB = bodies[idB];\n  const setA = world.solverSetArray[bodyA.setIndex];\n  const setB = world.solverSetArray[bodyB.setIndex];\n  const localIndexA = bodyA.localIndex;\n  const localIndexB = bodyB.localIndex;\n  const bodySimA = setA.sims.data[bodyA.localIndex];\n  const bodySimB = setB.sims.data[bodyB.localIndex];\n  const mA = bodySimA.invMass;\n  const iA = bodySimA.invInertia;\n  const mB = bodySimB.invMass;\n  const iB = bodySimB.invInertia;\n  base.invMassA = mA;\n  base.invMassB = mB;\n  base.invIA = iA;\n  base.invIB = iB;\n  const joint = base.prismaticJoint;\n  joint.indexA = bodyA.setIndex == b2SetType.b2_awakeSet ? localIndexA : B2_NULL_INDEX;\n  joint.indexB = bodyB.setIndex == b2SetType.b2_awakeSet ? localIndexB : B2_NULL_INDEX;\n  const qA = bodySimA.transform.q;\n  const qB = bodySimB.transform.q;\n  joint.anchorA = b2RotateVector(qA, b2Sub(base.localOriginAnchorA, bodySimA.localCenter));\n  joint.anchorB = b2RotateVector(qB, b2Sub(base.localOriginAnchorB, bodySimB.localCenter));\n  joint.axisA = b2RotateVector(qA, joint.localAxisA);\n  joint.deltaCenter = b2Sub(bodySimB.center, bodySimA.center);\n  joint.deltaAngle = b2RelativeAngle(qB, qA) - joint.referenceAngle;\n  const rA = joint.anchorA;\n  const rB = joint.anchorB;\n  const d = b2Add(joint.deltaCenter, b2Sub(rB, rA));\n  const a1 = b2Cross(b2Add(d, rA), joint.axisA);\n  const a2 = b2Cross(rB, joint.axisA);\n  const k = mA + mB + iA * a1 * a1 + iB * a2 * a2;\n  joint.axialMass = k > 0 ? 1 / k : 0;\n  joint.springSoftness = b2MakeSoft(joint.hertz, joint.dampingRatio, context.h);\n  if (context.enableWarmStarting == false) {\n    joint.impulse = new b2Vec2(0, 0);\n    joint.springImpulse = 0;\n    joint.motorImpulse = 0;\n    joint.lowerImpulse = 0;\n    joint.upperImpulse = 0;\n  }\n}\nfunction b2WarmStartPrismaticJoint(base, context) {\n  const mA = base.invMassA;\n  const mB = base.invMassB;\n  const iA = base.invIA;\n  const iB = base.invIB;\n  const dummyState = new b2BodyState();\n  const joint = base.prismaticJoint;\n  const stateA = joint.indexA == B2_NULL_INDEX ? dummyState : context.states[joint.indexA];\n  const stateB = joint.indexB == B2_NULL_INDEX ? dummyState : context.states[joint.indexB];\n  const rA = b2RotateVector(stateA.deltaRotation, joint.anchorA);\n  const rB = b2RotateVector(stateB.deltaRotation, joint.anchorB);\n  const d = b2Add(b2Add(b2Sub(stateB.deltaPosition, stateA.deltaPosition), joint.deltaCenter), b2Sub(rB, rA));\n  const axisA = b2RotateVector(stateA.deltaRotation, joint.axisA);\n  const a1 = b2Cross(b2Add(d, rA), axisA);\n  const a2 = b2Cross(rB, axisA);\n  const axialImpulse = joint.springImpulse + joint.motorImpulse + joint.lowerImpulse - joint.upperImpulse;\n  const perpA = b2LeftPerp(axisA);\n  const s1 = b2Cross(b2Add(d, rA), perpA);\n  const s2 = b2Cross(rB, perpA);\n  const perpImpulse = joint.impulse.x;\n  const angleImpulse = joint.impulse.y;\n  const P = b2Add(b2MulSV(axialImpulse, axisA), b2MulSV(perpImpulse, perpA));\n  const LA = axialImpulse * a1 + perpImpulse * s1 + angleImpulse;\n  const LB = axialImpulse * a2 + perpImpulse * s2 + angleImpulse;\n  stateA.linearVelocity = b2MulSub(stateA.linearVelocity, mA, P);\n  stateA.angularVelocity -= iA * LA;\n  stateB.linearVelocity = b2MulAdd(stateB.linearVelocity, mB, P);\n  stateB.angularVelocity += iB * LB;\n}\nfunction b2SolvePrismaticJoint(base, context, useBias) {\n  const mA = base.invMassA;\n  const mB = base.invMassB;\n  const iA = base.invIA;\n  const iB = base.invIB;\n  const dummyState = new b2BodyState();\n  const joint = base.prismaticJoint;\n  const stateA = joint.indexA === B2_NULL_INDEX ? dummyState : context.states[joint.indexA];\n  const stateB = joint.indexB === B2_NULL_INDEX ? dummyState : context.states[joint.indexB];\n  let vA = stateA.linearVelocity;\n  let wA = stateA.angularVelocity;\n  let vB = stateB.linearVelocity;\n  let wB = stateB.angularVelocity;\n  const rA = b2RotateVector(stateA.deltaRotation, joint.anchorA);\n  const rB = b2RotateVector(stateB.deltaRotation, joint.anchorB);\n  const d = b2Add(b2Add(b2Sub(stateB.deltaPosition, stateA.deltaPosition), joint.deltaCenter), b2Sub(rB, rA));\n  const axisA = b2RotateVector(stateA.deltaRotation, joint.axisA);\n  const translation = b2Dot(axisA, d);\n  const a1 = b2Cross(b2Add(d, rA), axisA);\n  const a2 = b2Cross(rB, axisA);\n  if (joint.enableSpring) {\n    const C = translation;\n    const bias = joint.springSoftness.biasRate * C;\n    const massScale = joint.springSoftness.massScale;\n    const impulseScale = joint.springSoftness.impulseScale;\n    const Cdot = b2Dot(axisA, b2Sub(vB, vA)) + a2 * wB - a1 * wA;\n    const impulse = -massScale * joint.axialMass * (Cdot + bias) - impulseScale * joint.springImpulse;\n    joint.springImpulse += impulse;\n    const P = b2MulSV(impulse, axisA);\n    const LA = impulse * a1;\n    const LB = impulse * a2;\n    vA = b2MulSub(vA, mA, P);\n    wA -= iA * LA;\n    vB = b2MulAdd(vB, mB, P);\n    wB += iB * LB;\n  }\n  if (joint.enableMotor) {\n    const Cdot = b2Dot(axisA, b2Sub(vB, vA)) + a2 * wB - a1 * wA;\n    let impulse = joint.axialMass * (joint.motorSpeed - Cdot);\n    const oldImpulse = joint.motorImpulse;\n    const maxImpulse = context.h * joint.maxMotorForce;\n    joint.motorImpulse = b2ClampFloat(joint.motorImpulse + impulse, -maxImpulse, maxImpulse);\n    impulse = joint.motorImpulse - oldImpulse;\n    const P = b2MulSV(impulse, axisA);\n    const LA = impulse * a1;\n    const LB = impulse * a2;\n    vA = b2MulSub(vA, mA, P);\n    wA -= iA * LA;\n    vB = b2MulAdd(vB, mB, P);\n    wB += iB * LB;\n  }\n  if (joint.enableLimit) {\n    {\n      const C = translation - joint.lowerTranslation;\n      let bias = 0;\n      let massScale = 1;\n      let impulseScale = 0;\n      if (C > 0) {\n        bias = C * context.inv_h;\n      } else if (useBias) {\n        bias = context.jointSoftness.biasRate * C;\n        massScale = context.jointSoftness.massScale;\n        impulseScale = context.jointSoftness.impulseScale;\n      }\n      const oldImpulse = joint.lowerImpulse;\n      const Cdot = b2Dot(axisA, b2Sub(vB, vA)) + a2 * wB - a1 * wA;\n      let impulse = -joint.axialMass * massScale * (Cdot + bias) - impulseScale * oldImpulse;\n      joint.lowerImpulse = Math.max(oldImpulse + impulse, 0);\n      impulse = joint.lowerImpulse - oldImpulse;\n      const P = b2MulSV(impulse, axisA);\n      const LA = impulse * a1;\n      const LB = impulse * a2;\n      vA = b2MulSub(vA, mA, P);\n      wA -= iA * LA;\n      vB = b2MulAdd(vB, mB, P);\n      wB += iB * LB;\n    }\n    {\n      const C = joint.upperTranslation - translation;\n      let bias = 0;\n      let massScale = 1;\n      let impulseScale = 0;\n      if (C > 0) {\n        bias = C * context.inv_h;\n      } else if (useBias) {\n        bias = context.jointSoftness.biasRate * C;\n        massScale = context.jointSoftness.massScale;\n        impulseScale = context.jointSoftness.impulseScale;\n      }\n      const oldImpulse = joint.upperImpulse;\n      const Cdot = b2Dot(axisA, b2Sub(vA, vB)) + a1 * wA - a2 * wB;\n      let impulse = -joint.axialMass * massScale * (Cdot + bias) - impulseScale * oldImpulse;\n      joint.upperImpulse = Math.max(oldImpulse + impulse, 0);\n      impulse = joint.upperImpulse - oldImpulse;\n      const P = b2MulSV(impulse, axisA);\n      const LA = impulse * a1;\n      const LB = impulse * a2;\n      vA = b2MulAdd(vA, mA, P);\n      wA += iA * LA;\n      vB = b2MulSub(vB, mB, P);\n      wB -= iB * LB;\n    }\n  }\n  {\n    const perpA = b2LeftPerp(axisA);\n    const s1 = b2Cross(b2Add(d, rA), perpA);\n    const s2 = b2Cross(rB, perpA);\n    const Cdot = new b2Vec2(b2Dot(perpA, b2Sub(vB, vA)) + s2 * wB - s1 * wA, wB - wA);\n    let bias = new b2Vec2();\n    let massScale = 1;\n    let impulseScale = 0;\n    if (useBias) {\n      const C = new b2Vec2(b2Dot(perpA, d), b2RelativeAngle(stateB.deltaRotation, stateA.deltaRotation) + joint.deltaAngle);\n      bias = b2MulSV(context.jointSoftness.biasRate, C);\n      massScale = context.jointSoftness.massScale;\n      impulseScale = context.jointSoftness.impulseScale;\n    }\n    const k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2;\n    const k12 = iA * s1 + iB * s2;\n    let k22 = iA + iB;\n    if (k22 === 0) {\n      k22 = 1;\n    }\n    const K = new b2Mat22(new b2Vec2(k11, k12), new b2Vec2(k12, k22));\n    const b = b2Solve22(K, b2Add(Cdot, bias));\n    const impulse = new b2Vec2(-massScale * b.x - impulseScale * joint.impulse.x, -massScale * b.y - impulseScale * joint.impulse.y);\n    joint.impulse.x += impulse.x;\n    joint.impulse.y += impulse.y;\n    const P = b2MulSV(impulse.x, perpA);\n    const LA = impulse.x * s1 + impulse.y;\n    const LB = impulse.x * s2 + impulse.y;\n    vA = b2MulSub(vA, mA, P);\n    wA -= iA * LA;\n    vB = b2MulAdd(vB, mB, P);\n    wB += iB * LB;\n  }\n  stateA.linearVelocity = vA;\n  stateA.angularVelocity = wA;\n  stateB.linearVelocity = vB;\n  stateB.angularVelocity = wB;\n}\nfunction b2DrawPrismaticJoint(draw, base, transformA, transformB) {\n  const joint = base.prismaticJoint;\n  const pA = b2TransformPoint(transformA, base.localOriginAnchorA);\n  const pB = b2TransformPoint(transformB, base.localOriginAnchorB);\n  const axis = b2RotateVector(transformA.q, joint.localAxisA);\n  const c1 = b2HexColor.b2_colorGray7;\n  const c2 = b2HexColor.b2_colorGreen;\n  const c3 = b2HexColor.b2_colorRed;\n  const c4 = b2HexColor.b2_colorBlue;\n  const c5 = b2HexColor.b2_colorGray4;\n  draw.DrawSegment(pA, pB, c5, draw.context);\n  if (joint.enableLimit) {\n    const lower = b2MulAdd(pA, joint.lowerTranslation, axis);\n    const upper = b2MulAdd(pA, joint.upperTranslation, axis);\n    const perp = b2LeftPerp(axis);\n    draw.DrawSegment(lower, upper, c1, draw.context);\n    draw.DrawSegment(b2MulSub(lower, 0.1, perp), b2MulAdd(lower, 0.1, perp), c2, draw.context);\n    draw.DrawSegment(b2MulSub(upper, 0.1, perp), b2MulAdd(upper, 0.1, perp), c3, draw.context);\n  } else {\n    draw.DrawSegment(b2MulSub(pA, 1, axis), b2MulAdd(pA, 1, axis), c1, draw.context);\n  }\n  draw.DrawPoint(pA.x, pA.y, 5, c1, draw.context);\n  draw.DrawPoint(pB.x, pB.y, 5, c4, draw.context);\n}\n\n// src/revolute_joint_c.js\nfunction b2RevoluteJoint_EnableSpring(jointId, enableSpring) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_revoluteJoint);\n  if (enableSpring !== joint.revoluteJoint.enableSpring) {\n    joint.revoluteJoint.enableSpring = enableSpring;\n    joint.revoluteJoint.springImpulse = 0;\n  }\n}\nfunction b2RevoluteJoint_IsSpringEnabled(jointId) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_revoluteJoint);\n  return joint.revoluteJoint.enableSpring;\n}\nfunction b2RevoluteJoint_SetSpringHertz(jointId, hertz) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_revoluteJoint);\n  joint.revoluteJoint.hertz = hertz;\n}\nfunction b2RevoluteJoint_GetSpringHertz(jointId) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_revoluteJoint);\n  return joint.revoluteJoint.hertz;\n}\nfunction b2RevoluteJoint_SetSpringDampingRatio(jointId, dampingRatio) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_revoluteJoint);\n  joint.revoluteJoint.dampingRatio = dampingRatio;\n}\nfunction b2RevoluteJoint_GetSpringDampingRatio(jointId) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_revoluteJoint);\n  return joint.revoluteJoint.dampingRatio;\n}\nfunction b2RevoluteJoint_GetAngle(jointId) {\n  const world = b2GetWorld(jointId.world0);\n  const jointSim = b2GetJointSimCheckType(jointId, b2JointType.b2_revoluteJoint);\n  const transformA = b2GetBodyTransform(world, jointSim.bodyIdA);\n  const transformB = b2GetBodyTransform(world, jointSim.bodyIdB);\n  let angle = b2RelativeAngle(transformB.q, transformA.q) - jointSim.revoluteJoint.referenceAngle;\n  angle = b2UnwindAngle(angle);\n  return angle;\n}\nfunction b2RevoluteJoint_EnableLimit(jointId, enableLimit) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_revoluteJoint);\n  if (enableLimit !== joint.revoluteJoint.enableLimit) {\n    joint.revoluteJoint.enableLimit = enableLimit;\n    joint.revoluteJoint.lowerImpulse = 0;\n    joint.revoluteJoint.upperImpulse = 0;\n  }\n}\nfunction b2RevoluteJoint_IsLimitEnabled(jointId) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_revoluteJoint);\n  return joint.revoluteJoint.enableLimit;\n}\nfunction b2RevoluteJoint_GetLowerLimit(jointId) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_revoluteJoint);\n  return joint.revoluteJoint.lowerAngle;\n}\nfunction b2RevoluteJoint_GetUpperLimit(jointId) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_revoluteJoint);\n  return joint.revoluteJoint.upperAngle;\n}\nfunction b2RevoluteJoint_SetLimits(jointId, lower, upper) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_revoluteJoint);\n  if (lower !== joint.revoluteJoint.lowerAngle || upper !== joint.revoluteJoint.upperAngle) {\n    joint.revoluteJoint.lowerAngle = Math.min(lower, upper);\n    joint.revoluteJoint.upperAngle = Math.max(lower, upper);\n    joint.revoluteJoint.lowerImpulse = 0;\n    joint.revoluteJoint.upperImpulse = 0;\n  }\n}\nfunction b2RevoluteJoint_EnableMotor(jointId, enableMotor) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_revoluteJoint);\n  if (enableMotor !== joint.revoluteJoint.enableMotor) {\n    joint.revoluteJoint.enableMotor = enableMotor;\n    joint.revoluteJoint.motorImpulse = 0;\n  }\n}\nfunction b2RevoluteJoint_IsMotorEnabled(jointId) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_revoluteJoint);\n  return joint.revoluteJoint.enableMotor;\n}\nfunction b2RevoluteJoint_SetMotorSpeed(jointId, motorSpeed) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_revoluteJoint);\n  joint.revoluteJoint.motorSpeed = motorSpeed;\n}\nfunction b2RevoluteJoint_GetMotorSpeed(jointId) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_revoluteJoint);\n  return joint.revoluteJoint.motorSpeed;\n}\nfunction b2RevoluteJoint_GetMotorTorque(jointId) {\n  const world = b2GetWorld(jointId.world0);\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_revoluteJoint);\n  return world.inv_h * joint.revoluteJoint.motorImpulse;\n}\nfunction b2RevoluteJoint_SetMaxMotorTorque(jointId, torque) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_revoluteJoint);\n  joint.revoluteJoint.maxMotorTorque = torque;\n}\nfunction b2RevoluteJoint_GetMaxMotorTorque(jointId) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_revoluteJoint);\n  return joint.revoluteJoint.maxMotorTorque;\n}\nfunction b2GetRevoluteJointForce(world, base) {\n  const force = b2MulSV(world.inv_h, base.revoluteJoint.linearImpulse);\n  return force;\n}\nfunction b2GetRevoluteJointTorque(world, base) {\n  const revolute = base.revoluteJoint;\n  const torque = world.inv_h * (revolute.motorImpulse + revolute.lowerImpulse - revolute.upperImpulse);\n  return torque;\n}\nfunction b2PrepareRevoluteJoint(base, context) {\n  const idA = base.bodyIdA;\n  const idB = base.bodyIdB;\n  const world = context.world;\n  const bodies = world.bodyArray;\n  const bodyA = bodies[idA];\n  const bodyB = bodies[idB];\n  const setA = world.solverSetArray[bodyA.setIndex];\n  const setB = world.solverSetArray[bodyB.setIndex];\n  const localIndexA = bodyA.localIndex;\n  const localIndexB = bodyB.localIndex;\n  const bodySimA = setA.sims.data[bodyA.localIndex];\n  const bodySimB = setB.sims.data[bodyB.localIndex];\n  const mA = bodySimA.invMass;\n  const iA = bodySimA.invInertia;\n  const mB = bodySimB.invMass;\n  const iB = bodySimB.invInertia;\n  base.invMassA = mA;\n  base.invMassB = mB;\n  base.invIA = iA;\n  base.invIB = iB;\n  const joint = base.revoluteJoint;\n  joint.indexA = bodyA.setIndex === b2SetType.b2_awakeSet ? localIndexA : B2_NULL_INDEX;\n  joint.indexB = bodyB.setIndex === b2SetType.b2_awakeSet ? localIndexB : B2_NULL_INDEX;\n  joint.anchorA = b2RotateVector(bodySimA.transform.q, b2Sub(base.localOriginAnchorA, bodySimA.localCenter));\n  joint.anchorB = b2RotateVector(bodySimB.transform.q, b2Sub(base.localOriginAnchorB, bodySimB.localCenter));\n  joint.deltaCenter = b2Sub(bodySimB.center, bodySimA.center);\n  joint.deltaAngle = b2RelativeAngle(bodySimB.transform.q, bodySimA.transform.q) - joint.referenceAngle;\n  joint.deltaAngle = b2UnwindAngle(joint.deltaAngle);\n  const k = iA + iB;\n  joint.axialMass = k > 0 ? 1 / k : 0;\n  joint.springSoftness = b2MakeSoft(joint.hertz, joint.dampingRatio, context.h);\n  if (context.enableWarmStarting === false) {\n    joint.linearImpulse = new b2Vec2(0, 0);\n    joint.springImpulse = 0;\n    joint.motorImpulse = 0;\n    joint.lowerImpulse = 0;\n    joint.upperImpulse = 0;\n  }\n}\nfunction b2WarmStartRevoluteJoint(base, context) {\n  const mA = base.invMassA;\n  const mB = base.invMassB;\n  const iA = base.invIA;\n  const iB = base.invIB;\n  const dummyState = new b2BodyState();\n  const joint = base.revoluteJoint;\n  const stateA = joint.indexA === B2_NULL_INDEX ? dummyState : context.states[joint.indexA];\n  const stateB = joint.indexB === B2_NULL_INDEX ? dummyState : context.states[joint.indexB];\n  const rA = b2RotateVector(stateA.deltaRotation, joint.anchorA);\n  const rB = b2RotateVector(stateB.deltaRotation, joint.anchorB);\n  const axialImpulse = joint.springImpulse + joint.motorImpulse + joint.lowerImpulse - joint.upperImpulse;\n  stateA.linearVelocity = b2MulSub(stateA.linearVelocity, mA, joint.linearImpulse);\n  stateA.angularVelocity -= iA * (b2Cross(rA, joint.linearImpulse) + axialImpulse);\n  stateB.linearVelocity = b2MulAdd(stateB.linearVelocity, mB, joint.linearImpulse);\n  stateB.angularVelocity += iB * (b2Cross(rB, joint.linearImpulse) + axialImpulse);\n}\nfunction b2SolveRevoluteJoint(base, context, useBias) {\n  const mA = base.invMassA;\n  const mB = base.invMassB;\n  const iA = base.invIA;\n  const iB = base.invIB;\n  const dummyState = new b2BodyState();\n  const joint = base.revoluteJoint;\n  const stateA = joint.indexA === B2_NULL_INDEX ? dummyState : context.states[joint.indexA];\n  const stateB = joint.indexB === B2_NULL_INDEX ? dummyState : context.states[joint.indexB];\n  let vA = stateA.linearVelocity.clone();\n  let wA = stateA.angularVelocity;\n  let vB = stateB.linearVelocity.clone();\n  let wB = stateB.angularVelocity;\n  const fixedRotation = iA + iB === 0;\n  if (joint.enableSpring && fixedRotation === false) {\n    const C = b2RelativeAngle(stateB.deltaRotation, stateA.deltaRotation) + joint.deltaAngle;\n    const bias = joint.springSoftness.biasRate * C;\n    const massScale = joint.springSoftness.massScale;\n    const impulseScale = joint.springSoftness.impulseScale;\n    const Cdot = wB - wA;\n    const impulse = -massScale * joint.axialMass * (Cdot + bias) - impulseScale * joint.springImpulse;\n    joint.springImpulse += impulse;\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n  if (joint.enableMotor && fixedRotation === false) {\n    const Cdot = wB - wA - joint.motorSpeed;\n    let impulse = -joint.axialMass * Cdot;\n    const oldImpulse = joint.motorImpulse;\n    const maxImpulse = context.h * joint.maxMotorTorque;\n    joint.motorImpulse = b2ClampFloat(joint.motorImpulse + impulse, -maxImpulse, maxImpulse);\n    impulse = joint.motorImpulse - oldImpulse;\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n  if (joint.enableLimit && fixedRotation === false) {\n    let jointAngle = b2RelativeAngle(stateB.deltaRotation, stateA.deltaRotation) + joint.deltaAngle;\n    jointAngle = b2UnwindAngle(jointAngle);\n    {\n      const C = jointAngle - joint.lowerAngle;\n      let bias = 0;\n      let massScale = 1;\n      let impulseScale = 0;\n      if (C > 0) {\n        bias = C * context.inv_h;\n      } else if (useBias) {\n        bias = context.jointSoftness.biasRate * C;\n        massScale = context.jointSoftness.massScale;\n        impulseScale = context.jointSoftness.impulseScale;\n      }\n      const Cdot = wB - wA;\n      let impulse = -massScale * joint.axialMass * (Cdot + bias) - impulseScale * joint.lowerImpulse;\n      const oldImpulse = joint.lowerImpulse;\n      joint.lowerImpulse = Math.max(joint.lowerImpulse + impulse, 0);\n      impulse = joint.lowerImpulse - oldImpulse;\n      wA -= iA * impulse;\n      wB += iB * impulse;\n    }\n    {\n      const C = joint.upperAngle - jointAngle;\n      let bias = 0;\n      let massScale = 1;\n      let impulseScale = 0;\n      if (C > 0) {\n        bias = C * context.inv_h;\n      } else if (useBias) {\n        bias = context.jointSoftness.biasRate * C;\n        massScale = context.jointSoftness.massScale;\n        impulseScale = context.jointSoftness.impulseScale;\n      }\n      const Cdot = wA - wB;\n      let impulse = -massScale * joint.axialMass * (Cdot + bias) - impulseScale * joint.lowerImpulse;\n      const oldImpulse = joint.upperImpulse;\n      joint.upperImpulse = Math.max(joint.upperImpulse + impulse, 0);\n      impulse = joint.upperImpulse - oldImpulse;\n      wA += iA * impulse;\n      wB -= iB * impulse;\n    }\n  }\n  {\n    const rA = b2RotateVector(stateA.deltaRotation, joint.anchorA);\n    const rB = b2RotateVector(stateB.deltaRotation, joint.anchorB);\n    const Cdot = b2Sub(b2Add(vB, b2CrossSV(wB, rB)), b2Add(vA, b2CrossSV(wA, rA)));\n    let bias = new b2Vec2(0, 0);\n    let massScale = 1;\n    let impulseScale = 0;\n    if (useBias) {\n      const dcA = stateA.deltaPosition;\n      const dcB = stateB.deltaPosition;\n      const separation = b2Add(b2Add(b2Sub(dcB, dcA), b2Sub(rB, rA)), joint.deltaCenter);\n      bias = b2MulSV(context.jointSoftness.biasRate, separation);\n      massScale = context.jointSoftness.massScale;\n      impulseScale = context.jointSoftness.impulseScale;\n    }\n    const K = {\n      cx: new b2Vec2(0, 0),\n      cy: new b2Vec2(0, 0)\n    };\n    K.cx.x = mA + mB + rA.y * rA.y * iA + rB.y * rB.y * iB;\n    K.cy.x = -rA.y * rA.x * iA - rB.y * rB.x * iB;\n    K.cx.y = K.cy.x;\n    K.cy.y = mA + mB + rA.x * rA.x * iA + rB.x * rB.x * iB;\n    const b = b2Solve22(K, b2Add(Cdot, bias));\n    const impulse = new b2Vec2(\n      -massScale * b.x - impulseScale * joint.linearImpulse.x,\n      -massScale * b.y - impulseScale * joint.linearImpulse.y\n    );\n    joint.linearImpulse.x += impulse.x;\n    joint.linearImpulse.y += impulse.y;\n    vA = b2MulSub(vA, mA, impulse);\n    wA -= iA * b2Cross(rA, impulse);\n    vB = b2MulAdd(vB, mB, impulse);\n    wB += iB * b2Cross(rB, impulse);\n  }\n  stateA.linearVelocity = vA;\n  stateA.angularVelocity = wA;\n  stateB.linearVelocity = vB;\n  stateB.angularVelocity = wB;\n}\nfunction b2DrawRevoluteJoint(draw, base, transformA, transformB, drawSize) {\n  const pA = b2TransformPoint(transformA, base.localOriginAnchorA);\n  const pB = b2TransformPoint(transformB, base.localOriginAnchorB);\n  const c1 = b2HexColor.b2_colorRed;\n  const L = drawSize;\n  draw.DrawCircle(pB, L, c1, draw.context);\n  const angle = b2RelativeAngle(transformB.q, transformA.q);\n  const r = new b2Vec2(L * Math.cos(angle), L * Math.sin(angle));\n  const pC = b2Add(pB, r);\n  draw.DrawSegment(pB, pC, c1, draw.context);\n  const color = b2HexColor.b2_colorGold;\n  draw.DrawSegment(transformA.p, pA, color, draw.context);\n  draw.DrawSegment(pA, pB, color, draw.context);\n  draw.DrawSegment(transformB.p, pB, color, draw.context);\n}\n\n// src/wheel_joint_c.js\nfunction b2WheelJoint_EnableSpring(jointId, enableSpring) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_wheelJoint);\n  if (enableSpring !== joint.wheelJoint.enableSpring) {\n    joint.wheelJoint.enableSpring = enableSpring;\n    joint.wheelJoint.springImpulse = 0;\n  }\n}\nfunction b2WheelJoint_IsSpringEnabled(jointId) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_wheelJoint);\n  return joint.wheelJoint.enableSpring;\n}\nfunction b2WheelJoint_SetSpringHertz(jointId, hertz) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_wheelJoint);\n  joint.wheelJoint.hertz = hertz;\n}\nfunction b2WheelJoint_GetSpringHertz(jointId) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_wheelJoint);\n  return joint.wheelJoint.hertz;\n}\nfunction b2WheelJoint_SetSpringDampingRatio(jointId, dampingRatio) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_wheelJoint);\n  joint.wheelJoint.dampingRatio = dampingRatio;\n}\nfunction b2WheelJoint_GetSpringDampingRatio(jointId) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_wheelJoint);\n  return joint.wheelJoint.dampingRatio;\n}\nfunction b2WheelJoint_EnableLimit(jointId, enableLimit) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_wheelJoint);\n  if (joint.wheelJoint.enableLimit !== enableLimit) {\n    joint.wheelJoint.lowerImpulse = 0;\n    joint.wheelJoint.upperImpulse = 0;\n    joint.wheelJoint.enableLimit = enableLimit;\n  }\n}\nfunction b2WheelJoint_IsLimitEnabled(jointId) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_wheelJoint);\n  return joint.wheelJoint.enableLimit;\n}\nfunction b2WheelJoint_GetLowerLimit(jointId) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_wheelJoint);\n  return joint.wheelJoint.lowerTranslation;\n}\nfunction b2WheelJoint_GetUpperLimit(jointId) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_wheelJoint);\n  return joint.wheelJoint.upperTranslation;\n}\nfunction b2WheelJoint_SetLimits(jointId, lower, upper) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_wheelJoint);\n  if (lower !== joint.wheelJoint.lowerTranslation || upper !== joint.wheelJoint.upperTranslation) {\n    joint.wheelJoint.lowerTranslation = Math.min(lower, upper);\n    joint.wheelJoint.upperTranslation = Math.max(lower, upper);\n    joint.wheelJoint.lowerImpulse = 0;\n    joint.wheelJoint.upperImpulse = 0;\n  }\n}\nfunction b2WheelJoint_EnableMotor(jointId, enableMotor) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_wheelJoint);\n  if (joint.wheelJoint.enableMotor !== enableMotor) {\n    joint.wheelJoint.motorImpulse = 0;\n    joint.wheelJoint.enableMotor = enableMotor;\n  }\n}\nfunction b2WheelJoint_IsMotorEnabled(jointId) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_wheelJoint);\n  return joint.wheelJoint.enableMotor;\n}\nfunction b2WheelJoint_SetMotorSpeed(jointId, motorSpeed) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_wheelJoint);\n  joint.wheelJoint.motorSpeed = motorSpeed;\n}\nfunction b2WheelJoint_GetMotorSpeed(jointId) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_wheelJoint);\n  return joint.wheelJoint.motorSpeed;\n}\nfunction b2WheelJoint_GetMotorTorque(jointId) {\n  const world = b2GetWorld(jointId.world0);\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_wheelJoint);\n  return world.inv_h * joint.wheelJoint.motorImpulse;\n}\nfunction b2WheelJoint_SetMaxMotorTorque(jointId, torque) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_wheelJoint);\n  joint.wheelJoint.maxMotorTorque = torque;\n}\nfunction b2WheelJoint_GetMaxMotorTorque(jointId) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_wheelJoint);\n  return joint.wheelJoint.maxMotorTorque;\n}\nfunction b2GetWheelJointForce(world, base) {\n  const joint = base.wheelJoint;\n  const axisA = joint.axisA;\n  const perpA = b2LeftPerp(axisA);\n  const perpForce = world.inv_h * joint.perpImpulse;\n  const axialForce = world.inv_h * (joint.springImpulse + joint.lowerImpulse - joint.upperImpulse);\n  const force = b2Add(b2MulSV(perpForce, perpA), b2MulSV(axialForce, axisA));\n  return force;\n}\nfunction b2GetWheelJointTorque(world, base) {\n  return world.inv_h * base.wheelJoint.motorImpulse;\n}\nfunction b2PrepareWheelJoint(base, context) {\n  const idA = base.bodyIdA;\n  const idB = base.bodyIdB;\n  const world = context.world;\n  const bodies = world.bodyArray;\n  const bodyA = bodies[idA];\n  const bodyB = bodies[idB];\n  const setA = world.solverSetArray[bodyA.setIndex];\n  const setB = world.solverSetArray[bodyB.setIndex];\n  const localIndexA = bodyA.localIndex;\n  const localIndexB = bodyB.localIndex;\n  const bodySimA = setA.sims.data[bodyA.localIndex];\n  const bodySimB = setB.sims.data[bodyB.localIndex];\n  const mA = bodySimA.invMass;\n  const iA = bodySimA.invInertia;\n  const mB = bodySimB.invMass;\n  const iB = bodySimB.invInertia;\n  base.invMassA = mA;\n  base.invMassB = mB;\n  base.invIA = iA;\n  base.invIB = iB;\n  const joint = base.wheelJoint;\n  joint.indexA = bodyA.setIndex == b2SetType.b2_awakeSet ? localIndexA : B2_NULL_INDEX;\n  joint.indexB = bodyB.setIndex == b2SetType.b2_awakeSet ? localIndexB : B2_NULL_INDEX;\n  const qA = bodySimA.transform.q;\n  const qB = bodySimB.transform.q;\n  joint.anchorA = b2RotateVector(qA, b2Sub(base.localOriginAnchorA, bodySimA.localCenter));\n  joint.anchorB = b2RotateVector(qB, b2Sub(base.localOriginAnchorB, bodySimB.localCenter));\n  joint.axisA = b2RotateVector(qA, joint.localAxisA);\n  joint.deltaCenter = b2Sub(bodySimB.center, bodySimA.center);\n  const rA = joint.anchorA;\n  const rB = joint.anchorB;\n  const d = b2Add(joint.deltaCenter, b2Sub(rB, rA));\n  const axisA = joint.axisA;\n  const perpA = b2LeftPerp(axisA);\n  const s1 = b2Cross(b2Add(d, rA), perpA);\n  const s2 = b2Cross(rB, perpA);\n  const kp = mA + mB + iA * s1 * s1 + iB * s2 * s2;\n  joint.perpMass = kp > 0 ? 1 / kp : 0;\n  const a1 = b2Cross(b2Add(d, rA), axisA);\n  const a2 = b2Cross(rB, axisA);\n  const ka = mA + mB + iA * a1 * a1 + iB * a2 * a2;\n  joint.axialMass = ka > 0 ? 1 / ka : 0;\n  joint.springSoftness = b2MakeSoft(joint.hertz, joint.dampingRatio, context.h);\n  const km = iA + iB;\n  joint.motorMass = km > 0 ? 1 / km : 0;\n  if (context.enableWarmStarting == false) {\n    joint.perpImpulse = 0;\n    joint.springImpulse = 0;\n    joint.motorImpulse = 0;\n    joint.lowerImpulse = 0;\n    joint.upperImpulse = 0;\n  }\n}\nfunction b2WarmStartWheelJoint(base, context) {\n  const mA = base.invMassA;\n  const mB = base.invMassB;\n  const iA = base.invIA;\n  const iB = base.invIB;\n  const dummyState = new b2BodyState();\n  const joint = base.wheelJoint;\n  const stateA = joint.indexA == B2_NULL_INDEX ? dummyState : context.states[joint.indexA];\n  const stateB = joint.indexB == B2_NULL_INDEX ? dummyState : context.states[joint.indexB];\n  const rA = b2RotateVector(stateA.deltaRotation, joint.anchorA);\n  const rB = b2RotateVector(stateB.deltaRotation, joint.anchorB);\n  const d = b2Add(b2Add(b2Sub(stateB.deltaPosition, stateA.deltaPosition), joint.deltaCenter), b2Sub(rB, rA));\n  const axisA = b2RotateVector(stateA.deltaRotation, joint.axisA);\n  const perpA = b2LeftPerp(axisA);\n  const a1 = b2Cross(b2Add(d, rA), axisA);\n  const a2 = b2Cross(rB, axisA);\n  const s1 = b2Cross(b2Add(d, rA), perpA);\n  const s2 = b2Cross(rB, perpA);\n  const axialImpulse = joint.springImpulse + joint.lowerImpulse - joint.upperImpulse;\n  const P = b2Add(b2MulSV(axialImpulse, axisA), b2MulSV(joint.perpImpulse, perpA));\n  const LA = axialImpulse * a1 + joint.perpImpulse * s1 + joint.motorImpulse;\n  const LB = axialImpulse * a2 + joint.perpImpulse * s2 + joint.motorImpulse;\n  stateA.linearVelocity = b2MulSub(stateA.linearVelocity, mA, P);\n  stateA.angularVelocity -= iA * LA;\n  stateB.linearVelocity = b2MulAdd(stateB.linearVelocity, mB, P);\n  stateB.angularVelocity += iB * LB;\n}\nfunction b2SolveWheelJoint(base, context, useBias) {\n  const mA = base.invMassA;\n  const mB = base.invMassB;\n  const iA = base.invIA;\n  const iB = base.invIB;\n  const dummyState = new b2BodyState();\n  const joint = base.wheelJoint;\n  const stateA = joint.indexA === B2_NULL_INDEX ? dummyState : context.states[joint.indexA];\n  const stateB = joint.indexB === B2_NULL_INDEX ? dummyState : context.states[joint.indexB];\n  let vA = stateA.linearVelocity;\n  let wA = stateA.angularVelocity;\n  let vB = stateB.linearVelocity;\n  let wB = stateB.angularVelocity;\n  const fixedRotation = iA + iB === 0;\n  const rA = b2RotateVector(stateA.deltaRotation, joint.anchorA);\n  const rB = b2RotateVector(stateB.deltaRotation, joint.anchorB);\n  const d = b2Add(b2Add(b2Sub(stateB.deltaPosition, stateA.deltaPosition), joint.deltaCenter), b2Sub(rB, rA));\n  const axisA = b2RotateVector(stateA.deltaRotation, joint.axisA);\n  const translation = b2Dot(axisA, d);\n  const a1 = b2Cross(b2Add(d, rA), axisA);\n  const a2 = b2Cross(rB, axisA);\n  if (joint.enableMotor && fixedRotation === false) {\n    const Cdot = wB - wA - joint.motorSpeed;\n    let impulse = -joint.motorMass * Cdot;\n    const oldImpulse = joint.motorImpulse;\n    const maxImpulse = context.h * joint.maxMotorTorque;\n    joint.motorImpulse = b2ClampFloat(joint.motorImpulse + impulse, -maxImpulse, maxImpulse);\n    impulse = joint.motorImpulse - oldImpulse;\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n  if (joint.enableSpring) {\n    const C = translation;\n    const bias = joint.springSoftness.biasRate * C;\n    const massScale = joint.springSoftness.massScale;\n    const impulseScale = joint.springSoftness.impulseScale;\n    const Cdot = b2Dot(axisA, b2Sub(vB, vA)) + a2 * wB - a1 * wA;\n    const impulse = -massScale * joint.axialMass * (Cdot + bias) - impulseScale * joint.springImpulse;\n    joint.springImpulse += impulse;\n    const P = b2MulSV(impulse, axisA);\n    const LA = impulse * a1;\n    const LB = impulse * a2;\n    vA = b2MulSub(vA, mA, P);\n    wA -= iA * LA;\n    vB = b2MulAdd(vB, mB, P);\n    wB += iB * LB;\n  }\n  if (joint.enableLimit) {\n    const translation2 = b2Dot(axisA, d);\n    {\n      const C = translation2 - joint.lowerTranslation;\n      let bias = 0;\n      let massScale = 1;\n      let impulseScale = 0;\n      if (C > 0) {\n        bias = C * context.inv_h;\n      } else if (useBias) {\n        bias = context.jointSoftness.biasRate * C;\n        massScale = context.jointSoftness.massScale;\n        impulseScale = context.jointSoftness.impulseScale;\n      }\n      const Cdot = b2Dot(axisA, b2Sub(vB, vA)) + a2 * wB - a1 * wA;\n      let impulse = -massScale * joint.axialMass * (Cdot + bias) - impulseScale * joint.lowerImpulse;\n      const oldImpulse = joint.lowerImpulse;\n      joint.lowerImpulse = Math.max(oldImpulse + impulse, 0);\n      impulse = joint.lowerImpulse - oldImpulse;\n      const P = b2MulSV(impulse, axisA);\n      const LA = impulse * a1;\n      const LB = impulse * a2;\n      vA = b2MulSub(vA, mA, P);\n      wA -= iA * LA;\n      vB = b2MulAdd(vB, mB, P);\n      wB += iB * LB;\n    }\n    {\n      const C = joint.upperTranslation - translation2;\n      let bias = 0;\n      let massScale = 1;\n      let impulseScale = 0;\n      if (C > 0) {\n        bias = C * context.inv_h;\n      } else if (useBias) {\n        bias = context.jointSoftness.biasRate * C;\n        massScale = context.jointSoftness.massScale;\n        impulseScale = context.jointSoftness.impulseScale;\n      }\n      const Cdot = b2Dot(axisA, b2Sub(vA, vB)) + a1 * wA - a2 * wB;\n      let impulse = -massScale * joint.axialMass * (Cdot + bias) - impulseScale * joint.upperImpulse;\n      const oldImpulse = joint.upperImpulse;\n      joint.upperImpulse = Math.max(oldImpulse + impulse, 0);\n      impulse = joint.upperImpulse - oldImpulse;\n      const P = b2MulSV(impulse, axisA);\n      const LA = impulse * a1;\n      const LB = impulse * a2;\n      vA = b2MulAdd(vA, mA, P);\n      wA += iA * LA;\n      vB = b2MulSub(vB, mB, P);\n      wB -= iB * LB;\n    }\n  }\n  {\n    const perpA = b2LeftPerp(axisA);\n    let bias = 0;\n    let massScale = 1;\n    let impulseScale = 0;\n    if (useBias) {\n      const C = b2Dot(perpA, d);\n      bias = context.jointSoftness.biasRate * C;\n      massScale = context.jointSoftness.massScale;\n      impulseScale = context.jointSoftness.impulseScale;\n    }\n    const s1 = b2Cross(b2Add(d, rA), perpA);\n    const s2 = b2Cross(rB, perpA);\n    const Cdot = b2Dot(perpA, b2Sub(vB, vA)) + s2 * wB - s1 * wA;\n    const impulse = -massScale * joint.perpMass * (Cdot + bias) - impulseScale * joint.perpImpulse;\n    joint.perpImpulse += impulse;\n    const P = b2MulSV(impulse, perpA);\n    const LA = impulse * s1;\n    const LB = impulse * s2;\n    vA = b2MulSub(vA, mA, P);\n    wA -= iA * LA;\n    vB = b2MulAdd(vB, mB, P);\n    wB += iB * LB;\n  }\n  stateA.linearVelocity = vA;\n  stateA.angularVelocity = wA;\n  stateB.linearVelocity = vB;\n  stateB.angularVelocity = wB;\n}\nfunction b2DrawWheelJoint(draw, base, transformA, transformB) {\n  const joint = base.wheelJoint;\n  const pA = b2TransformPoint(transformA, base.localOriginAnchorA);\n  const pB = b2TransformPoint(transformB, base.localOriginAnchorB);\n  const axis = b2RotateVector(transformA.q, joint.localAxisA);\n  const c1 = b2HexColor.b2_colorGray7;\n  const c2 = b2HexColor.b2_colorGreen;\n  const c3 = b2HexColor.b2_colorRed;\n  const c4 = b2HexColor.b2_colorGray4;\n  const c5 = b2HexColor.b2_colorBlue;\n  draw.DrawSegment(pA, pB, c5, draw.context);\n  if (joint.enableLimit) {\n    const lower = b2MulAdd(pA, joint.lowerTranslation, axis);\n    const upper = b2MulAdd(pA, joint.upperTranslation, axis);\n    const perp = b2LeftPerp(axis);\n    draw.DrawSegment(lower, upper, c1, draw.context);\n    draw.DrawSegment(b2MulSub(lower, 0.1, perp), b2MulAdd(lower, 0.1, perp), c2, draw.context);\n    draw.DrawSegment(b2MulSub(upper, 0.1, perp), b2MulAdd(upper, 0.1, perp), c3, draw.context);\n  } else {\n    draw.DrawSegment(b2MulSub(pA, 1, axis), b2MulAdd(pA, 1, axis), c1, draw.context);\n  }\n  draw.DrawPoint(pA.x, pA.y, 5, c1, draw.context);\n  draw.DrawPoint(pB.x, pB.y, 5, c4, draw.context);\n}\n\n// src/motor_joint_c.js\nfunction b2MotorJoint_SetLinearOffset(jointId, linearOffset) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_motorJoint);\n  joint.motorJoint.linearOffset = linearOffset;\n}\nfunction b2MotorJoint_GetLinearOffset(jointId) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_motorJoint);\n  return joint.motorJoint.linearOffset;\n}\nfunction b2MotorJoint_SetAngularOffset(jointId, angularOffset) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_motorJoint);\n  joint.motorJoint.angularOffset = b2ClampFloat(angularOffset, -B2_PI, B2_PI);\n}\nfunction b2MotorJoint_GetAngularOffset(jointId) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_motorJoint);\n  return joint.motorJoint.angularOffset;\n}\nfunction b2MotorJoint_SetMaxForce(jointId, maxForce) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_motorJoint);\n  joint.motorJoint.maxForce = Math.max(0, maxForce);\n}\nfunction b2MotorJoint_GetMaxForce(jointId) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_motorJoint);\n  return joint.motorJoint.maxForce;\n}\nfunction b2MotorJoint_SetMaxTorque(jointId, maxTorque) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_motorJoint);\n  joint.motorJoint.maxTorque = Math.max(0, maxTorque);\n}\nfunction b2MotorJoint_GetMaxTorque(jointId) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_motorJoint);\n  return joint.motorJoint.maxTorque;\n}\nfunction b2MotorJoint_SetCorrectionFactor(jointId, correctionFactor) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_motorJoint);\n  joint.motorJoint.correctionFactor = b2ClampFloat(correctionFactor, 0, 1);\n}\nfunction b2MotorJoint_GetCorrectionFactor(jointId) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_motorJoint);\n  return joint.motorJoint.correctionFactor;\n}\nfunction b2GetMotorJointForce(world, base) {\n  const force = b2MulSV(world.inv_h, base.motorJoint.linearImpulse);\n  return force;\n}\nfunction b2GetMotorJointTorque(world, base) {\n  return world.inv_h * base.motorJoint.angularImpulse;\n}\nfunction b2PrepareMotorJoint(base, context) {\n  const idA = base.bodyIdA;\n  const idB = base.bodyIdB;\n  const world = context.world;\n  const bodies = world.bodyArray;\n  const bodyA = bodies[idA];\n  const bodyB = bodies[idB];\n  const setA = world.solverSetArray[bodyA.setIndex];\n  const setB = world.solverSetArray[bodyB.setIndex];\n  const localIndexA = bodyA.localIndex;\n  const localIndexB = bodyB.localIndex;\n  const bodySimA = setA.sims.data[bodyA.localIndex];\n  const bodySimB = setB.sims.data[bodyB.localIndex];\n  const mA = bodySimA.invMass;\n  const iA = bodySimA.invInertia;\n  const mB = bodySimB.invMass;\n  const iB = bodySimB.invInertia;\n  base.invMassA = mA;\n  base.invMassB = mB;\n  base.invIA = iA;\n  base.invIB = iB;\n  const joint = base.motorJoint;\n  joint.indexA = bodyA.setIndex == b2SetType.b2_awakeSet ? localIndexA : B2_NULL_INDEX;\n  joint.indexB = bodyB.setIndex == b2SetType.b2_awakeSet ? localIndexB : B2_NULL_INDEX;\n  joint.anchorA = b2RotateVector(bodySimA.transform.q, b2Sub(base.localOriginAnchorA, bodySimA.localCenter));\n  joint.anchorB = b2RotateVector(bodySimB.transform.q, b2Sub(base.localOriginAnchorB, bodySimB.localCenter));\n  joint.deltaCenter = b2Sub(b2Sub(bodySimB.center, bodySimA.center), joint.linearOffset);\n  joint.deltaAngle = b2RelativeAngle(bodySimB.transform.q, bodySimA.transform.q) - joint.angularOffset;\n  joint.deltaAngle = b2UnwindAngle(joint.deltaAngle);\n  const rA = joint.anchorA;\n  const rB = joint.anchorB;\n  const K = {\n    cx: new b2Vec2(0, 0),\n    cy: new b2Vec2(0, 0)\n  };\n  K.cx.x = mA + mB + rA.y * rA.y * iA + rB.y * rB.y * iB;\n  K.cx.y = -rA.y * rA.x * iA - rB.y * rB.x * iB;\n  K.cy.x = K.cx.y;\n  K.cy.y = mA + mB + rA.x * rA.x * iA + rB.x * rB.x * iB;\n  joint.linearMass = b2GetInverse22(K);\n  const ka = iA + iB;\n  joint.angularMass = ka > 0 ? 1 / ka : 0;\n  if (context.enableWarmStarting == false) {\n    joint.linearImpulse = new b2Vec2(0, 0);\n    joint.angularImpulse = 0;\n  }\n}\nfunction b2WarmStartMotorJoint(base, context) {\n  const mA = base.invMassA;\n  const mB = base.invMassB;\n  const iA = base.invIA;\n  const iB = base.invIB;\n  const joint = base.motorJoint;\n  const dummyState = new b2BodyState();\n  const bodyA = joint.indexA == B2_NULL_INDEX ? dummyState : context.states[joint.indexA];\n  const bodyB = joint.indexB == B2_NULL_INDEX ? dummyState : context.states[joint.indexB];\n  const rA = b2RotateVector(bodyA.deltaRotation, joint.anchorA);\n  const rB = b2RotateVector(bodyB.deltaRotation, joint.anchorB);\n  bodyA.linearVelocity = b2MulSub(bodyA.linearVelocity, mA, joint.linearImpulse);\n  bodyA.angularVelocity -= iA * (b2Cross(rA, joint.linearImpulse) + joint.angularImpulse);\n  bodyB.linearVelocity = b2MulAdd(bodyB.linearVelocity, mB, joint.linearImpulse);\n  bodyB.angularVelocity += iB * (b2Cross(rB, joint.linearImpulse) + joint.angularImpulse);\n}\nfunction b2SolveMotorJoint(base, context, useBias) {\n  const mA = base.invMassA;\n  const mB = base.invMassB;\n  const iA = base.invIA;\n  const iB = base.invIB;\n  const dummyState = new b2BodyState();\n  const joint = base.motorJoint;\n  const bodyA = joint.indexA == B2_NULL_INDEX ? dummyState : context.states[joint.indexA];\n  const bodyB = joint.indexB == B2_NULL_INDEX ? dummyState : context.states[joint.indexB];\n  let vA = bodyA.linearVelocity;\n  let wA = bodyA.angularVelocity;\n  let vB = bodyB.linearVelocity;\n  let wB = bodyB.angularVelocity;\n  {\n    let angularSeperation = b2RelativeAngle(bodyB.deltaRotation, bodyA.deltaRotation) + joint.deltaAngle;\n    angularSeperation = b2UnwindAngle(angularSeperation);\n    const angularBias = context.inv_h * joint.correctionFactor * angularSeperation;\n    const Cdot = wB - wA;\n    let impulse = -joint.angularMass * (Cdot + angularBias);\n    const oldImpulse = joint.angularImpulse;\n    const maxImpulse = context.h * joint.maxTorque;\n    joint.angularImpulse = b2ClampFloat(joint.angularImpulse + impulse, -maxImpulse, maxImpulse);\n    impulse = joint.angularImpulse - oldImpulse;\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n  {\n    const rA = b2RotateVector(bodyA.deltaRotation, joint.anchorA);\n    const rB = b2RotateVector(bodyB.deltaRotation, joint.anchorB);\n    const ds = b2Add(b2Sub(bodyB.deltaPosition, bodyA.deltaPosition), b2Sub(rB, rA));\n    const linearSeparation = b2Add(joint.deltaCenter, ds);\n    const linearBias = b2MulSV(context.inv_h * joint.correctionFactor, linearSeparation);\n    const Cdot = b2Sub(b2Add(vB, b2CrossSV(wB, rB)), b2Add(vA, b2CrossSV(wA, rA)));\n    const b = b2MulMV(joint.linearMass, b2Add(Cdot, linearBias));\n    let impulse = new b2Vec2(-b.x, -b.y);\n    const oldImpulse = joint.linearImpulse;\n    const maxImpulse = context.h * joint.maxForce;\n    joint.linearImpulse = b2Add(joint.linearImpulse, impulse);\n    if (b2LengthSquared(joint.linearImpulse) > maxImpulse * maxImpulse) {\n      joint.linearImpulse = b2Normalize(joint.linearImpulse);\n      joint.linearImpulse.x *= maxImpulse;\n      joint.linearImpulse.y *= maxImpulse;\n    }\n    impulse = b2Sub(joint.linearImpulse, oldImpulse);\n    vA = b2MulSub(vA, mA, impulse);\n    wA -= iA * b2Cross(rA, impulse);\n    vB = b2MulAdd(vB, mB, impulse);\n    wB += iB * b2Cross(rB, impulse);\n  }\n  bodyA.linearVelocity = vA;\n  bodyA.angularVelocity = wA;\n  bodyB.linearVelocity = vB;\n  bodyB.angularVelocity = wB;\n}\n\n// src/mouse_joint_c.js\nfunction b2MouseJoint_SetTarget(jointId, target) {\n  b2Joint_WakeBodies(jointId);\n  const base = b2GetJointSimCheckType(jointId, b2JointType.b2_mouseJoint);\n  base.mouseJoint.targetA = target.clone();\n}\nfunction b2MouseJoint_GetTarget(jointId) {\n  const base = b2GetJointSimCheckType(jointId, b2JointType.b2_mouseJoint);\n  return base.mouseJoint.targetA;\n}\nfunction b2MouseJoint_SetSpringHertz(jointId, hertz) {\n  const base = b2GetJointSimCheckType(jointId, b2JointType.b2_mouseJoint);\n  base.mouseJoint.hertz = hertz;\n}\nfunction b2MouseJoint_GetSpringHertz(jointId) {\n  const base = b2GetJointSimCheckType(jointId, b2JointType.b2_mouseJoint);\n  return base.mouseJoint.hertz;\n}\nfunction b2MouseJoint_SetSpringDampingRatio(jointId, dampingRatio) {\n  const base = b2GetJointSimCheckType(jointId, b2JointType.b2_mouseJoint);\n  base.mouseJoint.dampingRatio = dampingRatio;\n}\nfunction b2MouseJoint_GetSpringDampingRatio(jointId) {\n  const base = b2GetJointSimCheckType(jointId, b2JointType.b2_mouseJoint);\n  return base.mouseJoint.dampingRatio;\n}\nfunction b2MouseJoint_SetMaxForce(jointId, maxForce) {\n  const base = b2GetJointSimCheckType(jointId, b2JointType.b2_mouseJoint);\n  base.mouseJoint.maxForce = maxForce;\n}\nfunction b2MouseJoint_GetMaxForce(jointId) {\n  const base = b2GetJointSimCheckType(jointId, b2JointType.b2_mouseJoint);\n  return base.mouseJoint.maxForce;\n}\nfunction b2GetMouseJointForce(world, base) {\n  const force = b2MulSV(world.inv_h, base.mouseJoint.linearImpulse);\n  return force;\n}\nfunction b2GetMouseJointTorque(world, base) {\n  return world.inv_h * base.mouseJoint.angularImpulse;\n}\nfunction b2PrepareMouseJoint(base, context) {\n  const idB = base.bodyIdB;\n  const world = context.world;\n  const bodies = world.bodyArray;\n  const bodyB = bodies[idB];\n  bodyB.setIndex === b2SetType.b2_awakeSet;\n  const setB = world.solverSetArray[bodyB.setIndex];\n  const localIndexB = bodyB.localIndex;\n  const bodySimB = setB.sims.data[localIndexB];\n  base.invMassB = bodySimB.invMass;\n  base.invIB = bodySimB.invInertia;\n  const joint = base.mouseJoint;\n  joint.indexB = bodyB.setIndex === b2SetType.b2_awakeSet ? localIndexB : B2_NULL_INDEX;\n  joint.anchorB = b2RotateVector(bodySimB.transform.q, b2Sub(base.localOriginAnchorB, bodySimB.localCenter));\n  joint.linearSoftness = b2MakeSoft(joint.hertz, joint.dampingRatio, context.h);\n  const angularHertz = 0.5;\n  const angularDampingRatio = 0.1;\n  joint.angularSoftness = b2MakeSoft(angularHertz, angularDampingRatio, context.h);\n  const rB = joint.anchorB;\n  const mB = bodySimB.invMass;\n  const iB = bodySimB.invInertia;\n  const K = {\n    cx: new b2Vec2(mB + iB * rB.y * rB.y, -iB * rB.x * rB.y),\n    cy: new b2Vec2(-iB * rB.x * rB.y, mB + iB * rB.x * rB.x)\n  };\n  joint.linearMass = b2GetInverse22(K);\n  joint.deltaCenter = b2Sub(bodySimB.center, joint.targetA);\n  if (context.enableWarmStarting === false) {\n    joint.linearImpulse = new b2Vec2(0, 0);\n    joint.angularImpulse = 0;\n  }\n}\nfunction b2WarmStartMouseJoint(base, context) {\n  base.type === b2JointType.b2_mouseJoint;\n  const mB = base.invMassB;\n  const iB = base.invIB;\n  const joint = base.mouseJoint;\n  const stateB = context.states[joint.indexB];\n  let vB = stateB.linearVelocity.clone();\n  let wB = stateB.angularVelocity;\n  const dqB = stateB.deltaRotation;\n  const rB = b2RotateVector(dqB, joint.anchorB);\n  vB = b2MulAdd(vB, mB, joint.linearImpulse);\n  wB += iB * (b2Cross(rB, joint.linearImpulse) + joint.angularImpulse);\n  stateB.linearVelocity = vB;\n  stateB.angularVelocity = wB;\n}\nfunction b2SolveMouseJoint(base, context) {\n  const mB = base.invMassB;\n  const iB = base.invIB;\n  const joint = base.mouseJoint;\n  const stateB = context.states[joint.indexB];\n  let vB = stateB.linearVelocity.clone();\n  let wB = stateB.angularVelocity;\n  {\n    const massScale = joint.angularSoftness.massScale;\n    const impulseScale = joint.angularSoftness.impulseScale;\n    let impulseStrength = iB > 0 ? -wB / iB : 0;\n    impulseStrength = massScale * impulseStrength - impulseScale * joint.angularImpulse;\n    joint.angularImpulse += impulseStrength;\n    wB += iB * impulseStrength;\n  }\n  const maxImpulse = joint.maxForce * context.h;\n  {\n    const dqB = stateB.deltaRotation;\n    const rB = b2RotateVector(dqB, joint.anchorB);\n    const Cdot = b2Add(vB, b2CrossSV(wB, rB));\n    const separation = b2Add(b2Add(stateB.deltaPosition, rB), joint.deltaCenter);\n    const bias = b2MulSV(joint.linearSoftness.biasRate, separation);\n    const massScale = joint.linearSoftness.massScale;\n    const impulseScale = joint.linearSoftness.impulseScale;\n    const b = b2MulMV(joint.linearMass, b2Add(Cdot, bias));\n    const impulseVector = new b2Vec2(\n      -massScale * b.x - impulseScale * joint.linearImpulse.x,\n      -massScale * b.y - impulseScale * joint.linearImpulse.y\n    );\n    const oldImpulse = joint.linearImpulse.clone();\n    joint.linearImpulse.x += impulseVector.x;\n    joint.linearImpulse.y += impulseVector.y;\n    const mag = b2Length(joint.linearImpulse);\n    if (mag > maxImpulse) {\n      joint.linearImpulse = b2MulSV(maxImpulse, b2Normalize(joint.linearImpulse));\n    }\n    impulseVector.x = joint.linearImpulse.x - oldImpulse.x;\n    impulseVector.y = joint.linearImpulse.y - oldImpulse.y;\n    vB = b2MulAdd(vB, mB, impulseVector);\n    wB += iB * b2Cross(rB, impulseVector);\n  }\n  stateB.linearVelocity = vB;\n  stateB.angularVelocity = wB;\n}\n\n// src/weld_joint_c.js\nfunction b2WeldJoint_SetLinearHertz(jointId, hertz) {\n  if (!(b2IsValid(hertz) && hertz >= 0)) {\n    throw new Error(\"Invalid hertz value\");\n  }\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_weldJoint);\n  joint.weldJoint.linearHertz = hertz;\n}\nfunction b2WeldJoint_GetLinearHertz(jointId) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_weldJoint);\n  return joint.weldJoint.linearHertz;\n}\nfunction b2WeldJoint_SetLinearDampingRatio(jointId, dampingRatio) {\n  if (!(b2IsValid(dampingRatio) && dampingRatio >= 0)) {\n    throw new Error(\"Invalid dampingRatio value\");\n  }\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_weldJoint);\n  joint.weldJoint.linearDampingRatio = dampingRatio;\n}\nfunction b2WeldJoint_GetLinearDampingRatio(jointId) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_weldJoint);\n  return joint.weldJoint.linearDampingRatio;\n}\nfunction b2WeldJoint_SetAngularHertz(jointId, hertz) {\n  if (!(b2IsValid(hertz) && hertz >= 0)) {\n    throw new Error(\"Invalid hertz value\");\n  }\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_weldJoint);\n  joint.weldJoint.angularHertz = hertz;\n}\nfunction b2WeldJoint_GetAngularHertz(jointId) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_weldJoint);\n  return joint.weldJoint.angularHertz;\n}\nfunction b2WeldJoint_SetAngularDampingRatio(jointId, dampingRatio) {\n  if (!(b2IsValid(dampingRatio) && dampingRatio >= 0)) {\n    throw new Error(\"Invalid dampingRatio value\");\n  }\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_weldJoint);\n  joint.weldJoint.angularDampingRatio = dampingRatio;\n}\nfunction b2WeldJoint_GetAngularDampingRatio(jointId) {\n  const joint = b2GetJointSimCheckType(jointId, b2JointType.b2_weldJoint);\n  return joint.weldJoint.angularDampingRatio;\n}\nfunction b2GetWeldJointForce(world, base) {\n  const force = b2MulSV(world.inv_h, base.weldJoint.linearImpulse);\n  return force;\n}\nfunction b2GetWeldJointTorque(world, base) {\n  return world.inv_h * base.weldJoint.angularImpulse;\n}\nfunction b2PrepareWeldJoint(base, context) {\n  if (base.type !== b2JointType.b2_weldJoint) {\n    throw new Error(\"Invalid joint type\");\n  }\n  const idA = base.bodyIdA;\n  const idB = base.bodyIdB;\n  const world = context.world;\n  const bodies = world.bodyArray;\n  const bodyA = bodies[idA];\n  const bodyB = bodies[idB];\n  if (!(bodyA.setIndex === b2SetType.b2_awakeSet || bodyB.setIndex === b2SetType.b2_awakeSet)) {\n    throw new Error(\"At least one body must be awake\");\n  }\n  const setA = world.solverSetArray[bodyA.setIndex];\n  const setB = world.solverSetArray[bodyB.setIndex];\n  const localIndexA = bodyA.localIndex;\n  const localIndexB = bodyB.localIndex;\n  if (!(0 <= localIndexA && localIndexA <= setA.sims.count)) {\n    throw new Error(\"Invalid localIndexA\");\n  }\n  if (!(0 <= localIndexB && localIndexB <= setB.sims.count)) {\n    throw new Error(\"Invalid localIndexB\");\n  }\n  const bodySimA = setA.sims.data[bodyA.localIndex];\n  const bodySimB = setB.sims.data[bodyB.localIndex];\n  const mA = bodySimA.invMass;\n  const iA = bodySimA.invInertia;\n  const mB = bodySimB.invMass;\n  const iB = bodySimB.invInertia;\n  base.invMassA = mA;\n  base.invMassB = mB;\n  base.invIA = iA;\n  base.invIB = iB;\n  const joint = base.weldJoint;\n  joint.indexA = bodyA.setIndex === b2SetType.b2_awakeSet ? localIndexA : B2_NULL_INDEX;\n  joint.indexB = bodyB.setIndex === b2SetType.b2_awakeSet ? localIndexB : B2_NULL_INDEX;\n  const qA = bodySimA.transform.q;\n  const qB = bodySimB.transform.q;\n  joint.anchorA = b2RotateVector(qA, b2Sub(base.localOriginAnchorA, bodySimA.localCenter));\n  joint.anchorB = b2RotateVector(qB, b2Sub(base.localOriginAnchorB, bodySimB.localCenter));\n  joint.deltaCenter = b2Sub(bodySimB.center, bodySimA.center);\n  joint.deltaAngle = b2RelativeAngle(qB, qA) - joint.referenceAngle;\n  const ka = iA + iB;\n  joint.axialMass = ka > 0 ? 1 / ka : 0;\n  if (joint.linearHertz === 0) {\n    joint.linearSoftness = context.jointSoftness;\n  } else {\n    joint.linearSoftness = b2MakeSoft(joint.linearHertz, joint.linearDampingRatio, context.h);\n  }\n  if (joint.angularHertz === 0) {\n    joint.angularSoftness = context.jointSoftness;\n  } else {\n    joint.angularSoftness = b2MakeSoft(joint.angularHertz, joint.angularDampingRatio, context.h);\n  }\n  if (context.enableWarmStarting === false) {\n    joint.linearImpulse = new b2Vec2(0, 0);\n    joint.angularImpulse = 0;\n  }\n}\nfunction b2WarmStartWeldJoint(base, context) {\n  const mA = base.invMassA;\n  const mB = base.invMassB;\n  const iA = base.invIA;\n  const iB = base.invIB;\n  const dummyState = new b2BodyState();\n  const joint = base.weldJoint;\n  const stateA = joint.indexA === B2_NULL_INDEX ? dummyState : context.states[joint.indexA];\n  const stateB = joint.indexB === B2_NULL_INDEX ? dummyState : context.states[joint.indexB];\n  const rA = b2RotateVector(stateA.deltaRotation, joint.anchorA);\n  const rB = b2RotateVector(stateB.deltaRotation, joint.anchorB);\n  stateA.linearVelocity = b2MulSub(stateA.linearVelocity, mA, joint.linearImpulse);\n  stateA.angularVelocity -= iA * (b2Cross(rA, joint.linearImpulse) + joint.angularImpulse);\n  stateB.linearVelocity = b2MulAdd(stateB.linearVelocity, mB, joint.linearImpulse);\n  stateB.angularVelocity += iB * (b2Cross(rB, joint.linearImpulse) + joint.angularImpulse);\n}\nfunction b2SolveWeldJoint(base, context, useBias) {\n  if (base.type !== b2JointType.b2_weldJoint) {\n    throw new Error(\"Invalid joint type\");\n  }\n  const mA = base.invMassA;\n  const mB = base.invMassB;\n  const iA = base.invIA;\n  const iB = base.invIB;\n  const dummyState = new b2BodyState();\n  const joint = base.weldJoint;\n  const stateA = joint.indexA === B2_NULL_INDEX ? dummyState : context.states[joint.indexA];\n  const stateB = joint.indexB === B2_NULL_INDEX ? dummyState : context.states[joint.indexB];\n  let vA = stateA.linearVelocity;\n  let wA = stateA.angularVelocity;\n  let vB = stateB.linearVelocity;\n  let wB = stateB.angularVelocity;\n  {\n    let bias = 0;\n    let massScale = 1;\n    let impulseScale = 0;\n    if (useBias || joint.angularHertz > 0) {\n      const C = b2RelativeAngle(stateB.deltaRotation, stateA.deltaRotation) + joint.deltaAngle;\n      bias = joint.angularSoftness.biasRate * C;\n      massScale = joint.angularSoftness.massScale;\n      impulseScale = joint.angularSoftness.impulseScale;\n    }\n    const Cdot = wB - wA;\n    const impulse = -massScale * joint.axialMass * (Cdot + bias) - impulseScale * joint.angularImpulse;\n    joint.angularImpulse += impulse;\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n  {\n    const rA = b2RotateVector(stateA.deltaRotation, joint.anchorA);\n    const rB = b2RotateVector(stateB.deltaRotation, joint.anchorB);\n    let bias = new b2Vec2(0, 0);\n    let massScale = 1;\n    let impulseScale = 0;\n    if (useBias || joint.linearHertz > 0) {\n      const dcA = stateA.deltaPosition;\n      const dcB = stateB.deltaPosition;\n      const C = b2Add(b2Add(b2Sub(dcB, dcA), b2Sub(rB, rA)), joint.deltaCenter);\n      bias = b2MulSV(joint.linearSoftness.biasRate, C);\n      massScale = joint.linearSoftness.massScale;\n      impulseScale = joint.linearSoftness.impulseScale;\n    }\n    const Cdot = b2Sub(b2Add(vB, b2CrossSV(wB, rB)), b2Add(vA, b2CrossSV(wA, rA)));\n    const K = new b2Mat22();\n    K.cx.x = mA + mB + rA.y * rA.y * iA + rB.y * rB.y * iB;\n    K.cy.x = -rA.y * rA.x * iA - rB.y * rB.x * iB;\n    K.cx.y = K.cy.x;\n    K.cy.y = mA + mB + rA.x * rA.x * iA + rB.x * rB.x * iB;\n    const b = b2Solve22(K, b2Add(Cdot, bias));\n    const impulse = new b2Vec2(\n      -massScale * b.x - impulseScale * joint.linearImpulse.x,\n      -massScale * b.y - impulseScale * joint.linearImpulse.y\n    );\n    joint.linearImpulse = b2Add(joint.linearImpulse, impulse);\n    vA = b2MulSub(vA, mA, impulse);\n    wA -= iA * b2Cross(rA, impulse);\n    vB = b2MulAdd(vB, mB, impulse);\n    wB += iB * b2Cross(rB, impulse);\n  }\n  stateA.linearVelocity = vA;\n  stateA.angularVelocity = wA;\n  stateB.linearVelocity = vB;\n  stateB.angularVelocity = wB;\n}\n\n// src/joint_c.js\nfunction b2DefaultDistanceJointDef() {\n  const def = new b2DistanceJointDef();\n  def.length = 1;\n  def.maxLength = B2_HUGE;\n  return def;\n}\nfunction b2DefaultMotorJointDef() {\n  const def = new b2MotorJointDef();\n  def.maxForce = 1;\n  def.maxTorque = 1;\n  def.correctionFactor = 0.3;\n  return def;\n}\nfunction b2DefaultMouseJointDef() {\n  const def = new b2MouseJointDef();\n  def.hertz = 4;\n  def.dampingRatio = 1;\n  def.maxForce = 1;\n  return def;\n}\nfunction b2DefaultPrismaticJointDef() {\n  const def = new b2PrismaticJointDef();\n  def.localAxisA = new b2Vec2(1, 0);\n  return def;\n}\nfunction b2DefaultRevoluteJointDef() {\n  const def = new b2RevoluteJointDef();\n  def.drawSize = 0.25;\n  return def;\n}\nfunction b2DefaultWeldJointDef() {\n  return new b2WeldJointDef();\n}\nfunction b2DefaultWheelJointDef() {\n  const def = new b2WheelJointDef();\n  def.localAxisA = new b2Vec2(0, 1);\n  def.enableSpring = true;\n  def.hertz = 1;\n  def.dampingRatio = 0.7;\n  return def;\n}\nfunction b2GetJointFullId(world, jointId) {\n  const id = jointId.index1 - 1;\n  const joint = world.jointArray[id];\n  return joint;\n}\nfunction b2GetJoint(world, jointId) {\n  return world.jointArray[jointId];\n}\nfunction b2GetJointSim(world, joint) {\n  if (joint.setIndex === b2SetType.b2_awakeSet) {\n    const color = world.constraintGraph.colors[joint.colorIndex];\n    if (joint.jointId !== color.joints.data[joint.localIndex].jointId) {\n    }\n    return color.joints.data[joint.localIndex];\n  }\n  const set = world.solverSetArray[joint.setIndex];\n  return set.joints.data[joint.localIndex];\n}\nfunction b2GetJointSimCheckType(jointId, type) {\n  const world = b2GetWorld(jointId.world0);\n  if (world.locked) {\n    return null;\n  }\n  const joint = b2GetJointFullId(world, jointId);\n  const jointSim = b2GetJointSim(world, joint);\n  return jointSim;\n}\nvar b2JointPair = class {\n  constructor(joint = null, jointSim = null) {\n    this.joint = joint;\n    this.jointSim = jointSim;\n  }\n};\nfunction b2CreateJoint(world, bodyA, bodyB, userData, drawSize, type, collideConnected) {\n  b2ValidateSolverSets(world);\n  const bodyIdA = bodyA.id;\n  const bodyIdB = bodyB.id;\n  const maxSetIndex = Math.max(bodyA.setIndex, bodyB.setIndex);\n  const jointId = b2AllocId(world.jointIdPool);\n  while (jointId >= world.jointArray.length) {\n    world.jointArray.push(new b2Joint());\n  }\n  const joint = world.jointArray[jointId];\n  joint.edges = [new b2JointEdge(), new b2JointEdge()];\n  joint.jointId = jointId;\n  joint.userData = userData;\n  joint.setIndex = B2_NULL_INDEX;\n  joint.colorIndex = B2_NULL_INDEX;\n  joint.localIndex = B2_NULL_INDEX;\n  joint.islandId = B2_NULL_INDEX;\n  joint.islandPrev = B2_NULL_INDEX;\n  joint.islandNext = B2_NULL_INDEX;\n  joint.revision += 1;\n  joint.drawSize = drawSize;\n  joint.type = type;\n  joint.isMarked = false;\n  joint.collideConnected = collideConnected;\n  joint.edges[0].bodyId = bodyIdA;\n  joint.edges[0].prevKey = B2_NULL_INDEX;\n  joint.edges[0].nextKey = bodyA.headJointKey;\n  const keyA = jointId << 1 | 0;\n  if (bodyA.headJointKey !== B2_NULL_INDEX) {\n    const jointA = world.jointArray[bodyA.headJointKey >> 1];\n    const edgeA = jointA.edges[bodyA.headJointKey & 1];\n    edgeA.prevKey = keyA;\n  }\n  bodyA.headJointKey = keyA;\n  bodyA.jointCount += 1;\n  joint.edges[1].bodyId = bodyIdB;\n  joint.edges[1].prevKey = B2_NULL_INDEX;\n  joint.edges[1].nextKey = bodyB.headJointKey;\n  const keyB = jointId << 1 | 1;\n  if (bodyB.headJointKey !== B2_NULL_INDEX) {\n    const jointB = world.jointArray[bodyB.headJointKey >> 1];\n    const edgeB = jointB.edges[bodyB.headJointKey & 1];\n    edgeB.prevKey = keyB;\n  }\n  bodyB.headJointKey = keyB;\n  bodyB.jointCount += 1;\n  let jointSim;\n  if (bodyA.setIndex === b2SetType.b2_disabledSet || bodyB.setIndex === b2SetType.b2_disabledSet) {\n    const set = world.solverSetArray[b2SetType.b2_disabledSet];\n    joint.setIndex = b2SetType.b2_disabledSet;\n    joint.localIndex = set.joints.length;\n    jointSim = b2AddJoint(set.joints);\n    jointSim.jointId = jointId;\n    jointSim.bodyIdA = bodyIdA;\n    jointSim.bodyIdB = bodyIdB;\n  } else if (bodyA.setIndex === b2SetType.b2_staticSet && bodyB.setIndex === b2SetType.b2_staticSet) {\n    const set = world.solverSetArray[b2SetType.b2_staticSet];\n    joint.setIndex = b2SetType.b2_staticSet;\n    joint.localIndex = set.joints.length;\n    jointSim = b2AddJoint(set.joints);\n    jointSim.jointId = jointId;\n    jointSim.bodyIdA = bodyIdA;\n    jointSim.bodyIdB = bodyIdB;\n  } else if (bodyA.setIndex === b2SetType.b2_awakeSet || bodyB.setIndex === b2SetType.b2_awakeSet) {\n    if (maxSetIndex >= b2SetType.b2_firstSleepingSet) {\n      b2WakeSolverSet(world, maxSetIndex);\n    }\n    joint.setIndex = b2SetType.b2_awakeSet;\n    jointSim = b2CreateJointInGraph(world, joint);\n    jointSim.jointId = jointId;\n    jointSim.bodyIdA = bodyIdA;\n    jointSim.bodyIdB = bodyIdB;\n  } else {\n    let setIndex = maxSetIndex;\n    const set = world.solverSetArray[setIndex];\n    joint.setIndex = setIndex;\n    joint.localIndex = set.joints.length;\n    jointSim = b2AddJoint(set.joints);\n    jointSim.jointId = jointId;\n    jointSim.bodyIdA = bodyIdA;\n    jointSim.bodyIdB = bodyIdB;\n    if (bodyA.setIndex !== bodyB.setIndex && bodyA.setIndex >= b2SetType.b2_firstSleepingSet && bodyB.setIndex >= b2SetType.b2_firstSleepingSet) {\n      b2MergeSolverSets(world, bodyA.setIndex, bodyB.setIndex);\n      setIndex = bodyA.setIndex;\n      jointSim = world.solverSetArray[setIndex].joints[joint.localIndex];\n    }\n  }\n  if (joint.setIndex > b2SetType.b2_disabledSet) {\n    b2LinkJoint(world, joint);\n  }\n  b2ValidateSolverSets(world);\n  return new b2JointPair(joint, jointSim);\n}\nfunction b2DestroyContactsBetweenBodies(world, bodyA, bodyB) {\n  let contactKey;\n  let otherBodyId;\n  if (bodyA.contactCount < bodyB.contactCount) {\n    contactKey = bodyA.headContactKey;\n    otherBodyId = bodyB.id;\n  } else {\n    contactKey = bodyB.headContactKey;\n    otherBodyId = bodyA.id;\n  }\n  const wakeBodies = false;\n  while (contactKey !== B2_NULL_INDEX) {\n    const contactId = contactKey >> 1;\n    const edgeIndex = contactKey & 1;\n    const contact = world.contactArray[contactId];\n    contactKey = contact.edges[edgeIndex].nextKey;\n    const otherEdgeIndex = edgeIndex ^ 1;\n    if (contact.edges[otherEdgeIndex].bodyId === otherBodyId) {\n      b2DestroyContact(world, contact, wakeBodies);\n    }\n  }\n  b2ValidateSolverSets(world);\n}\nfunction b2CreateDistanceJoint(worldId, def) {\n  const world = b2GetWorldFromId(worldId);\n  if (world.locked) {\n    return new b2JointId();\n  }\n  const bodyA = b2GetBodyFullId(world, def.bodyIdA);\n  const bodyB = b2GetBodyFullId(world, def.bodyIdB);\n  const pair = b2CreateJoint(world, bodyA, bodyB, def.userData, 1, b2JointType.b2_distanceJoint, def.collideConnected);\n  const joint = pair.jointSim;\n  joint.type = b2JointType.b2_distanceJoint;\n  joint.localOriginAnchorA = def.localAnchorA;\n  joint.localOriginAnchorB = def.localAnchorB;\n  joint.distanceJoint = new b2DistanceJoint();\n  joint.distanceJoint.length = Math.max(def.length, b2_linearSlop);\n  joint.distanceJoint.hertz = def.hertz;\n  joint.distanceJoint.dampingRatio = def.dampingRatio;\n  joint.distanceJoint.minLength = Math.max(def.minLength, b2_linearSlop);\n  joint.distanceJoint.maxLength = Math.max(def.minLength, def.maxLength);\n  joint.distanceJoint.maxMotorForce = def.maxMotorForce;\n  joint.distanceJoint.motorSpeed = def.motorSpeed;\n  joint.distanceJoint.enableSpring = def.enableSpring;\n  joint.distanceJoint.enableLimit = def.enableLimit;\n  joint.distanceJoint.enableMotor = def.enableMotor;\n  joint.distanceJoint.impulse = 0;\n  joint.distanceJoint.lowerImpulse = 0;\n  joint.distanceJoint.upperImpulse = 0;\n  joint.distanceJoint.motorImpulse = 0;\n  if (def.collideConnected === false) {\n    b2DestroyContactsBetweenBodies(world, bodyA, bodyB);\n  }\n  const jointId = new b2JointId(joint.jointId + 1, world.worldId, pair.joint.revision);\n  return jointId;\n}\nfunction b2CreateMotorJoint(worldId, def) {\n  const world = b2GetWorldFromId(worldId);\n  if (world.locked) {\n    return new b2JointId();\n  }\n  const bodyA = b2GetBodyFullId(world, def.bodyIdA);\n  const bodyB = b2GetBodyFullId(world, def.bodyIdB);\n  const pair = b2CreateJoint(world, bodyA, bodyB, def.userData, 1, b2JointType.b2_motorJoint, def.collideConnected);\n  const joint = pair.jointSim;\n  joint.type = b2JointType.b2_motorJoint;\n  joint.localOriginAnchorA = new b2Vec2(0, 0);\n  joint.localOriginAnchorB = new b2Vec2(0, 0);\n  joint.motorJoint = new b2MotorJoint();\n  joint.motorJoint.linearOffset = def.linearOffset;\n  joint.motorJoint.angularOffset = def.angularOffset;\n  joint.motorJoint.maxForce = def.maxForce;\n  joint.motorJoint.maxTorque = def.maxTorque;\n  joint.motorJoint.correctionFactor = b2ClampFloat(def.correctionFactor, 0, 1);\n  if (def.collideConnected === false) {\n    b2DestroyContactsBetweenBodies(world, bodyA, bodyB);\n  }\n  const jointId = new b2JointId(joint.jointId + 1, world.worldId, pair.joint.revision);\n  return jointId;\n}\nfunction b2CreateMouseJoint(worldId, def) {\n  const world = b2GetWorldFromId(worldId);\n  if (world.locked) {\n    return new b2JointId();\n  }\n  const bodyA = b2GetBodyFullId(world, def.bodyIdA);\n  const bodyB = b2GetBodyFullId(world, def.bodyIdB);\n  const transformA = b2GetBodyTransformQuick(world, bodyA);\n  const transformB = b2GetBodyTransformQuick(world, bodyB);\n  const pair = b2CreateJoint(world, bodyA, bodyB, def.userData, 1, b2JointType.b2_mouseJoint, def.collideConnected);\n  const joint = pair.jointSim;\n  joint.type = b2JointType.b2_mouseJoint;\n  joint.localOriginAnchorA = b2InvTransformPoint(transformA, def.target);\n  joint.localOriginAnchorB = b2InvTransformPoint(transformB, def.target);\n  joint.mouseJoint = new b2MouseJoint();\n  joint.mouseJoint.targetA = def.target;\n  joint.mouseJoint.hertz = def.hertz;\n  joint.mouseJoint.dampingRatio = def.dampingRatio;\n  joint.mouseJoint.maxForce = def.maxForce;\n  const jointId = new b2JointId(joint.jointId + 1, world.worldId, pair.joint.revision);\n  return jointId;\n}\nfunction b2CreateRevoluteJoint(worldId, def) {\n  const world = b2GetWorldFromId(worldId);\n  if (world.locked) {\n    return new b2JointId();\n  }\n  const bodyA = b2GetBodyFullId(world, def.bodyIdA);\n  const bodyB = b2GetBodyFullId(world, def.bodyIdB);\n  const pair = b2CreateJoint(world, bodyA, bodyB, def.userData, def.drawSize, b2JointType.b2_revoluteJoint, def.collideConnected);\n  const joint = pair.jointSim;\n  joint.type = b2JointType.b2_revoluteJoint;\n  joint.localOriginAnchorA = def.localAnchorA;\n  joint.localOriginAnchorB = def.localAnchorB;\n  joint.revoluteJoint = new b2RevoluteJoint();\n  joint.revoluteJoint.referenceAngle = b2ClampFloat(def.referenceAngle, -Math.PI, Math.PI);\n  joint.revoluteJoint.linearImpulse = new b2Vec2(0, 0);\n  joint.revoluteJoint.axialMass = 0;\n  joint.revoluteJoint.springImpulse = 0;\n  joint.revoluteJoint.motorImpulse = 0;\n  joint.revoluteJoint.lowerImpulse = 0;\n  joint.revoluteJoint.upperImpulse = 0;\n  joint.revoluteJoint.hertz = def.hertz;\n  joint.revoluteJoint.dampingRatio = def.dampingRatio;\n  joint.revoluteJoint.lowerAngle = Math.min(def.lowerAngle, def.upperAngle);\n  joint.revoluteJoint.upperAngle = Math.max(def.lowerAngle, def.upperAngle);\n  joint.revoluteJoint.lowerAngle = b2ClampFloat(joint.revoluteJoint.lowerAngle, -Math.PI, Math.PI);\n  joint.revoluteJoint.upperAngle = b2ClampFloat(joint.revoluteJoint.upperAngle, -Math.PI, Math.PI);\n  joint.revoluteJoint.maxMotorTorque = def.maxMotorTorque;\n  joint.revoluteJoint.motorSpeed = def.motorSpeed;\n  joint.revoluteJoint.enableSpring = def.enableSpring;\n  joint.revoluteJoint.enableLimit = def.enableLimit;\n  joint.revoluteJoint.enableMotor = def.enableMotor;\n  if (def.collideConnected === false) {\n    b2DestroyContactsBetweenBodies(world, bodyA, bodyB);\n  }\n  const jointId = new b2JointId(joint.jointId + 1, world.worldId, pair.joint.revision);\n  return jointId;\n}\nfunction b2CreatePrismaticJoint(worldId, def) {\n  const world = b2GetWorldFromId(worldId);\n  if (world.locked) {\n    return new b2JointId();\n  }\n  const bodyA = b2GetBodyFullId(world, def.bodyIdA);\n  const bodyB = b2GetBodyFullId(world, def.bodyIdB);\n  const pair = b2CreateJoint(world, bodyA, bodyB, def.userData, 1, b2JointType.b2_prismaticJoint, def.collideConnected);\n  const joint = pair.jointSim;\n  joint.type = b2JointType.b2_prismaticJoint;\n  joint.localOriginAnchorA = def.localAnchorA;\n  joint.localOriginAnchorB = def.localAnchorB;\n  joint.prismaticJoint = new b2PrismaticJoint();\n  joint.prismaticJoint.localAxisA = b2Normalize(def.localAxisA);\n  joint.prismaticJoint.referenceAngle = def.referenceAngle;\n  joint.prismaticJoint.impulse = new b2Vec2(0, 0);\n  joint.prismaticJoint.axialMass = 0;\n  joint.prismaticJoint.springImpulse = 0;\n  joint.prismaticJoint.motorImpulse = 0;\n  joint.prismaticJoint.lowerImpulse = 0;\n  joint.prismaticJoint.upperImpulse = 0;\n  joint.prismaticJoint.hertz = def.hertz;\n  joint.prismaticJoint.dampingRatio = def.dampingRatio;\n  joint.prismaticJoint.lowerTranslation = def.lowerTranslation;\n  joint.prismaticJoint.upperTranslation = def.upperTranslation;\n  joint.prismaticJoint.maxMotorForce = def.maxMotorForce;\n  joint.prismaticJoint.motorSpeed = def.motorSpeed;\n  joint.prismaticJoint.enableSpring = def.enableSpring;\n  joint.prismaticJoint.enableLimit = def.enableLimit;\n  joint.prismaticJoint.enableMotor = def.enableMotor;\n  if (def.collideConnected === false) {\n    b2DestroyContactsBetweenBodies(world, bodyA, bodyB);\n  }\n  const jointId = new b2JointId(joint.jointId + 1, world.worldId, pair.joint.revision);\n  return jointId;\n}\nfunction b2CreateWeldJoint(worldId, def) {\n  const world = b2GetWorldFromId(worldId);\n  if (world.locked) {\n    return new b2JointId();\n  }\n  const bodyA = b2GetBodyFullId(world, def.bodyIdA);\n  const bodyB = b2GetBodyFullId(world, def.bodyIdB);\n  const pair = b2CreateJoint(world, bodyA, bodyB, def.userData, 1, b2JointType.b2_weldJoint, def.collideConnected);\n  const joint = pair.jointSim;\n  joint.type = b2JointType.b2_weldJoint;\n  joint.localOriginAnchorA = def.localAnchorA;\n  joint.localOriginAnchorB = def.localAnchorB;\n  joint.weldJoint = new b2WeldJoint();\n  joint.weldJoint.referenceAngle = def.referenceAngle;\n  joint.weldJoint.linearHertz = def.linearHertz;\n  joint.weldJoint.linearDampingRatio = def.linearDampingRatio;\n  joint.weldJoint.angularHertz = def.angularHertz;\n  joint.weldJoint.angularDampingRatio = def.angularDampingRatio;\n  joint.weldJoint.linearImpulse = new b2Vec2(0, 0);\n  joint.weldJoint.angularImpulse = 0;\n  if (def.collideConnected === false) {\n    b2DestroyContactsBetweenBodies(world, bodyA, bodyB);\n  }\n  const jointId = new b2JointId(joint.jointId + 1, world.worldId, pair.joint.revision);\n  return jointId;\n}\nfunction b2CreateWheelJoint(worldId, def) {\n  const world = b2GetWorldFromId(worldId);\n  if (world.locked) {\n    return new b2JointId();\n  }\n  const bodyA = b2GetBodyFullId(world, def.bodyIdA);\n  const bodyB = b2GetBodyFullId(world, def.bodyIdB);\n  const pair = b2CreateJoint(world, bodyA, bodyB, def.userData, 1, b2JointType.b2_wheelJoint, def.collideConnected);\n  const joint = pair.jointSim;\n  joint.type = b2JointType.b2_wheelJoint;\n  joint.localOriginAnchorA = def.localAnchorA;\n  joint.localOriginAnchorB = def.localAnchorB;\n  joint.wheelJoint = new b2WheelJoint();\n  joint.wheelJoint.localAxisA = b2Normalize(def.localAxisA);\n  joint.wheelJoint.perpMass = 0;\n  joint.wheelJoint.axialMass = 0;\n  joint.wheelJoint.motorImpulse = 0;\n  joint.wheelJoint.lowerImpulse = 0;\n  joint.wheelJoint.upperImpulse = 0;\n  joint.wheelJoint.lowerTranslation = def.lowerTranslation;\n  joint.wheelJoint.upperTranslation = def.upperTranslation;\n  joint.wheelJoint.maxMotorTorque = def.maxMotorTorque;\n  joint.wheelJoint.motorSpeed = def.motorSpeed;\n  joint.wheelJoint.hertz = def.hertz;\n  joint.wheelJoint.dampingRatio = def.dampingRatio;\n  joint.wheelJoint.enableSpring = def.enableSpring;\n  joint.wheelJoint.enableLimit = def.enableLimit;\n  joint.wheelJoint.enableMotor = def.enableMotor;\n  if (def.collideConnected === false) {\n    b2DestroyContactsBetweenBodies(world, bodyA, bodyB);\n  }\n  const jointId = new b2JointId(joint.jointId + 1, world.worldId, pair.joint.revision);\n  return jointId;\n}\nfunction b2DestroyJointInternal(world, joint, wakeBodies) {\n  const jointId = joint.jointId;\n  const edgeA = joint.edges[0];\n  const edgeB = joint.edges[1];\n  const idA = edgeA.bodyId;\n  const idB = edgeB.bodyId;\n  const bodyA = b2GetBody(world, idA);\n  const bodyB = b2GetBody(world, idB);\n  if (edgeA.prevKey !== B2_NULL_INDEX) {\n    const prevJoint = world.jointArray[edgeA.prevKey >> 1];\n    const prevEdge = prevJoint.edges[edgeA.prevKey & 1];\n    prevEdge.nextKey = edgeA.nextKey;\n  }\n  if (edgeA.nextKey !== B2_NULL_INDEX) {\n    const nextJoint = world.jointArray[edgeA.nextKey >> 1];\n    const nextEdge = nextJoint.edges[edgeA.nextKey & 1];\n    nextEdge.prevKey = edgeA.prevKey;\n  }\n  const edgeKeyA = jointId << 1 | 0;\n  if (bodyA.headJointKey === edgeKeyA) {\n    bodyA.headJointKey = edgeA.nextKey;\n  }\n  bodyA.jointCount -= 1;\n  if (edgeB.prevKey !== B2_NULL_INDEX) {\n    const prevJoint = world.jointArray[edgeB.prevKey >> 1];\n    const prevEdge = prevJoint.edges[edgeB.prevKey & 1];\n    prevEdge.nextKey = edgeB.nextKey;\n  }\n  if (edgeB.nextKey !== B2_NULL_INDEX) {\n    const nextJoint = world.jointArray[edgeB.nextKey >> 1];\n    const nextEdge = nextJoint.edges[edgeB.nextKey & 1];\n    nextEdge.prevKey = edgeB.prevKey;\n  }\n  const edgeKeyB = jointId << 1 | 1;\n  if (bodyB.headJointKey === edgeKeyB) {\n    bodyB.headJointKey = edgeB.nextKey;\n  }\n  bodyB.jointCount -= 1;\n  b2UnlinkJoint(world, joint);\n  const setIndex = joint.setIndex;\n  const localIndex = joint.localIndex;\n  if (setIndex === b2SetType.b2_awakeSet) {\n    b2RemoveJointFromGraph(world, joint.edges[0].bodyId, joint.edges[1].bodyId, joint.colorIndex, localIndex);\n  } else {\n    const set = world.solverSetArray[setIndex];\n    const movedIndex = b2RemoveJoint(set.joints, localIndex);\n    if (movedIndex !== B2_NULL_INDEX) {\n      const movedJointSim = set.joints.data[localIndex];\n      const movedId = movedJointSim.jointId;\n      const movedJoint = world.jointArray[movedId];\n      movedJoint.localIndex = localIndex;\n    }\n  }\n  joint.setIndex = B2_NULL_INDEX;\n  joint.colorIndex = B2_NULL_INDEX;\n  joint.localIndex = B2_NULL_INDEX;\n  joint.jointId = B2_NULL_INDEX;\n  joint.type = b2JointType.b2_unknown;\n  b2FreeId(world.jointIdPool, jointId);\n  if (wakeBodies) {\n    b2WakeBody(world, bodyA);\n    b2WakeBody(world, bodyB);\n  }\n  b2ValidateSolverSets(world);\n}\nfunction b2DestroyJoint(jointId) {\n  const world = b2GetWorld(jointId.world0);\n  if (world.locked) {\n    return;\n  }\n  const joint = b2GetJointFullId(world, jointId);\n  b2DestroyJointInternal(world, joint, true);\n}\nfunction b2Joint_GetType(jointId) {\n  const world = b2GetWorld(jointId.world0);\n  const joint = b2GetJointFullId(world, jointId);\n  return joint.type;\n}\nfunction b2Joint_GetBodyA(jointId) {\n  const world = b2GetWorld(jointId.world0);\n  const joint = b2GetJointFullId(world, jointId);\n  return b2MakeBodyId(world, joint.edges[0].bodyId);\n}\nfunction b2Joint_GetBodyB(jointId) {\n  const world = b2GetWorld(jointId.world0);\n  const joint = b2GetJointFullId(world, jointId);\n  return b2MakeBodyId(world, joint.edges[1].bodyId);\n}\nfunction b2Joint_GetLocalAnchorA(jointId) {\n  const world = b2GetWorld(jointId.world0);\n  const joint = b2GetJointFullId(world, jointId);\n  const jointSim = b2GetJointSim(world, joint);\n  return jointSim.localOriginAnchorA;\n}\nfunction b2Joint_GetLocalAnchorB(jointId) {\n  const world = b2GetWorld(jointId.world0);\n  const joint = b2GetJointFullId(world, jointId);\n  const jointSim = b2GetJointSim(world, joint);\n  return jointSim.localOriginAnchorB;\n}\nfunction b2Joint_SetCollideConnected(jointId, shouldCollide) {\n  const world = b2GetWorldLocked(jointId.world0);\n  if (world === null) {\n    return;\n  }\n  const joint = b2GetJointFullId(world, jointId);\n  if (joint.collideConnected === shouldCollide) {\n    return;\n  }\n  joint.collideConnected = shouldCollide;\n  const bodyA = b2GetBody(world, joint.edges[0].bodyId);\n  const bodyB = b2GetBody(world, joint.edges[1].bodyId);\n  if (shouldCollide) {\n    const shapeCountA = bodyA.shapeCount;\n    const shapeCountB = bodyB.shapeCount;\n    let shapeId = shapeCountA < shapeCountB ? bodyA.headShapeId : bodyB.headShapeId;\n    while (shapeId !== B2_NULL_INDEX) {\n      const shape = world.shapeArray[shapeId];\n      if (shape.proxyKey !== B2_NULL_INDEX) {\n        b2BufferMove(world.broadPhase, shape.proxyKey);\n      }\n      shapeId = shape.nextShapeId;\n    }\n  } else {\n    b2DestroyContactsBetweenBodies(world, bodyA, bodyB);\n  }\n}\nfunction b2Joint_GetCollideConnected(jointId) {\n  const world = b2GetWorld(jointId.world0);\n  const joint = b2GetJointFullId(world, jointId);\n  return joint.collideConnected;\n}\nfunction b2Joint_SetUserData(jointId, userData) {\n  const world = b2GetWorld(jointId.world0);\n  const joint = b2GetJointFullId(world, jointId);\n  joint.userData = userData;\n}\nfunction b2Joint_GetUserData(jointId) {\n  const world = b2GetWorld(jointId.world0);\n  const joint = b2GetJointFullId(world, jointId);\n  return joint.userData;\n}\nfunction b2Joint_WakeBodies(jointId) {\n  const world = b2GetWorldLocked(jointId.world0);\n  if (world === null) {\n    return;\n  }\n  const joint = b2GetJointFullId(world, jointId);\n  const bodyA = world.bodyArray[joint.edges[0].bodyId];\n  const bodyB = world.bodyArray[joint.edges[1].bodyId];\n  b2WakeBody(world, bodyA);\n  b2WakeBody(world, bodyB);\n}\nfunction b2Joint_GetConstraintForce(jointId) {\n  const world = b2GetWorld(jointId.world0);\n  const joint = b2GetJointFullId(world, jointId);\n  const base = b2GetJointSim(world, joint);\n  switch (joint.type) {\n    case b2JointType.b2_distanceJoint:\n      return b2GetDistanceJointForce(world, base);\n    case b2JointType.b2_motorJoint:\n      return b2GetMotorJointForce(world, base);\n    case b2JointType.b2_mouseJoint:\n      return b2GetMouseJointForce(world, base);\n    case b2JointType.b2_prismaticJoint:\n      return b2GetPrismaticJointForce(world, base);\n    case b2JointType.b2_revoluteJoint:\n      return b2GetRevoluteJointForce(world, base);\n    case b2JointType.b2_weldJoint:\n      return b2GetWeldJointForce(world, base);\n    case b2JointType.b2_wheelJoint:\n      return b2GetWheelJointForce(world, base);\n    default:\n      return new b2Vec2(0, 0);\n  }\n}\nfunction b2Joint_GetConstraintTorque(jointId) {\n  const world = b2GetWorld(jointId.world0);\n  const joint = b2GetJointFullId(world, jointId);\n  const base = b2GetJointSim(world, joint);\n  switch (joint.type) {\n    case b2JointType.b2_distanceJoint:\n      return 0;\n    case b2JointType.b2_motorJoint:\n      return b2GetMotorJointTorque(world, base);\n    case b2JointType.b2_mouseJoint:\n      return b2GetMouseJointTorque(world, base);\n    case b2JointType.b2_prismaticJoint:\n      return b2GetPrismaticJointTorque(world, base);\n    case b2JointType.b2_revoluteJoint:\n      return b2GetRevoluteJointTorque(world, base);\n    case b2JointType.b2_weldJoint:\n      return b2GetWeldJointTorque(world, base);\n    case b2JointType.b2_wheelJoint:\n      return b2GetWheelJointTorque(world, base);\n    default:\n      return 0;\n  }\n}\nfunction b2PrepareJoint(joint, context) {\n  switch (joint.type) {\n    case b2JointType.b2_distanceJoint:\n      b2PrepareDistanceJoint(joint, context);\n      break;\n    case b2JointType.b2_motorJoint:\n      b2PrepareMotorJoint(joint, context);\n      break;\n    case b2JointType.b2_mouseJoint:\n      b2PrepareMouseJoint(joint, context);\n      break;\n    case b2JointType.b2_prismaticJoint:\n      b2PreparePrismaticJoint(joint, context);\n      break;\n    case b2JointType.b2_revoluteJoint:\n      b2PrepareRevoluteJoint(joint, context);\n      break;\n    case b2JointType.b2_weldJoint:\n      b2PrepareWeldJoint(joint, context);\n      break;\n    case b2JointType.b2_wheelJoint:\n      b2PrepareWheelJoint(joint, context);\n      break;\n    default:\n  }\n}\nfunction b2WarmStartJoint(joint, context) {\n  switch (joint.type) {\n    case b2JointType.b2_distanceJoint:\n      b2WarmStartDistanceJoint(joint, context);\n      break;\n    case b2JointType.b2_motorJoint:\n      b2WarmStartMotorJoint(joint, context);\n      break;\n    case b2JointType.b2_mouseJoint:\n      b2WarmStartMouseJoint(joint, context);\n      break;\n    case b2JointType.b2_prismaticJoint:\n      b2WarmStartPrismaticJoint(joint, context);\n      break;\n    case b2JointType.b2_revoluteJoint:\n      b2WarmStartRevoluteJoint(joint, context);\n      break;\n    case b2JointType.b2_weldJoint:\n      b2WarmStartWeldJoint(joint, context);\n      break;\n    case b2JointType.b2_wheelJoint:\n      b2WarmStartWheelJoint(joint, context);\n      break;\n    default:\n  }\n}\nfunction b2SolveJoint(joint, context, useBias) {\n  switch (joint.type) {\n    case b2JointType.b2_distanceJoint:\n      b2SolveDistanceJoint(joint, context, useBias);\n      break;\n    case b2JointType.b2_motorJoint:\n      b2SolveMotorJoint(joint, context, useBias);\n      break;\n    case b2JointType.b2_mouseJoint:\n      b2SolveMouseJoint(joint, context);\n      break;\n    case b2JointType.b2_prismaticJoint:\n      b2SolvePrismaticJoint(joint, context, useBias);\n      break;\n    case b2JointType.b2_revoluteJoint:\n      b2SolveRevoluteJoint(joint, context, useBias);\n      break;\n    case b2JointType.b2_weldJoint:\n      b2SolveWeldJoint(joint, context, useBias);\n      break;\n    case b2JointType.b2_wheelJoint:\n      b2SolveWheelJoint(joint, context, useBias);\n      break;\n    default:\n  }\n}\nfunction b2PrepareOverflowJoints(context) {\n  const graph = context.graph;\n  const joints = graph.colors[b2_overflowIndex].joints.data;\n  const jointCount = graph.colors[b2_overflowIndex].joints.count;\n  for (let i = 0; i < jointCount; ++i) {\n    const joint = joints[i];\n    b2PrepareJoint(joint, context);\n  }\n}\nfunction b2WarmStartOverflowJoints(context) {\n  const graph = context.graph;\n  const joints = graph.colors[b2_overflowIndex].joints.data;\n  const jointCount = graph.colors[b2_overflowIndex].joints.count;\n  for (let i = 0; i < jointCount; ++i) {\n    const joint = joints[i];\n    b2WarmStartJoint(joint, context);\n  }\n}\nfunction b2SolveOverflowJoints(context, useBias) {\n  const graph = context.graph;\n  const joints = graph.colors[b2_overflowIndex].joints.data;\n  const jointCount = graph.colors[b2_overflowIndex].joints.count;\n  for (let i = 0; i < jointCount; ++i) {\n    const joint = joints[i];\n    b2SolveJoint(joint, context, useBias);\n  }\n}\nfunction b2DrawJoint(draw, world, joint) {\n  const bodyA = b2GetBody(world, joint.edges[0].bodyId);\n  const bodyB = b2GetBody(world, joint.edges[1].bodyId);\n  if (bodyA.setIndex === b2SetType.b2_disabledSet || bodyB.setIndex === b2SetType.b2_disabledSet) {\n    return;\n  }\n  const jointSim = b2GetJointSim(world, joint);\n  const transformA = b2GetBodyTransformQuick(world, bodyA);\n  const transformB = b2GetBodyTransformQuick(world, bodyB);\n  const pA = b2TransformPoint(transformA, jointSim.localOriginAnchorA);\n  const pB = b2TransformPoint(transformB, jointSim.localOriginAnchorB);\n  const color = b2HexColor.b2_colorDarkSeaGreen;\n  switch (joint.type) {\n    case b2JointType.b2_distanceJoint:\n      b2DrawDistanceJoint(draw, jointSim, transformA, transformB);\n      break;\n    case b2JointType.b2_mouseJoint:\n      {\n        const target = jointSim.mouseJoint.targetA;\n        const c1 = b2HexColor.b2_colorGreen;\n        draw.DrawPoint(target.x, target.y, 4, c1, draw.context);\n        draw.DrawPoint(pB.x, pB.y, 4, c1, draw.context);\n        const c2 = b2HexColor.b2_colorGray8;\n        draw.DrawSegment(target, pB, c2, draw.context);\n      }\n      break;\n    case b2JointType.b2_prismaticJoint:\n      b2DrawPrismaticJoint(draw, jointSim, transformA, transformB);\n      break;\n    case b2JointType.b2_revoluteJoint:\n      b2DrawRevoluteJoint(draw, jointSim, transformA, transformB, joint.drawSize);\n      break;\n    case b2JointType.b2_wheelJoint:\n      b2DrawWheelJoint(draw, jointSim, transformA, transformB);\n      break;\n    default:\n      draw.DrawSegment(transformA.p, pA, color, draw.context);\n      draw.DrawSegment(pA, pB, color, draw.context);\n      draw.DrawSegment(transformB.p, pB, color, draw.context);\n  }\n  if (draw.drawGraphColors) {\n    const colors = [\n      b2HexColor.b2_colorRed,\n      b2HexColor.b2_colorOrange,\n      b2HexColor.b2_colorYellow,\n      b2HexColor.b2_colorGreen,\n      b2HexColor.b2_colorCyan,\n      b2HexColor.b2_colorBlue,\n      b2HexColor.b2_colorViolet,\n      b2HexColor.b2_colorPink,\n      b2HexColor.b2_colorChocolate,\n      b2HexColor.b2_colorGoldenrod,\n      b2HexColor.b2_colorCoral,\n      b2HexColor.b2_colorBlack\n    ];\n    const colorIndex = joint.colorIndex;\n    if (colorIndex !== B2_NULL_INDEX) {\n      const p4 = b2Lerp(pA, pB, 0.5);\n      draw.DrawPoint(p4.x, p4.y, 5, colors[colorIndex], draw.context);\n    }\n  }\n}\n\n// src/include/joint_h.js\nvar b2JointEdge = class {\n  constructor() {\n    this.bodyId = B2_NULL_INDEX;\n    this.prevKey = B2_NULL_INDEX;\n    this.nextKey = B2_NULL_INDEX;\n  }\n};\nvar b2Joint = class {\n  constructor() {\n    this.userData = null;\n    this.setIndex = B2_NULL_INDEX;\n    this.colorIndex = B2_NULL_INDEX;\n    this.localIndex = B2_NULL_INDEX;\n    this.edges = [new b2JointEdge(), new b2JointEdge()];\n    this.jointId = B2_NULL_INDEX;\n    this.islandId = B2_NULL_INDEX;\n    this.islandPrev = B2_NULL_INDEX;\n    this.islandNext = B2_NULL_INDEX;\n    this.revision = 0;\n    this.drawSize = 0;\n    this.type = b2JointType.b2_unknown;\n    this.isMarked = false;\n    this.collideConnected = false;\n  }\n};\nvar b2DistanceJoint = class _b2DistanceJoint {\n  constructor() {\n    this.length = 0;\n    this.hertz = 0;\n    this.dampingRatio = 0;\n    this.minLength = 0;\n    this.maxLength = 0;\n    this.maxMotorForce = 0;\n    this.motorSpeed = 0;\n    this.impulse = 0;\n    this.lowerImpulse = 0;\n    this.upperImpulse = 0;\n    this.motorImpulse = 0;\n    this.indexA = B2_NULL_INDEX;\n    this.indexB = B2_NULL_INDEX;\n    this.anchorA = new b2Vec2();\n    this.anchorB = new b2Vec2();\n    this.deltaCenter = new b2Vec2();\n    this.distanceSoftness = new b2Softness();\n    this.axialMass = 0;\n    this.enableSpring = false;\n    this.enableLimit = false;\n    this.enableMotor = false;\n  }\n  clone() {\n    const dj = new _b2DistanceJoint();\n    dj.length = this.length;\n    dj.hertz = this.hertz;\n    dj.dampingRatio = this.dampingRatio;\n    dj.minLength = this.minLength;\n    dj.maxLength = this.maxLength;\n    dj.maxMotorForce = this.maxMotorForce;\n    dj.motorSpeed = this.motorSpeed;\n    dj.impulse = this.impulse;\n    dj.lowerImpulse = this.lowerImpulse;\n    dj.upperImpulse = this.upperImpulse;\n    dj.motorImpulse = this.motorImpulse;\n    dj.indexA = this.indexA;\n    dj.indexB = this.indexB;\n    dj.anchorA = this.anchorA.clone();\n    dj.anchorB = this.anchorB.clone();\n    dj.deltaCenter = this.deltaCenter.clone();\n    dj.distanceSoftness = this.distanceSoftness;\n    dj.axialMass = this.axialMass;\n    dj.enableSpring = this.enableSpring;\n    dj.enableLimit = this.enableLimit;\n    dj.enableMotor = this.enableMotor;\n    return dj;\n  }\n};\nvar b2MotorJoint = class _b2MotorJoint {\n  constructor() {\n    this.linearOffset = new b2Vec2();\n    this.angularOffset = 0;\n    this.linearImpulse = new b2Vec2();\n    this.angularImpulse = 0;\n    this.maxForce = 0;\n    this.maxTorque = 0;\n    this.correctionFactor = 0;\n    this.indexA = B2_NULL_INDEX;\n    this.indexB = B2_NULL_INDEX;\n    this.anchorA = new b2Vec2();\n    this.anchorB = new b2Vec2();\n    this.deltaCenter = new b2Vec2();\n    this.deltaAngle = 0;\n    this.linearMass = new b2Mat22();\n    this.angularMass = 0;\n  }\n  clone() {\n    const mj = new _b2MotorJoint();\n    mj.linearOffset = this.linearOffset.clone();\n    mj.angularOffset = this.angularOffset;\n    mj.linearImpulse = this.linearImpulse.clone();\n    mj.angularImpulse = this.angularImpulse;\n    mj.maxForce = this.maxForce;\n    mj.maxTorque = this.maxTorque;\n    mj.correctionFactor = this.correctionFactor;\n    mj.indexA = this.indexA;\n    mj.indexB = this.indexB;\n    mj.anchorA = this.anchorA.clone();\n    mj.anchorB = this.anchorB.clone();\n    mj.deltaCenter = this.deltaCenter.clone();\n    mj.deltaAngle = this.deltaAngle;\n    mj.linearMass = this.linearMass.clone();\n    mj.angularMass = this.angularMass;\n    return mj;\n  }\n};\nvar b2MouseJoint = class _b2MouseJoint {\n  constructor() {\n    this.targetA = new b2Vec2();\n    this.hertz = 0;\n    this.dampingRatio = 0;\n    this.maxForce = 0;\n    this.linearImpulse = new b2Vec2();\n    this.angularImpulse = 0;\n    this.linearSoftness = new b2Softness();\n    this.angularSoftness = new b2Softness();\n    this.indexB = B2_NULL_INDEX;\n    this.anchorB = new b2Vec2();\n    this.deltaCenter = new b2Vec2();\n    this.linearMass = new b2Mat22();\n  }\n  clone() {\n    const mj = new _b2MouseJoint();\n    mj.targetA = this.targetA.clone();\n    mj.hertz = this.hertz;\n    mj.dampingRatio = this.dampingRatio;\n    mj.maxForce = this.maxForce;\n    mj.linearImpulse = this.linearImpulse.clone();\n    mj.angularImpulse = this.angularImpulse;\n    mj.linearSoftness = this.linearSoftness;\n    mj.angularSoftness = this.angularSoftness;\n    mj.indexB = this.indexB;\n    mj.anchorB = this.anchorB.clone();\n    mj.deltaCenter = this.deltaCenter.clone();\n    mj.linearMass = this.linearMass.clone();\n    return mj;\n  }\n};\nvar b2PrismaticJoint = class _b2PrismaticJoint {\n  constructor() {\n    this.localAxisA = new b2Vec2();\n    this.impulse = new b2Vec2();\n    this.springImpulse = 0;\n    this.motorImpulse = 0;\n    this.lowerImpulse = 0;\n    this.upperImpulse = 0;\n    this.hertz = 0;\n    this.dampingRatio = 0;\n    this.maxMotorForce = 0;\n    this.motorSpeed = 0;\n    this.referenceAngle = 0;\n    this.lowerTranslation = 0;\n    this.upperTranslation = 0;\n    this.indexA = B2_NULL_INDEX;\n    this.indexB = B2_NULL_INDEX;\n    this.anchorA = new b2Vec2();\n    this.anchorB = new b2Vec2();\n    this.axisA = new b2Vec2();\n    this.deltaCenter = new b2Vec2();\n    this.deltaAngle = 0;\n    this.axialMass = 0;\n    this.springSoftness = new b2Softness();\n    this.enableSpring = false;\n    this.enableLimit = false;\n    this.enableMotor = false;\n  }\n  clone() {\n    const pj = new _b2PrismaticJoint();\n    pj.localAxisA = this.localAxisA.clone();\n    pj.impulse = this.impulse.clone();\n    pj.springImpulse = this.springImpulse;\n    pj.motorImpulse = this.motorImpulse;\n    pj.lowerImpulse = this.lowerImpulse;\n    pj.upperImpulse = this.upperImpulse;\n    pj.hertz = this.hertz;\n    pj.dampingRatio = this.dampingRatio;\n    pj.maxMotorForce = this.maxMotorForce;\n    pj.motorSpeed = this.motorSpeed;\n    pj.referenceAngle = this.referenceAngle;\n    pj.lowerTranslation = this.lowerTranslation;\n    pj.upperTranslation = this.upperTranslation;\n    pj.indexA = this.indexA;\n    pj.indexB = this.indexB;\n    pj.anchorA = this.anchorA.clone();\n    pj.anchorB = this.anchorB.clone();\n    pj.axisA = this.axisA.clone();\n    pj.deltaCenter = this.deltaCenter.clone();\n    pj.deltaAngle = this.deltaAngle;\n    pj.axialMass = this.axialMass;\n    pj.springSoftness = this.springSoftness.clone();\n    pj.enableSpring = this.enableSpring;\n    pj.enableLimit = this.enableLimit;\n    pj.enableMotor = this.enableMotor;\n    return pj;\n  }\n};\nvar b2RevoluteJoint = class _b2RevoluteJoint {\n  constructor() {\n    this.linearImpulse = new b2Vec2();\n    this.springImpulse = 0;\n    this.motorImpulse = 0;\n    this.lowerImpulse = 0;\n    this.upperImpulse = 0;\n    this.hertz = 0;\n    this.dampingRatio = 0;\n    this.maxMotorTorque = 0;\n    this.motorSpeed = 0;\n    this.referenceAngle = 0;\n    this.lowerAngle = 0;\n    this.upperAngle = 0;\n    this.indexA = B2_NULL_INDEX;\n    this.indexB = B2_NULL_INDEX;\n    this.anchorA = new b2Vec2();\n    this.anchorB = new b2Vec2();\n    this.deltaCenter = new b2Vec2();\n    this.deltaAngle = 0;\n    this.axialMass = 0;\n    this.springSoftness = new b2Softness();\n    this.enableSpring = false;\n    this.enableMotor = false;\n    this.enableLimit = false;\n  }\n  clone() {\n    const rj = new _b2RevoluteJoint();\n    rj.linearImpulse = this.linearImpulse.clone();\n    rj.springImpulse = this.springImpulse;\n    rj.motorImpulse = this.motorImpulse;\n    rj.lowerImpulse = this.lowerImpulse;\n    rj.upperImpulse = this.upperImpulse;\n    rj.hertz = this.hertz;\n    rj.dampingRatio = this.dampingRatio;\n    rj.maxMotorTorque = this.maxMotorTorque;\n    rj.motorSpeed = this.motorSpeed;\n    rj.referenceAngle = this.referenceAngle;\n    rj.lowerAngle = this.lowerAngle;\n    rj.upperAngle = this.upperAngle;\n    rj.indexA = this.indexA;\n    rj.indexB = this.indexB;\n    rj.anchorA = this.anchorA.clone();\n    rj.anchorB = this.anchorB.clone();\n    rj.deltaCenter = this.deltaCenter.clone();\n    rj.deltaAngle = this.deltaAngle;\n    rj.axialMass = this.axialMass;\n    rj.springSoftness = this.springSoftness;\n    rj.enableSpring = this.enableSpring;\n    rj.enableMotor = this.enableMotor;\n    rj.enableLimit = this.enableLimit;\n    return rj;\n  }\n};\nvar b2WeldJoint = class _b2WeldJoint {\n  constructor() {\n    this.referenceAngle = 0;\n    this.linearHertz = 0;\n    this.linearDampingRatio = 0;\n    this.angularHertz = 0;\n    this.angularDampingRatio = 0;\n    this.linearSoftness = new b2Softness();\n    this.angularSoftness = new b2Softness();\n    this.linearImpulse = new b2Vec2();\n    this.angularImpulse = 0;\n    this.indexA = B2_NULL_INDEX;\n    this.indexB = B2_NULL_INDEX;\n    this.anchorA = new b2Vec2();\n    this.anchorB = new b2Vec2();\n    this.deltaCenter = new b2Vec2();\n    this.deltaAngle = 0;\n    this.axialMass = 0;\n  }\n  clone() {\n    const wj = new _b2WeldJoint();\n    wj.referenceAngle = this.referenceAngle;\n    wj.linearHertz = this.linearHertz;\n    wj.linearDampingRatio = this.linearDampingRatio;\n    wj.angularHertz = this.angularHertz;\n    wj.angularDampingRatio = this.angularDampingRatio;\n    wj.linearSoftness = this.linearSoftness;\n    wj.angularSoftness = this.angularSoftness;\n    wj.linearImpulse = this.linearImpulse.clone();\n    wj.angularImpulse = this.angularImpulse;\n    wj.indexA = this.indexA;\n    wj.indexB = this.indexB;\n    wj.anchorA = this.anchorA.clone();\n    wj.anchorB = this.anchorB.clone();\n    wj.deltaCenter = this.deltaCenter.clone();\n    wj.deltaAngle = this.deltaAngle;\n    wj.axialMass = this.axialMass;\n    return wj;\n  }\n};\nvar b2WheelJoint = class _b2WheelJoint {\n  constructor() {\n    this.localAxisA = new b2Vec2();\n    this.perpImpulse = 0;\n    this.motorImpulse = 0;\n    this.springImpulse = 0;\n    this.lowerImpulse = 0;\n    this.upperImpulse = 0;\n    this.maxMotorTorque = 0;\n    this.motorSpeed = 0;\n    this.lowerTranslation = 0;\n    this.upperTranslation = 0;\n    this.hertz = 0;\n    this.dampingRatio = 0;\n    this.indexA = B2_NULL_INDEX;\n    this.indexB = B2_NULL_INDEX;\n    this.anchorA = new b2Vec2();\n    this.anchorB = new b2Vec2();\n    this.axisA = new b2Vec2();\n    this.deltaCenter = new b2Vec2();\n    this.perpMass = 0;\n    this.motorMass = 0;\n    this.axialMass = 0;\n    this.springSoftness = new b2Softness();\n    this.enableSpring = false;\n    this.enableMotor = false;\n    this.enableLimit = false;\n  }\n  clone() {\n    const wj = new _b2WheelJoint();\n    wj.localAxisA = this.localAxisA.clone();\n    wj.perpImpulse = this.perpImpulse;\n    wj.motorImpulse = this.motorImpulse;\n    wj.springImpulse = this.springImpulse;\n    wj.lowerImpulse = this.lowerImpulse;\n    wj.upperImpulse = this.upperImpulse;\n    wj.maxMotorTorque = this.maxMotorTorque;\n    wj.motorSpeed = this.motorSpeed;\n    wj.lowerTranslation = this.lowerTranslation;\n    wj.upperTranslation = this.upperTranslation;\n    wj.hertz = this.hertz;\n    wj.dampingRatio = this.dampingRatio;\n    wj.indexA = this.indexA;\n    wj.indexB = this.indexB;\n    wj.anchorA = this.anchorA.clone();\n    wj.anchorB = this.anchorB.clone();\n    wj.axisA = this.axisA.clone();\n    wj.deltaCenter = this.deltaCenter.clone();\n    wj.perpMass = this.perpMass;\n    wj.motorMass = this.motorMass;\n    wj.axialMass = this.axialMass;\n    wj.springSoftness = this.springSoftness;\n    wj.enableSpring = this.enableSpring;\n    wj.enableMotor = this.enableMotor;\n    wj.enableLimit = this.enableLimit;\n    return wj;\n  }\n};\nvar b2JointSim = class {\n  constructor() {\n    this.jointId = B2_NULL_INDEX;\n    this.bodyIdA = B2_NULL_INDEX;\n    this.bodyIdB = B2_NULL_INDEX;\n    this.type = b2JointType.b2_unknown;\n    this.localOriginAnchorA = new b2Vec2();\n    this.localOriginAnchorB = new b2Vec2();\n    this.invMassA = 0;\n    this.invMassB = 0;\n    this.invIA = 0;\n    this.invIB = 0;\n    this.joint = null;\n    this.distanceJoint = null;\n    this.motorJoint = null;\n    this.mouseJoint = null;\n    this.revoluteJoint = null;\n    this.prismaticJoint = null;\n    this.weldJoint = null;\n    this.wheelJoint = null;\n  }\n  copyTo(dst) {\n    dst.jointId = this.jointId;\n    dst.bodyIdA = this.bodyIdA;\n    dst.bodyIdB = this.bodyIdB;\n    dst.type = this.type;\n    dst.localOriginAnchorA = this.localOriginAnchorA.clone();\n    dst.localOriginAnchorB = this.localOriginAnchorB.clone();\n    dst.invMassA = this.invMassA;\n    dst.invMassB = this.invMassB;\n    dst.invIA = this.invIA;\n    dst.invIB = this.invIB;\n    dst.joint = this.joint;\n    dst.distanceJoint = this.distanceJoint ? this.distanceJoint.clone() : null;\n    dst.motorJoint = this.motorJoint ? this.motorJoint.clone() : null;\n    dst.mouseJoint = this.mouseJoint ? this.mouseJoint.clone() : null;\n    dst.revoluteJoint = this.revoluteJoint ? this.revoluteJoint.clone() : null;\n    dst.prismaticJoint = this.prismaticJoint ? this.prismaticJoint.clone() : null;\n    dst.weldJoint = this.weldJoint ? this.weldJoint.clone() : null;\n    dst.wheelJoint = this.wheelJoint ? this.wheelJoint.clone() : null;\n  }\n};\n\n// src/island_c.js\nvar b2Island = class {\n  setIndex = 0;\n  localIndex = 0;\n  islandId = 0;\n  headBody = 0;\n  tailBody = 0;\n  bodyCount = 0;\n  headContact = 0;\n  tailContact = 0;\n  contactCount = 0;\n  headJoint = 0;\n  tailJoint = 0;\n  jointCount = 0;\n  parentIsland = 0;\n  constraintRemoveCount = 0;\n};\nvar b2IslandSim = class {\n  islandId = 0;\n};\nfunction b2CreateIsland(world, setIndex) {\n  const islandId = b2AllocId(world.islandIdPool);\n  if (islandId === world.islandArray.length) {\n    const emptyIsland = new b2Island();\n    emptyIsland.setIndex = B2_NULL_INDEX;\n    world.islandArray.push(emptyIsland);\n  } else {\n  }\n  const set = world.solverSetArray[setIndex];\n  const island = world.islandArray[islandId];\n  island.setIndex = setIndex;\n  island.localIndex = set.islands.count;\n  island.islandId = islandId;\n  island.headBody = B2_NULL_INDEX;\n  island.tailBody = B2_NULL_INDEX;\n  island.bodyCount = 0;\n  island.headContact = B2_NULL_INDEX;\n  island.tailContact = B2_NULL_INDEX;\n  island.contactCount = 0;\n  island.headJoint = B2_NULL_INDEX;\n  island.tailJoint = B2_NULL_INDEX;\n  island.jointCount = 0;\n  island.parentIsland = B2_NULL_INDEX;\n  island.constraintRemoveCount = 0;\n  const islandSim = b2AddIsland(set.islands);\n  islandSim.islandId = islandId;\n  return island;\n}\nfunction b2DestroyIsland(world, islandId) {\n  const island = world.islandArray[islandId];\n  const set = world.solverSetArray[island.setIndex];\n  const movedIndex = b2RemoveIsland(set.islands, island.localIndex);\n  if (movedIndex !== B2_NULL_INDEX) {\n    const movedElement = set.islands.data[island.localIndex];\n    const movedId = movedElement.islandId;\n    const movedIsland = world.islandArray[movedId];\n    movedIsland.localIndex = island.localIndex;\n  }\n  island.islandId = B2_NULL_INDEX;\n  island.setIndex = B2_NULL_INDEX;\n  island.localIndex = B2_NULL_INDEX;\n  b2FreeId(world.islandIdPool, islandId);\n}\nfunction b2GetIsland(world, islandId) {\n  return world.islandArray[islandId];\n}\nfunction b2AddContactToIsland(world, islandId, contact) {\n  const island = world.islandArray[islandId];\n  if (island.headContact !== B2_NULL_INDEX) {\n    contact.islandNext = island.headContact;\n    const headContact = world.contactArray[island.headContact];\n    headContact.islandPrev = contact.contactId;\n  }\n  island.headContact = contact.contactId;\n  if (island.tailContact === B2_NULL_INDEX) {\n    island.tailContact = island.headContact;\n  }\n  island.contactCount += 1;\n  contact.islandId = islandId;\n  b2ValidateIsland(world, islandId);\n}\nfunction b2LinkContact(world, contact) {\n  const bodyIdA = contact.edges[0].bodyId;\n  const bodyIdB = contact.edges[1].bodyId;\n  const bodyA = b2GetBody(world, bodyIdA);\n  const bodyB = b2GetBody(world, bodyIdB);\n  if (bodyA.setIndex === b2SetType.b2_awakeSet && bodyB.setIndex >= b2SetType.b2_firstSleepingSet) {\n    b2WakeSolverSet(world, bodyB.setIndex);\n  }\n  if (bodyB.setIndex === b2SetType.b2_awakeSet && bodyA.setIndex >= b2SetType.b2_firstSleepingSet) {\n    b2WakeSolverSet(world, bodyA.setIndex);\n  }\n  let islandIdA = bodyA.islandId;\n  let islandIdB = bodyB.islandId;\n  if (islandIdA === islandIdB) {\n    b2AddContactToIsland(world, islandIdA, contact);\n    return;\n  }\n  let islandA = null;\n  if (islandIdA !== B2_NULL_INDEX) {\n    islandA = b2GetIsland(world, islandIdA);\n    let parentId = islandA.parentIsland;\n    while (parentId !== B2_NULL_INDEX) {\n      const parent = b2GetIsland(world, parentId);\n      if (parent.parentIsland !== B2_NULL_INDEX) {\n        islandA.parentIsland = parent.parentIsland;\n      }\n      islandA = parent;\n      islandIdA = parentId;\n      parentId = islandA.parentIsland;\n    }\n  }\n  let islandB = null;\n  if (islandIdB !== B2_NULL_INDEX) {\n    islandB = b2GetIsland(world, islandIdB);\n    let parentId = islandB.parentIsland;\n    while (islandB.parentIsland !== B2_NULL_INDEX) {\n      const parent = b2GetIsland(world, parentId);\n      if (parent.parentIsland !== B2_NULL_INDEX) {\n        islandB.parentIsland = parent.parentIsland;\n      }\n      islandB = parent;\n      islandIdB = parentId;\n      parentId = islandB.parentIsland;\n    }\n  }\n  if (islandA !== islandB && islandA !== null && islandB !== null) {\n    islandB.parentIsland = islandIdA;\n  }\n  if (islandA !== null) {\n    b2AddContactToIsland(world, islandIdA, contact);\n  } else {\n    b2AddContactToIsland(world, islandIdB, contact);\n  }\n}\nfunction b2UnlinkContact(world, contact) {\n  const islandId = contact.islandId;\n  const island = b2GetIsland(world, islandId);\n  if (contact.islandPrev !== B2_NULL_INDEX) {\n    const prevContact = world.contactArray[contact.islandPrev];\n    prevContact.islandNext = contact.islandNext;\n  }\n  if (contact.islandNext !== B2_NULL_INDEX) {\n    const nextContact = world.contactArray[contact.islandNext];\n    nextContact.islandPrev = contact.islandPrev;\n  }\n  if (island.headContact === contact.contactId) {\n    island.headContact = contact.islandNext;\n  }\n  if (island.tailContact === contact.contactId) {\n    island.tailContact = contact.islandPrev;\n  }\n  island.contactCount -= 1;\n  island.constraintRemoveCount += 1;\n  contact.islandId = B2_NULL_INDEX;\n  contact.islandPrev = B2_NULL_INDEX;\n  contact.islandNext = B2_NULL_INDEX;\n  b2ValidateIsland(world, islandId);\n}\nfunction b2AddJointToIsland(world, islandId, joint) {\n  const island = world.islandArray[islandId];\n  if (island.headJoint !== B2_NULL_INDEX) {\n    joint.islandNext = island.headJoint;\n    const headJoint = b2GetJoint(world, island.headJoint);\n    headJoint.islandPrev = joint.jointId;\n  }\n  island.headJoint = joint.jointId;\n  if (island.tailJoint === B2_NULL_INDEX) {\n    island.tailJoint = island.headJoint;\n  }\n  island.jointCount += 1;\n  joint.islandId = islandId;\n  b2ValidateIsland(world, islandId);\n}\nfunction b2LinkJoint(world, joint) {\n  const bodyA = b2GetBody(world, joint.edges[0].bodyId);\n  const bodyB = b2GetBody(world, joint.edges[1].bodyId);\n  if (bodyA.setIndex === b2SetType.b2_awakeSet && bodyB.setIndex >= b2SetType.b2_firstSleepingSet) {\n    b2WakeSolverSet(world, bodyB.setIndex);\n  } else if (bodyB.setIndex === b2SetType.b2_awakeSet && bodyA.setIndex >= b2SetType.b2_firstSleepingSet) {\n    b2WakeSolverSet(world, bodyA.setIndex);\n  }\n  let islandIdA = bodyA.islandId;\n  let islandIdB = bodyB.islandId;\n  if (islandIdA === islandIdB) {\n    b2AddJointToIsland(world, islandIdA, joint);\n    return;\n  }\n  let islandA = null;\n  if (islandIdA !== B2_NULL_INDEX) {\n    islandA = b2GetIsland(world, islandIdA);\n    while (islandA.parentIsland !== B2_NULL_INDEX) {\n      const parent = b2GetIsland(world, islandA.parentIsland);\n      if (parent.parentIsland !== B2_NULL_INDEX) {\n        islandA.parentIsland = parent.parentIsland;\n      }\n      islandIdA = islandA.parentIsland;\n      islandA = parent;\n    }\n  }\n  let islandB = null;\n  if (islandIdB !== B2_NULL_INDEX) {\n    islandB = b2GetIsland(world, islandIdB);\n    while (islandB.parentIsland !== B2_NULL_INDEX) {\n      const parent = b2GetIsland(world, islandB.parentIsland);\n      if (parent.parentIsland !== B2_NULL_INDEX) {\n        islandB.parentIsland = parent.parentIsland;\n      }\n      islandIdB = islandB.parentIsland;\n      islandB = parent;\n    }\n  }\n  if (islandA !== islandB && islandA !== null && islandB !== null) {\n    islandB.parentIsland = islandIdA;\n  }\n  if (islandA !== null) {\n    b2AddJointToIsland(world, islandIdA, joint);\n  } else {\n    b2AddJointToIsland(world, islandIdB, joint);\n  }\n}\nfunction b2UnlinkJoint(world, joint) {\n  const islandId = joint.islandId;\n  const island = world.islandArray[islandId];\n  if (joint.islandPrev !== B2_NULL_INDEX) {\n    const prevJoint = b2GetJoint(world, joint.islandPrev);\n    prevJoint.islandNext = joint.islandNext;\n  }\n  if (joint.islandNext !== B2_NULL_INDEX) {\n    const nextJoint = b2GetJoint(world, joint.islandNext);\n    nextJoint.islandPrev = joint.islandPrev;\n  }\n  if (island.headJoint === joint.jointId) {\n    island.headJoint = joint.islandNext;\n  }\n  if (island.tailJoint === joint.jointId) {\n    island.tailJoint = joint.islandPrev;\n  }\n  island.jointCount -= 1;\n  island.constraintRemoveCount += 1;\n  joint.islandId = B2_NULL_INDEX;\n  joint.islandPrev = B2_NULL_INDEX;\n  joint.islandNext = B2_NULL_INDEX;\n  b2ValidateIsland(world, islandId);\n}\nfunction b2MergeIsland(world, island) {\n  const rootId = island.parentIsland;\n  const rootIsland = world.islandArray[rootId];\n  let bodyId = island.headBody;\n  while (bodyId !== B2_NULL_INDEX) {\n    const body = b2GetBody(world, bodyId);\n    body.islandId = rootId;\n    bodyId = body.islandNext;\n  }\n  let contactId = island.headContact;\n  while (contactId !== B2_NULL_INDEX) {\n    const contact = world.contactArray[contactId];\n    contact.islandId = rootId;\n    contactId = contact.islandNext;\n  }\n  let jointId = island.headJoint;\n  while (jointId !== B2_NULL_INDEX) {\n    const joint = b2GetJoint(world, jointId);\n    joint.islandId = rootId;\n    jointId = joint.islandNext;\n  }\n  const tailBody = b2GetBody(world, rootIsland.tailBody);\n  tailBody.islandNext = island.headBody;\n  const headBody = b2GetBody(world, island.headBody);\n  headBody.islandPrev = rootIsland.tailBody;\n  rootIsland.tailBody = island.tailBody;\n  rootIsland.bodyCount += island.bodyCount;\n  if (rootIsland.headContact === B2_NULL_INDEX) {\n    rootIsland.headContact = island.headContact;\n    rootIsland.tailContact = island.tailContact;\n    rootIsland.contactCount = island.contactCount;\n  } else if (island.headContact !== B2_NULL_INDEX) {\n    const tailContact = world.contactArray[rootIsland.tailContact];\n    tailContact.islandNext = island.headContact;\n    const headContact = world.contactArray[island.headContact];\n    headContact.islandPrev = rootIsland.tailContact;\n    rootIsland.tailContact = island.tailContact;\n    rootIsland.contactCount += island.contactCount;\n  }\n  if (rootIsland.headJoint === B2_NULL_INDEX) {\n    rootIsland.headJoint = island.headJoint;\n    rootIsland.tailJoint = island.tailJoint;\n    rootIsland.jointCount = island.jointCount;\n  } else if (island.headJoint !== B2_NULL_INDEX) {\n    const tailJoint = b2GetJoint(world, rootIsland.tailJoint);\n    tailJoint.islandNext = island.headJoint;\n    const headJoint = b2GetJoint(world, island.headJoint);\n    headJoint.islandPrev = rootIsland.tailJoint;\n    rootIsland.tailJoint = island.tailJoint;\n    rootIsland.jointCount += island.jointCount;\n  }\n  rootIsland.constraintRemoveCount += island.constraintRemoveCount;\n  b2ValidateIsland(world, rootId);\n}\nfunction b2MergeAwakeIslands(world) {\n  const awakeSet = world.solverSetArray[b2SetType.b2_awakeSet];\n  const islandSims = awakeSet.islands.data;\n  const awakeIslandCount = awakeSet.islands.count;\n  const islands = world.islandArray;\n  for (let i = 0; i < awakeIslandCount; ++i) {\n    const islandId = islandSims[i].islandId;\n    const island = islands[islandId];\n    let rootId = islandId;\n    let rootIsland = island;\n    while (rootIsland.parentIsland !== B2_NULL_INDEX) {\n      const parent = islands[rootIsland.parentIsland];\n      if (parent.parentIsland !== B2_NULL_INDEX) {\n        rootIsland.parentIsland = parent.parentIsland;\n      }\n      rootId = rootIsland.parentIsland;\n      rootIsland = parent;\n    }\n    if (rootIsland !== island) {\n      island.parentIsland = rootId;\n    }\n  }\n  for (let i = awakeIslandCount - 1; i >= 0; --i) {\n    const islandId = islandSims[i].islandId;\n    const island = islands[islandId];\n    if (island.parentIsland === B2_NULL_INDEX) {\n      continue;\n    }\n    b2MergeIsland(world, island);\n    b2DestroyIsland(world, islandId);\n  }\n  b2ValidateConnectivity(world);\n}\nfunction b2SplitIsland(world, baseId) {\n  const baseIsland = world.islandArray[baseId];\n  const setIndex = baseIsland.setIndex;\n  if (setIndex !== b2SetType.b2_awakeSet) {\n    return;\n  }\n  if (baseIsland.constraintRemoveCount === 0) {\n    return;\n  }\n  b2ValidateIsland(world, baseId);\n  const bodyCount = baseIsland.bodyCount;\n  const bodies = world.bodyArray;\n  const contacts = world.contactArray;\n  const stack2 = [];\n  const bodyIds = [];\n  let nextBody = baseIsland.headBody;\n  while (nextBody !== B2_NULL_INDEX) {\n    bodyIds.push(nextBody);\n    const body = bodies[nextBody];\n    body.isMarked = false;\n    nextBody = body.islandNext;\n  }\n  let nextContactId = baseIsland.headContact;\n  while (nextContactId !== B2_NULL_INDEX) {\n    const contact = contacts[nextContactId];\n    contact.isMarked = false;\n    nextContactId = contact.islandNext;\n  }\n  let nextJoint = baseIsland.headJoint;\n  while (nextJoint !== B2_NULL_INDEX) {\n    const joint = b2GetJoint(world, nextJoint);\n    joint.isMarked = false;\n    nextJoint = joint.islandNext;\n  }\n  b2DestroyIsland(world, baseId);\n  for (let i = 0; i < bodyCount; ++i) {\n    const seedIndex = bodyIds[i];\n    const seed = bodies[seedIndex];\n    if (seed.isMarked === true) {\n      continue;\n    }\n    stack2.push(seedIndex);\n    seed.isMarked = true;\n    const island = b2CreateIsland(world, setIndex);\n    const islandId = island.islandId;\n    while (stack2.length > 0) {\n      const bodyId = stack2.pop();\n      const body = bodies[bodyId];\n      body.islandId = islandId;\n      if (island.tailBody !== B2_NULL_INDEX) {\n        bodies[island.tailBody].islandNext = bodyId;\n      }\n      body.islandPrev = island.tailBody;\n      body.islandNext = B2_NULL_INDEX;\n      island.tailBody = bodyId;\n      if (island.headBody === B2_NULL_INDEX) {\n        island.headBody = bodyId;\n      }\n      island.bodyCount += 1;\n      let contactKey = body.headContactKey;\n      while (contactKey !== B2_NULL_INDEX) {\n        const contactId = contactKey >> 1;\n        const edgeIndex = contactKey & 1;\n        const contact = world.contactArray[contactId];\n        contactKey = contact.edges[edgeIndex].nextKey;\n        if (contact.isMarked) {\n          continue;\n        }\n        if (contact.flags & b2ContactFlags.b2_contactSensorFlag) {\n          continue;\n        }\n        if ((contact.flags & b2ContactFlags.b2_contactTouchingFlag) === 0) {\n          continue;\n        }\n        contact.isMarked = true;\n        const otherEdgeIndex = edgeIndex ^ 1;\n        const otherBodyId = contact.edges[otherEdgeIndex].bodyId;\n        const otherBody = bodies[otherBodyId];\n        if (otherBody.isMarked === false && otherBody.setIndex !== b2SetType.b2_staticSet) {\n          stack2.push(otherBodyId);\n          otherBody.isMarked = true;\n        }\n        contact.islandId = islandId;\n        if (island.tailContact !== B2_NULL_INDEX) {\n          const tailContact = world.contactArray[island.tailContact];\n          tailContact.islandNext = contactId;\n        }\n        contact.islandPrev = island.tailContact;\n        contact.islandNext = B2_NULL_INDEX;\n        island.tailContact = contactId;\n        if (island.headContact === B2_NULL_INDEX) {\n          island.headContact = contactId;\n        }\n        island.contactCount += 1;\n      }\n      let jointKey = body.headJointKey;\n      while (jointKey !== B2_NULL_INDEX) {\n        const jointId = jointKey >> 1;\n        const edgeIndex = jointKey & 1;\n        const joint = b2GetJoint(world, jointId);\n        jointKey = joint.edges[edgeIndex].nextKey;\n        if (joint.isMarked) {\n          continue;\n        }\n        joint.isMarked = true;\n        const otherEdgeIndex = edgeIndex ^ 1;\n        const otherBodyId = joint.edges[otherEdgeIndex].bodyId;\n        const otherBody = bodies[otherBodyId];\n        if (otherBody.setIndex === b2SetType.b2_disabledSet) {\n          continue;\n        }\n        if (otherBody.isMarked === false && otherBody.setIndex === b2SetType.b2_awakeSet) {\n          stack2.push(otherBodyId);\n          otherBody.isMarked = true;\n        }\n        joint.islandId = islandId;\n        if (island.tailJoint !== B2_NULL_INDEX) {\n          const tailJoint = b2GetJoint(world, island.tailJoint);\n          tailJoint.islandNext = jointId;\n        }\n        joint.islandPrev = island.tailJoint;\n        joint.islandNext = B2_NULL_INDEX;\n        island.tailJoint = jointId;\n        if (island.headJoint === B2_NULL_INDEX) {\n          island.headJoint = jointId;\n        }\n        island.jointCount += 1;\n      }\n    }\n    b2ValidateIsland(world, islandId);\n  }\n}\nfunction b2ValidateIsland(world, islandId) {\n  if (!b2Validation) {\n    return;\n  }\n  b2CheckIndex(world.islandArray, islandId);\n  const island = world.islandArray[islandId];\n  {\n    const bodies = world.bodyArray;\n    if (island.bodyCount > 1) {\n    }\n    let count = 0;\n    let bodyId = island.headBody;\n    while (bodyId != B2_NULL_INDEX) {\n      b2CheckIndex(bodies, bodyId);\n      const body = bodies[bodyId];\n      count += 1;\n      if (count == island.bodyCount) {\n      }\n      bodyId = body.islandNext;\n    }\n  }\n  if (island.headContact != B2_NULL_INDEX) {\n    if (island.contactCount > 1) {\n    }\n    let count = 0;\n    let contactId = island.headContact;\n    while (contactId != B2_NULL_INDEX) {\n      b2CheckIndex(world.contactArray, contactId);\n      const contact = world.contactArray[contactId];\n      count += 1;\n      if (count == island.contactCount) {\n      }\n      contactId = contact.islandNext;\n    }\n  } else {\n  }\n  if (island.headJoint != B2_NULL_INDEX) {\n    if (island.jointCount > 1) {\n    }\n    let count = 0;\n    let jointId = island.headJoint;\n    while (jointId != B2_NULL_INDEX) {\n      b2CheckIndex(world.jointArray, jointId);\n      const joint = world.jointArray[jointId];\n      count += 1;\n      if (count == island.jointCount) {\n      }\n      jointId = joint.islandNext;\n    }\n  } else {\n  }\n}\n\n// src/body_c.js\nfunction b2MakeSweep(bodySim, out) {\n  out.c1.x = bodySim.center0X;\n  out.c1.y = bodySim.center0Y;\n  out.c2.copy(bodySim.center);\n  out.q1.copy(bodySim.rotation0);\n  out.q2.copy(bodySim.transform.q);\n  out.localCenter.copy(bodySim.localCenter);\n  return out;\n}\nfunction b2GetBody(world, bodyId) {\n  return world.bodyArray[bodyId];\n}\nfunction b2GetBodyFullId(world, bodyId) {\n  return b2GetBody(world, bodyId.index1 - 1);\n}\nfunction b2GetBodyTransformQuick(world, body) {\n  const set = world.solverSetArray[body.setIndex];\n  const bodySim = set.sims.data[body.localIndex];\n  return bodySim.transform;\n}\nfunction b2GetBodyTransform(world, bodyId) {\n  const body = world.bodyArray[bodyId];\n  return b2GetBodyTransformQuick(world, body);\n}\nfunction b2MakeBodyId(world, bodyId) {\n  const body = world.bodyArray[bodyId];\n  return new b2BodyId(bodyId + 1, world.worldId, body.revision);\n}\nfunction b2GetBodySim(world, body) {\n  const set = world.solverSetArray[body.setIndex];\n  return set.sims.data[body.localIndex];\n}\nfunction b2GetBodyState(world, body) {\n  if (body.setIndex === b2SetType.b2_awakeSet) {\n    const set = world.solverSetArray[b2SetType.b2_awakeSet];\n    return set.states.data[body.localIndex];\n  }\n  return null;\n}\nfunction b2CreateIslandForBody(world, setIndex, body) {\n  const island = b2CreateIsland(world, setIndex);\n  body.islandId = island.islandId;\n  island.headBody = body.id;\n  island.tailBody = body.id;\n  island.bodyCount = 1;\n}\nfunction b2RemoveBodyFromIsland(world, body) {\n  if (body.islandId === B2_NULL_INDEX) {\n    return;\n  }\n  const islandId = body.islandId;\n  const island = world.islandArray[islandId];\n  if (body.islandPrev !== B2_NULL_INDEX) {\n    const prevBody = b2GetBody(world, body.islandPrev);\n    prevBody.islandNext = body.islandNext;\n  }\n  if (body.islandNext !== B2_NULL_INDEX) {\n    const nextBody = b2GetBody(world, body.islandNext);\n    nextBody.islandPrev = body.islandPrev;\n  }\n  island.bodyCount -= 1;\n  let islandDestroyed = false;\n  if (island.headBody === body.id) {\n    island.headBody = body.islandNext;\n    if (island.headBody === B2_NULL_INDEX) {\n      b2DestroyIsland(world, island.islandId);\n      islandDestroyed = true;\n    }\n  } else if (island.tailBody === body.id) {\n    island.tailBody = body.islandPrev;\n  }\n  if (islandDestroyed === false) {\n    b2ValidateIsland(world, islandId);\n  }\n  body.islandId = B2_NULL_INDEX;\n  body.islandPrev = B2_NULL_INDEX;\n  body.islandNext = B2_NULL_INDEX;\n}\nfunction b2DestroyBodyContacts(world, body, wakeBodies) {\n  let edgeKey = body.headContactKey;\n  while (edgeKey !== B2_NULL_INDEX) {\n    const contactId = edgeKey >> 1;\n    const edgeIndex = edgeKey & 1;\n    const contact = world.contactArray[contactId];\n    edgeKey = contact.edges[edgeIndex].nextKey;\n    b2DestroyContact(world, contact, wakeBodies);\n  }\n  b2ValidateSolverSets(world);\n}\nfunction b2CreateBody(worldId, def) {\n  const world = b2GetWorldFromId(worldId);\n  if (world.locked) {\n    return new b2BodyId(0, 0, 0);\n  }\n  const isAwake = (def.isAwake || def.enableSleep === false) && def.isEnabled;\n  let setId;\n  if (def.isEnabled === false) {\n    setId = b2SetType.b2_disabledSet;\n  } else if (def.type === b2BodyType.b2_staticBody) {\n    setId = b2SetType.b2_staticSet;\n  } else if (isAwake === true) {\n    setId = b2SetType.b2_awakeSet;\n  } else {\n    setId = b2AllocId(world.solverSetIdPool);\n    if (setId === world.solverSetArray.length) {\n      const set2 = new b2SolverSet();\n      set2.setIndex = setId;\n      world.solverSetArray.push(set2);\n    } else {\n    }\n    world.solverSetArray[setId].setIndex = setId;\n  }\n  const bodyId = b2AllocId(world.bodyIdPool);\n  const set = world.solverSetArray[setId];\n  const bodySim = b2AddBodySim(set.sims);\n  Object.assign(bodySim, {\n    transform: new b2Transform(def.position, def.rotation),\n    center: def.position.clone(),\n    rotation0: def.rotation,\n    center0X: def.position.x,\n    center0Y: def.position.y,\n    localCenter: new b2Vec2(),\n    force: new b2Vec2(),\n    torque: 0,\n    mass: 0,\n    invMass: 0,\n    inertia: 0,\n    invInertia: 0,\n    minExtent: B2_HUGE,\n    maxExtent: 0,\n    linearDamping: def.linearDamping,\n    angularDamping: def.angularDamping,\n    gravityScale: def.gravityScale,\n    bodyId,\n    isBullet: def.isBullet,\n    allowFastRotation: def.allowFastRotation,\n    enlargeAABB: false,\n    isFast: false,\n    isSpeedCapped: false\n  });\n  if (setId === b2SetType.b2_awakeSet) {\n    const bodyState = b2AddBodyState(set.states);\n    Object.assign(bodyState, {\n      linearVelocity: def.linearVelocity,\n      angularVelocity: def.angularVelocity,\n      deltaRotation: new b2Rot()\n    });\n  }\n  while (bodyId >= world.bodyArray.length) {\n    world.bodyArray.push(new b2Body());\n  }\n  const body = world.bodyArray[bodyId];\n  Object.assign(body, {\n    userData: def.userData,\n    setIndex: setId,\n    localIndex: set.sims.count - 1,\n    revision: body.revision + 1,\n    headShapeId: B2_NULL_INDEX,\n    shapeCount: 0,\n    headChainId: B2_NULL_INDEX,\n    headContactKey: B2_NULL_INDEX,\n    contactCount: 0,\n    headJointKey: B2_NULL_INDEX,\n    // PJB NOTE: combination of joint id (>> 1) and edge index (& 0x01)\n    jointCount: 0,\n    islandId: B2_NULL_INDEX,\n    islandPrev: B2_NULL_INDEX,\n    islandNext: B2_NULL_INDEX,\n    bodyMoveIndex: B2_NULL_INDEX,\n    id: bodyId,\n    // PJB NOTE: body.id is bodyId (is index in worldBodyArray)\n    sleepThreshold: def.sleepThreshold,\n    sleepTime: 0,\n    type: def.type,\n    enableSleep: def.enableSleep,\n    fixedRotation: def.fixedRotation,\n    isSpeedCapped: false,\n    isMarked: false,\n    updateBodyMass: def.updateBodyMass\n  });\n  if (setId >= b2SetType.b2_awakeSet) {\n    b2CreateIslandForBody(world, setId, body);\n  }\n  b2ValidateSolverSets(world);\n  return new b2BodyId(bodyId + 1, world.worldId, body.revision);\n}\nfunction b2WakeBody(world, body) {\n  if (body.setIndex >= b2SetType.b2_firstSleepingSet) {\n    b2WakeSolverSet(world, body.setIndex);\n    return true;\n  }\n  return false;\n}\nfunction b2DestroyBody(bodyId) {\n  const world = b2GetWorldLocked(bodyId.world0);\n  if (world === null) {\n    return;\n  }\n  const body = b2GetBodyFullId(world, bodyId);\n  const wakeBodies = true;\n  let edgeKey = body.headJointKey;\n  while (edgeKey !== B2_NULL_INDEX) {\n    const jointId = edgeKey >> 1;\n    const edgeIndex = edgeKey & 1;\n    const joint = world.jointArray[jointId];\n    edgeKey = joint.edges[edgeIndex].nextKey;\n    b2DestroyJointInternal(world, joint, wakeBodies);\n  }\n  b2DestroyBodyContacts(world, body, wakeBodies);\n  let shapeId = body.headShapeId;\n  while (shapeId !== B2_NULL_INDEX) {\n    const shape = world.shapeArray[shapeId];\n    b2DestroyShapeProxy(shape, world.broadPhase);\n    b2FreeId(world.shapeIdPool, shapeId);\n    shape.id = B2_NULL_INDEX;\n    shapeId = shape.nextShapeId;\n  }\n  let chainId = body.headChainId;\n  while (chainId !== B2_NULL_INDEX) {\n    const chain = world.chainArray[chainId];\n    chain.shapeIndices = null;\n    b2FreeId(world.chainIdPool, chainId);\n    chain.id = B2_NULL_INDEX;\n    chainId = chain.nextChainId;\n  }\n  b2RemoveBodyFromIsland(world, body);\n  const set = world.solverSetArray[body.setIndex];\n  const movedIndex = b2RemoveBodySim(set.sims, body.localIndex);\n  if (movedIndex !== B2_NULL_INDEX) {\n    const movedSim = set.sims.data[body.localIndex];\n    const movedId = movedSim.bodyId;\n    const movedBody = world.bodyArray[movedId];\n    movedBody.localIndex = body.localIndex;\n  }\n  if (body.setIndex === b2SetType.b2_awakeSet) {\n    const result = b2RemoveBodyState(set.states, body.localIndex);\n  } else if (set.setIndex >= b2SetType.b2_firstSleepingSet && set.sims.count == 0) {\n    b2DestroySolverSet(world, set.setIndex);\n  }\n  b2FreeId(world.bodyIdPool, body.id);\n  body.setIndex = B2_NULL_INDEX;\n  body.localIndex = B2_NULL_INDEX;\n  body.id = B2_NULL_INDEX;\n  b2ValidateSolverSets(world);\n}\nfunction b2Body_GetContactCapacity(bodyId) {\n  const world = b2GetWorldLocked(bodyId.world0);\n  if (world === null) {\n    return 0;\n  }\n  const body = b2GetBodyFullId(world, bodyId);\n  return body.contactCount;\n}\nfunction b2Body_GetContactData(bodyId, contactData, capacity) {\n  const world = b2GetWorldLocked(bodyId.world0);\n  if (world === null) {\n    return 0;\n  }\n  const body = b2GetBodyFullId(world, bodyId);\n  let contactKey = body.headContactKey;\n  let index = 0;\n  while (contactKey !== B2_NULL_INDEX && index < capacity) {\n    const contactId = contactKey >> 1;\n    const edgeIndex = contactKey & 1;\n    const contact = world.contactArray[contactId];\n    if (contact.flags & b2ContactFlags.b2_contactTouchingFlag) {\n      const shapeA = world.shapeArray[contact.shapeIdA];\n      const shapeB = world.shapeArray[contact.shapeIdB];\n      contactData[index].shapeIdA = new b2ShapeId(shapeA.id + 1, bodyId.world0, shapeA.revision);\n      contactData[index].shapeIdB = new b2ShapeId(shapeB.id + 1, bodyId.world0, shapeB.revision);\n      const contactSim = b2GetContactSim(world, contact);\n      contactData[index].manifold = contactSim.manifold;\n      index += 1;\n    }\n    contactKey = contact.edges[edgeIndex].nextKey;\n  }\n  return index;\n}\nfunction b2Body_ComputeAABB(bodyId) {\n  const world = b2GetWorldLocked(bodyId.world0);\n  if (world === null) {\n    return new b2AABB();\n  }\n  const body = b2GetBodyFullId(world, bodyId);\n  if (body.headShapeId === B2_NULL_INDEX) {\n    const transform = b2GetBodyTransform(world, body.id);\n    const aabb2 = new b2AABB(transform.p.x, transform.p.y, transform.p.x, transform.p.y);\n    return aabb2;\n  }\n  let shape = world.shapeArray[body.headShapeId];\n  let aabb = shape.aabb;\n  while (shape.nextShapeId !== B2_NULL_INDEX) {\n    shape = world.shapeArray[shape.nextShapeId];\n    aabb = b2AABB_Union(aabb, shape.aabb);\n  }\n  return aabb;\n}\nfunction b2UpdateBodyMassData(world, body) {\n  const bodySim = b2GetBodySim(world, body);\n  bodySim.mass = 0;\n  bodySim.invMass = 0;\n  bodySim.inertia = 0;\n  bodySim.invInertia = 0;\n  bodySim.minExtent = B2_HUGE;\n  bodySim.maxExtent = 0;\n  if (body.type !== b2BodyType.b2_dynamicBody) {\n    bodySim.center = bodySim.transform.p.clone();\n    if (body.type === b2BodyType.b2_kinematicBody) {\n      let shapeId2 = body.headShapeId;\n      while (shapeId2 !== B2_NULL_INDEX) {\n        const s = world.shapeArray[shapeId2];\n        shapeId2 = s.nextShapeId;\n        const extent = b2ComputeShapeExtent(s, new b2Vec2());\n        bodySim.minExtent = Math.min(bodySim.minExtent, extent.minExtent);\n        bodySim.maxExtent = Math.max(bodySim.maxExtent, extent.maxExtent);\n      }\n    }\n    return;\n  }\n  let localCenter = new b2Vec2();\n  let shapeId = body.headShapeId;\n  while (shapeId !== B2_NULL_INDEX) {\n    const s = world.shapeArray[shapeId];\n    shapeId = s.nextShapeId;\n    if (s.density === 0) {\n      continue;\n    }\n    const massData = b2ComputeShapeMass(s);\n    bodySim.mass += massData.mass;\n    localCenter = b2MulAdd(localCenter, massData.mass, massData.center);\n    bodySim.inertia += massData.rotationalInertia;\n  }\n  if (bodySim.mass > 0) {\n    bodySim.invMass = 1 / bodySim.mass;\n    localCenter = b2MulSV(bodySim.invMass, localCenter);\n  }\n  if (bodySim.inertia > 0 && body.fixedRotation === false) {\n    bodySim.inertia -= bodySim.mass * b2Dot(localCenter, localCenter);\n    bodySim.invInertia = 1 / bodySim.inertia;\n  } else {\n    bodySim.inertia = 0;\n    bodySim.invInertia = 0;\n  }\n  const oldCenter = bodySim.center.clone();\n  bodySim.localCenter = localCenter;\n  bodySim.center = b2TransformPoint(bodySim.transform, bodySim.localCenter);\n  const state = b2GetBodyState(world, body);\n  if (state !== null) {\n    const deltaLinear = b2CrossSV(state.angularVelocity, b2Sub(bodySim.center, oldCenter));\n    state.linearVelocity = b2Add(state.linearVelocity, deltaLinear);\n  }\n  shapeId = body.headShapeId;\n  while (shapeId !== B2_NULL_INDEX) {\n    const s = world.shapeArray[shapeId];\n    shapeId = s.nextShapeId;\n    const extent = b2ComputeShapeExtent(s, localCenter);\n    bodySim.minExtent = Math.min(bodySim.minExtent, extent.minExtent);\n    bodySim.maxExtent = Math.max(bodySim.maxExtent, extent.maxExtent);\n  }\n}\nfunction b2Body_GetPosition(bodyId) {\n  const world = b2GetWorld(bodyId.world0);\n  const body = b2GetBodyFullId(world, bodyId);\n  const transform = b2GetBodyTransformQuick(world, body);\n  return transform.p;\n}\nfunction b2Body_GetRotation(bodyId) {\n  const world = b2GetWorld(bodyId.world0);\n  const body = b2GetBodyFullId(world, bodyId);\n  const transform = b2GetBodyTransformQuick(world, body);\n  return transform.q;\n}\nfunction b2Body_GetTransform(bodyId) {\n  const world = b2GetWorld(bodyId.world0);\n  const body = b2GetBodyFullId(world, bodyId);\n  return b2GetBodyTransformQuick(world, body);\n}\nfunction b2Body_GetLocalPoint(bodyId, worldPoint) {\n  const world = b2GetWorld(bodyId.world0);\n  const body = b2GetBodyFullId(world, bodyId);\n  const transform = b2GetBodyTransformQuick(world, body);\n  return b2InvTransformPoint(transform, worldPoint);\n}\nfunction b2Body_GetWorldPoint(bodyId, localPoint) {\n  const world = b2GetWorld(bodyId.world0);\n  const body = b2GetBodyFullId(world, bodyId);\n  const transform = b2GetBodyTransformQuick(world, body);\n  return b2TransformPoint(transform, localPoint);\n}\nfunction b2Body_GetLocalVector(bodyId, worldVector) {\n  const world = b2GetWorld(bodyId.world0);\n  const body = b2GetBodyFullId(world, bodyId);\n  const transform = b2GetBodyTransformQuick(world, body);\n  return b2InvRotateVector(transform.q, worldVector);\n}\nfunction b2Body_GetWorldVector(bodyId, localVector) {\n  const world = b2GetWorld(bodyId.world0);\n  const body = b2GetBodyFullId(world, bodyId);\n  const transform = b2GetBodyTransformQuick(world, body);\n  return b2RotateVector(transform.q, localVector);\n}\nfunction b2Body_SetTransform(bodyId, position, rotation) {\n  const world = b2GetWorld(bodyId.world0);\n  const body = b2GetBodyFullId(world, bodyId);\n  const bodySim = b2GetBodySim(world, body);\n  bodySim.transform.p = position;\n  if (rotation !== void 0) {\n    bodySim.transform.q = rotation;\n  }\n  bodySim.center = b2TransformPoint(bodySim.transform, bodySim.localCenter);\n  bodySim.rotation0 = bodySim.transform.q;\n  bodySim.center0X = bodySim.center.x;\n  bodySim.center0Y = bodySim.center.y;\n  const broadPhase = world.broadPhase;\n  const transform = bodySim.transform;\n  const margin = b2_aabbMargin;\n  const speculativeDistance = b2_speculativeDistance;\n  let shapeId = body.headShapeId;\n  while (shapeId !== B2_NULL_INDEX) {\n    const shape = world.shapeArray[shapeId];\n    const aabb = b2ComputeShapeAABB(shape, transform);\n    aabb.lowerBoundX -= speculativeDistance;\n    aabb.lowerBoundY -= speculativeDistance;\n    aabb.upperBoundX += speculativeDistance;\n    aabb.upperBoundY += speculativeDistance;\n    shape.aabb = aabb;\n    if (b2AABB_Contains(shape.fatAABB, aabb) === false) {\n      const fatAABB = new b2AABB(\n        aabb.lowerBoundX - margin,\n        aabb.lowerBoundY - margin,\n        aabb.upperBoundX + margin,\n        aabb.upperBoundY + margin\n      );\n      shape.fatAABB = fatAABB;\n      if (shape.proxyKey !== B2_NULL_INDEX) {\n        b2BroadPhase_MoveProxy(broadPhase, shape.proxyKey, fatAABB);\n      }\n    }\n    shapeId = shape.nextShapeId;\n  }\n}\nfunction b2Body_GetLinearVelocity(bodyId) {\n  const world = b2GetWorld(bodyId.world0);\n  const body = b2GetBodyFullId(world, bodyId);\n  const state = b2GetBodyState(world, body);\n  if (state !== null) {\n    return state.linearVelocity.clone();\n  }\n  return new b2Vec2();\n}\nfunction b2Body_GetAngularVelocity(bodyId) {\n  const world = b2GetWorld(bodyId.world0);\n  const body = b2GetBodyFullId(world, bodyId);\n  const state = b2GetBodyState(world, body);\n  if (state !== null) {\n    return state.angularVelocity;\n  }\n  return 0;\n}\nfunction b2Body_SetLinearVelocity(bodyId, linearVelocity) {\n  const world = b2GetWorld(bodyId.world0);\n  const body = b2GetBodyFullId(world, bodyId);\n  if (body.type == b2BodyType.b2_staticBody) {\n    return;\n  }\n  if (b2LengthSquared(linearVelocity) > 0) {\n    b2WakeBody(world, body);\n  }\n  const state = b2GetBodyState(world, body);\n  if (state === null) {\n    return;\n  }\n  state.linearVelocity = linearVelocity;\n}\nfunction b2Body_SetAngularVelocity(bodyId, angularVelocity) {\n  const world = b2GetWorld(bodyId.world0);\n  const body = b2GetBodyFullId(world, bodyId);\n  if (body.type == b2BodyType.b2_staticBody || body.fixedRotation) {\n    return;\n  }\n  if (angularVelocity !== 0) {\n    b2WakeBody(world, body);\n  }\n  const state = b2GetBodyState(world, body);\n  if (state === null) {\n    return;\n  }\n  state.angularVelocity = angularVelocity;\n}\nfunction b2Body_ApplyForce(bodyId, force, point, wake) {\n  const world = b2GetWorld(bodyId.world0);\n  const body = b2GetBodyFullId(world, bodyId);\n  if (wake && body.setIndex >= b2SetType.b2_firstSleepingSet) {\n    b2WakeBody(world, body);\n  }\n  if (body.setIndex === b2SetType.b2_awakeSet) {\n    const bodySim = b2GetBodySim(world, body);\n    bodySim.force = b2Add(bodySim.force, force);\n    bodySim.torque += b2Cross(b2Sub(point, bodySim.center), force);\n  }\n}\nfunction b2Body_ApplyForceToCenter(bodyId, force, wake) {\n  const world = b2GetWorld(bodyId.world0);\n  const body = b2GetBodyFullId(world, bodyId);\n  if (wake && body.setIndex >= b2SetType.b2_firstSleepingSet) {\n    b2WakeBody(world, body);\n  }\n  if (body.setIndex === b2SetType.b2_awakeSet) {\n    const bodySim = b2GetBodySim(world, body);\n    bodySim.force = b2Add(bodySim.force, force);\n  }\n}\nfunction b2Body_ApplyTorque(bodyId, torque, wake) {\n  const world = b2GetWorld(bodyId.world0);\n  const body = b2GetBodyFullId(world, bodyId);\n  if (wake && body.setIndex >= b2SetType.b2_firstSleepingSet) {\n    b2WakeBody(world, body);\n  }\n  if (body.setIndex === b2SetType.b2_awakeSet) {\n    const bodySim = b2GetBodySim(world, body);\n    bodySim.torque += torque;\n  }\n}\nfunction b2Body_ApplyLinearImpulse(bodyId, impulse, point, wake) {\n  const world = b2GetWorld(bodyId.world0);\n  const body = b2GetBodyFullId(world, bodyId);\n  if (wake && body.setIndex >= b2SetType.b2_firstSleepingSet) {\n    b2WakeBody(world, body);\n  }\n  if (body.setIndex === b2SetType.b2_awakeSet) {\n    const localIndex = body.localIndex;\n    const set = world.solverSetArray[b2SetType.b2_awakeSet];\n    const state = set.states.data[localIndex];\n    const bodySim = set.sims.data[localIndex];\n    state.linearVelocity = b2MulAdd(state.linearVelocity, bodySim.invMass, impulse);\n    state.angularVelocity += bodySim.invInertia * b2Cross(b2Sub(point, bodySim.center), impulse);\n  }\n}\nfunction b2Body_ApplyLinearImpulseToCenter(bodyId, impulse, wake) {\n  const world = b2GetWorld(bodyId.world0);\n  const body = b2GetBodyFullId(world, bodyId);\n  if (wake && body.setIndex >= b2SetType.b2_firstSleepingSet) {\n    b2WakeBody(world, body);\n  }\n  if (body.setIndex === b2SetType.b2_awakeSet) {\n    const localIndex = body.localIndex;\n    const set = world.solverSetArray[b2SetType.b2_awakeSet];\n    const state = set.states.data[localIndex];\n    const bodySim = set.sims.data[localIndex];\n    state.linearVelocity = b2MulAdd(state.linearVelocity, bodySim.invMass, impulse);\n  }\n}\nfunction b2Body_ApplyAngularImpulse(bodyId, impulse, wake) {\n  const world = b2GetWorld(bodyId.world0);\n  const id = bodyId.index1 - 1;\n  const body = world.bodyArray[id];\n  if (wake && body.setIndex >= b2SetType.b2_firstSleepingSet) {\n    b2WakeBody(world, body);\n  }\n  if (body.setIndex === b2SetType.b2_awakeSet) {\n    const localIndex = body.localIndex;\n    const set = world.solverSetArray[b2SetType.b2_awakeSet];\n    const state = set.states.data[localIndex];\n    const sim = set.sims.data[localIndex];\n    state.angularVelocity += sim.invInertia * impulse;\n  }\n}\nfunction b2Body_GetType(bodyId) {\n  const world = b2GetWorld(bodyId.world0);\n  const body = b2GetBodyFullId(world, bodyId);\n  return body.type;\n}\nfunction b2Body_SetType(bodyId, type) {\n  const world = b2GetWorld(bodyId.world0);\n  const body = b2GetBodyFullId(world, bodyId);\n  const originalType = body.type;\n  if (originalType === type) {\n    return;\n  }\n  if (body.setIndex === b2SetType.b2_disabledSet) {\n    body.type = type;\n    b2UpdateBodyMassData(world, body);\n    return;\n  }\n  const wakeBodies = false;\n  b2DestroyBodyContacts(world, body, wakeBodies);\n  b2WakeBody(world, body);\n  {\n    let jointKey = body.headJointKey;\n    while (jointKey !== B2_NULL_INDEX) {\n      const jointId = jointKey >> 1;\n      const edgeIndex = jointKey & 1;\n      const joint = world.jointArray[jointId];\n      if (joint.islandId !== B2_NULL_INDEX) {\n        b2UnlinkJoint(world, joint);\n      }\n      const bodyA = world.bodyArray[joint.edges[0].bodyId];\n      const bodyB = world.bodyArray[joint.edges[1].bodyId];\n      b2WakeBody(world, bodyA);\n      b2WakeBody(world, bodyB);\n      jointKey = joint.edges[edgeIndex].nextKey;\n    }\n  }\n  body.type = type;\n  if (originalType === b2BodyType.staticBody) {\n    const staticSet = world.solverSetArray[b2SetType.b2_staticSet];\n    const awakeSet = world.solverSetArray[b2SetType.b2_awakeSet];\n    b2TransferBody(world, awakeSet, staticSet, body);\n    b2CreateIslandForBody(world, b2SetType.b2_awakeSet, body);\n    let jointKey = body.headJointKey;\n    while (jointKey !== B2_NULL_INDEX) {\n      const jointId = jointKey >> 1;\n      const edgeIndex = jointKey & 1;\n      const joint = world.jointArray[jointId];\n      if (joint.setIndex === b2SetType.b2_staticSet) {\n        b2TransferJoint(world, awakeSet, staticSet, joint);\n      } else if (joint.setIndex === b2SetType.b2_awakeSet) {\n        b2TransferJoint(world, staticSet, awakeSet, joint);\n        b2TransferJoint(world, awakeSet, staticSet, joint);\n      } else {\n      }\n      jointKey = joint.edges[edgeIndex].nextKey;\n    }\n    const transform = b2GetBodyTransformQuick(world, body);\n    let shapeId = body.headShapeId;\n    while (shapeId !== B2_NULL_INDEX) {\n      const shape = world.shapeArray[shapeId];\n      shapeId = shape.nextShapeId;\n      b2DestroyShapeProxy(shape, world.broadPhase);\n      const forcePairCreation = true;\n      const proxyType = type;\n      b2CreateShapeProxy(shape, world.broadPhase, proxyType, transform, forcePairCreation);\n    }\n  } else if (type === b2BodyType.b2_staticBody) {\n    const staticSet = world.solverSetArray[b2SetType.b2_staticSet];\n    const awakeSet = world.solverSetArray[b2SetType.b2_awakeSet];\n    b2TransferBody(world, staticSet, awakeSet, body);\n    b2RemoveBodyFromIsland(world, body);\n    let jointKey = body.headJointKey;\n    while (jointKey !== B2_NULL_INDEX) {\n      const jointId = jointKey >> 1;\n      const edgeIndex = jointKey & 1;\n      const joint = world.jointArray[jointId];\n      jointKey = joint.edges[edgeIndex].nextKey;\n      const otherEdgeIndex = edgeIndex ^ 1;\n      const otherBody = world.bodyArray[joint.edges[otherEdgeIndex].bodyId];\n      if (joint.setIndex === b2SetType.b2_disabledSet) {\n        continue;\n      }\n      if (otherBody.setIndex === b2SetType.b2_staticSet) {\n        b2TransferJoint(world, staticSet, awakeSet, joint);\n      } else {\n        b2TransferJoint(world, staticSet, awakeSet, joint);\n        b2TransferJoint(world, awakeSet, staticSet, joint);\n      }\n    }\n    const transform = b2GetBodyTransformQuick(world, body);\n    let shapeId = body.headShapeId;\n    while (shapeId !== B2_NULL_INDEX) {\n      const shape = world.shapeArray[shapeId];\n      shapeId = shape.nextShapeId;\n      b2DestroyShapeProxy(shape, world.broadPhase);\n      const forcePairCreation = true;\n      b2CreateShapeProxy(shape, world.broadPhase, b2BodyType.b2_staticBody, transform, forcePairCreation);\n    }\n  } else {\n    const transform = b2GetBodyTransformQuick(world, body);\n    let shapeId = body.headShapeId;\n    while (shapeId !== B2_NULL_INDEX) {\n      const shape = world.shapeArray[shapeId];\n      shapeId = shape.nextShapeId;\n      b2DestroyShapeProxy(shape, world.broadPhase);\n      const proxyType = type;\n      const forcePairCreation = true;\n      b2CreateShapeProxy(shape, world.broadPhase, proxyType, transform, forcePairCreation);\n    }\n  }\n  {\n    let jointKey = body.headJointKey;\n    while (jointKey !== B2_NULL_INDEX) {\n      const jointId = jointKey >> 1;\n      const edgeIndex = jointKey & 1;\n      const joint = world.jointArray[jointId];\n      jointKey = joint.edges[edgeIndex].nextKey;\n      const otherEdgeIndex = edgeIndex ^ 1;\n      const otherBodyId = joint.edges[otherEdgeIndex].bodyId;\n      const otherBody = world.bodyArray[otherBodyId];\n      if (otherBody.setIndex === b2SetType.b2_disabledSet) {\n        continue;\n      }\n      if (body.type === b2BodyType.b2_staticBody && otherBody.type === b2BodyType.b2_staticBody) {\n        continue;\n      }\n      b2LinkJoint(world, joint);\n    }\n  }\n  b2UpdateBodyMassData(world, body);\n  b2ValidateConnectivity(world);\n  b2ValidateSolverSets(world);\n}\nfunction b2Body_SetUserData(bodyId, userData) {\n  const world = b2GetWorld(bodyId.world0);\n  const body = b2GetBodyFullId(world, bodyId);\n  body.userData = userData;\n}\nfunction b2Body_GetUserData(bodyId) {\n  const world = b2GetWorld(bodyId.world0);\n  const body = b2GetBodyFullId(world, bodyId);\n  return body.userData;\n}\nfunction b2Body_GetMass(bodyId) {\n  const world = b2GetWorld(bodyId.world0);\n  const body = b2GetBodyFullId(world, bodyId);\n  const bodySim = b2GetBodySim(world, body);\n  return bodySim.mass;\n}\nfunction b2Body_GetInertiaTensor(bodyId) {\n  const world = b2GetWorld(bodyId.world0);\n  const body = b2GetBodyFullId(world, bodyId);\n  const bodySim = b2GetBodySim(world, body);\n  return bodySim.inertia;\n}\nfunction b2Body_GetLocalCenterOfMass(bodyId) {\n  const world = b2GetWorld(bodyId.world0);\n  const body = b2GetBodyFullId(world, bodyId);\n  const bodySim = b2GetBodySim(world, body);\n  return bodySim.localCenter.clone();\n}\nfunction b2Body_GetWorldCenterOfMass(bodyId) {\n  const world = b2GetWorld(bodyId.world0);\n  const body = b2GetBodyFullId(world, bodyId);\n  const bodySim = b2GetBodySim(world, body);\n  return bodySim.center.clone();\n}\nfunction b2Body_SetMassData(bodyId, massData) {\n  const world = b2GetWorldLocked(bodyId.world0);\n  if (world === null) {\n    return;\n  }\n  const body = b2GetBodyFullId(world, bodyId);\n  const bodySim = b2GetBodySim(world, body);\n  bodySim.mass = massData.mass;\n  bodySim.inertia = massData.rotationalInertia;\n  bodySim.localCenter = massData.center;\n  const center = b2TransformPoint(bodySim.transform, massData.center);\n  bodySim.center = center;\n  bodySim.center0X = center.x;\n  bodySim.center0Y = center.y;\n  bodySim.invMass = bodySim.mass > 0 ? 1 / bodySim.mass : 0;\n  bodySim.invInertia = bodySim.inertia > 0 ? 1 / bodySim.inertia : 0;\n}\nfunction b2Body_GetMassData(bodyId) {\n  const world = b2GetWorld(bodyId.world0);\n  const body = b2GetBodyFullId(world, bodyId);\n  const bodySim = b2GetBodySim(world, body);\n  const massData = new b2MassData();\n  massData.mass = bodySim.mass;\n  massData.center = bodySim.localCenter;\n  massData.rotationalInertia = bodySim.inertia;\n  return massData;\n}\nfunction b2Body_ApplyMassFromShapes(bodyId) {\n  const world = b2GetWorldLocked(bodyId.world0);\n  if (world === null) {\n    return;\n  }\n  const body = b2GetBodyFullId(world, bodyId);\n  b2UpdateBodyMassData(world, body);\n}\nfunction b2Body_SetLinearDamping(bodyId, linearDamping) {\n  const world = b2GetWorldLocked(bodyId.world0);\n  if (world === null) {\n    return;\n  }\n  const body = b2GetBodyFullId(world, bodyId);\n  const bodySim = b2GetBodySim(world, body);\n  bodySim.linearDamping = linearDamping;\n}\nfunction b2Body_GetLinearDamping(bodyId) {\n  const world = b2GetWorld(bodyId.world0);\n  const body = b2GetBodyFullId(world, bodyId);\n  const bodySim = b2GetBodySim(world, body);\n  return bodySim.linearDamping;\n}\nfunction b2Body_SetAngularDamping(bodyId, angularDamping) {\n  const world = b2GetWorldLocked(bodyId.world0);\n  if (world === null) {\n    return;\n  }\n  const body = b2GetBodyFullId(world, bodyId);\n  const bodySim = b2GetBodySim(world, body);\n  bodySim.angularDamping = angularDamping;\n}\nfunction b2Body_GetAngularDamping(bodyId) {\n  const world = b2GetWorld(bodyId.world0);\n  const body = b2GetBodyFullId(world, bodyId);\n  const bodySim = b2GetBodySim(world, body);\n  return bodySim.angularDamping;\n}\nfunction b2Body_SetGravityScale(bodyId, gravityScale) {\n  const world = b2GetWorldLocked(bodyId.world0);\n  if (world === null) {\n    return;\n  }\n  const body = b2GetBodyFullId(world, bodyId);\n  const bodySim = b2GetBodySim(world, body);\n  bodySim.gravityScale = gravityScale;\n}\nfunction b2Body_GetGravityScale(bodyId) {\n  const world = b2GetWorld(bodyId.world0);\n  const body = b2GetBodyFullId(world, bodyId);\n  const bodySim = b2GetBodySim(world, body);\n  return bodySim.gravityScale;\n}\nfunction b2Body_IsAwake(bodyId) {\n  const world = b2GetWorld(bodyId.world0);\n  const body = b2GetBodyFullId(world, bodyId);\n  return body.setIndex === b2SetType.b2_awakeSet;\n}\nfunction b2Body_SetAwake(bodyId, awake) {\n  const world = b2GetWorldLocked(bodyId.world0);\n  if (world === null) {\n    return;\n  }\n  const body = b2GetBodyFullId(world, bodyId);\n  if (awake && body.setIndex >= b2SetType.b2_firstSleepingSet) {\n    b2WakeBody(world, body);\n  } else if (awake === false && body.setIndex === b2SetType.b2_awakeSet) {\n    const island = world.islandArray[body.islandId];\n    if (island.constraintRemoveCount > 0) {\n      b2SplitIsland(world, body.islandId);\n    }\n    b2TrySleepIsland(world, body.islandId);\n  }\n}\nfunction b2Body_IsEnabled(bodyId) {\n  const world = b2GetWorld(bodyId.world0);\n  const body = b2GetBodyFullId(world, bodyId);\n  return body.setIndex !== b2SetType.b2_disabledSet;\n}\nfunction b2Body_IsSleepEnabled(bodyId) {\n  const world = b2GetWorld(bodyId.world0);\n  const body = b2GetBodyFullId(world, bodyId);\n  return body.enableSleep;\n}\nfunction b2Body_SetSleepThreshold(bodyId, sleepVelocity) {\n  const world = b2GetWorld(bodyId.world0);\n  const body = b2GetBodyFullId(world, bodyId);\n  body.sleepThreshold = sleepVelocity;\n}\nfunction b2Body_GetSleepThreshold(bodyId) {\n  const world = b2GetWorld(bodyId.world0);\n  const body = b2GetBodyFullId(world, bodyId);\n  return body.sleepThreshold;\n}\nfunction b2Body_EnableSleep(bodyId, enableSleep) {\n  const world = b2GetWorldLocked(bodyId.world0);\n  if (world === null) {\n    return;\n  }\n  const body = b2GetBodyFullId(world, bodyId);\n  body.enableSleep = enableSleep;\n  if (enableSleep === false) {\n    b2WakeBody(world, body);\n  }\n}\nfunction b2Body_Disable(bodyId) {\n  const world = b2GetWorldLocked(bodyId.world0);\n  if (world === null) {\n    return;\n  }\n  const body = b2GetBodyFullId(world, bodyId);\n  if (body.setIndex === b2SetType.b2_disabledSet) {\n    return;\n  }\n  const wakeBodies = true;\n  b2DestroyBodyContacts(world, body, wakeBodies);\n  b2RemoveBodyFromIsland(world, body);\n  let shapeId = body.headShapeId;\n  while (shapeId !== B2_NULL_INDEX) {\n    const shape = world.shapeArray[shapeId];\n    shapeId = shape.nextShapeId;\n    b2DestroyShapeProxy(shape, world.broadPhase);\n  }\n  const set = world.solverSetArray[body.setIndex];\n  const disabledSet = world.solverSetArray[b2SetType.b2_disabledSet];\n  b2TransferBody(world, disabledSet, set, body);\n  let jointKey = body.headJointKey;\n  while (jointKey !== B2_NULL_INDEX) {\n    const jointId = jointKey >> 1;\n    const edgeIndex = jointKey & 1;\n    const joint = world.jointArray[jointId];\n    jointKey = joint.edges[edgeIndex].nextKey;\n    if (joint.setIndex === b2SetType.b2_disabledSet) {\n      continue;\n    }\n    if (joint.islandId !== B2_NULL_INDEX) {\n      b2UnlinkJoint(world, joint);\n    }\n    const jointSet = world.solverSetArray[joint.setIndex];\n    b2TransferJoint(world, disabledSet, jointSet, joint);\n  }\n  b2ValidateConnectivity(world);\n  b2ValidateSolverSets(world);\n}\nfunction b2Body_Enable(bodyId) {\n  const world = b2GetWorldLocked(bodyId.world0);\n  if (world === null) {\n    return;\n  }\n  const body = b2GetBodyFullId(world, bodyId);\n  if (body.setIndex !== b2SetType.b2_disabledSet) {\n    return;\n  }\n  const disabledSet = world.solverSetArray[b2SetType.b2_disabledSet];\n  const setId = body.type === b2BodyType.b2_staticBody ? b2SetType.b2_staticSet : b2SetType.b2_awakeSet;\n  const targetSet = world.solverSetArray[setId];\n  b2TransferBody(world, targetSet, disabledSet, body);\n  const transform = b2GetBodyTransformQuick(world, body);\n  const proxyType = body.type;\n  const forcePairCreation = true;\n  let shapeId = body.headShapeId;\n  while (shapeId !== B2_NULL_INDEX) {\n    const shape = world.shapeArray[shapeId];\n    shapeId = shape.nextShapeId;\n    b2CreateShapeProxy(shape, world.broadPhase, proxyType, transform, forcePairCreation);\n  }\n  if (setId !== b2SetType.b2_staticSet) {\n    b2CreateIslandForBody(world, setId, body);\n  }\n  let jointKey = body.headJointKey;\n  while (jointKey !== B2_NULL_INDEX) {\n    const jointId = jointKey >> 1;\n    const edgeIndex = jointKey & 1;\n    const joint = world.jointArray[jointId];\n    jointKey = joint.edges[edgeIndex].nextKey;\n    const bodyA = world.bodyArray[joint.edges[0].bodyId];\n    const bodyB = world.bodyArray[joint.edges[1].bodyId];\n    if (bodyA.setIndex === b2SetType.b2_disabledSet || bodyB.setIndex === b2SetType.b2_disabledSet) {\n      continue;\n    }\n    let jointSetId;\n    if (bodyA.setIndex === b2SetType.b2_staticSet && bodyB.setIndex === b2SetType.b2_staticSet) {\n      jointSetId = b2SetType.b2_staticSet;\n    } else if (bodyA.setIndex === b2SetType.b2_staticSet) {\n      jointSetId = bodyB.setIndex;\n    } else {\n      jointSetId = bodyA.setIndex;\n    }\n    const jointSet = world.solverSetArray[jointSetId];\n    b2TransferJoint(world, jointSet, disabledSet, joint);\n    if (jointSetId !== b2SetType.b2_staticSet) {\n      b2LinkJoint(world, joint);\n    }\n  }\n  b2ValidateConnectivity(world);\n  b2ValidateSolverSets(world);\n}\nfunction b2Body_SetFixedRotation(bodyId, flag) {\n  const world = b2GetWorldLocked(bodyId.world0);\n  if (world === null) {\n    return;\n  }\n  const body = b2GetBodyFullId(world, bodyId);\n  if (body.fixedRotation !== flag) {\n    body.fixedRotation = flag;\n    const state = b2GetBodyState(world, body);\n    if (state !== null) {\n      state.angularVelocity = 0;\n    }\n    b2UpdateBodyMassData(world, body);\n  }\n}\nfunction b2Body_IsFixedRotation(bodyId) {\n  const world = b2GetWorld(bodyId.world0);\n  const body = b2GetBodyFullId(world, bodyId);\n  return body.fixedRotation;\n}\nfunction b2Body_SetBullet(bodyId, flag) {\n  const world = b2GetWorldLocked(bodyId.world0);\n  if (world === null) {\n    return;\n  }\n  const body = b2GetBodyFullId(world, bodyId);\n  const bodySim = b2GetBodySim(world, body);\n  bodySim.isBullet = flag;\n}\nfunction b2Body_IsBullet(bodyId) {\n  const world = b2GetWorld(bodyId.world0);\n  const body = b2GetBodyFullId(world, bodyId);\n  const bodySim = b2GetBodySim(world, body);\n  return bodySim.isBullet;\n}\nfunction b2Body_EnableHitEvents(bodyId, enableHitEvents) {\n  const world = b2GetWorld(bodyId.world0);\n  const body = b2GetBodyFullId(world, bodyId);\n  let shapeId = body.headShapeId;\n  while (shapeId !== B2_NULL_INDEX) {\n    const shape = world.shapeArray[shapeId];\n    shape.enableHitEvents = enableHitEvents;\n    shapeId = shape.nextShapeId;\n  }\n}\nfunction b2Body_GetShapeCount(bodyId) {\n  const world = b2GetWorld(bodyId.world0);\n  const body = b2GetBodyFullId(world, bodyId);\n  return body.shapeCount;\n}\nfunction b2Body_GetShapes(bodyId, shapeArray) {\n  const world = b2GetWorld(bodyId.world0);\n  const body = b2GetBodyFullId(world, bodyId);\n  let shapeId = body.headShapeId;\n  let shapeCount = 0;\n  while (shapeId !== B2_NULL_INDEX) {\n    const shape = world.shapeArray[shapeId];\n    const id = new b2ShapeId(shape.id + 1, bodyId.world0, shape.revision);\n    shapeArray[shapeCount] = id;\n    shapeCount += 1;\n    shapeId = shape.nextShapeId;\n  }\n  return shapeCount;\n}\nfunction b2Body_GetJointCount(bodyId) {\n  const world = b2GetWorld(bodyId.world0);\n  const body = b2GetBodyFullId(world, bodyId);\n  return body.jointCount;\n}\nfunction b2Body_GetJoints(bodyId, jointArray, capacity) {\n  const world = b2GetWorld(bodyId.world0);\n  const body = b2GetBodyFullId(world, bodyId);\n  let jointKey = body.headJointKey;\n  let jointCount = 0;\n  while (jointKey !== B2_NULL_INDEX && jointCount < capacity) {\n    const jointId = jointKey >> 1;\n    const edgeIndex = jointKey & 1;\n    const joint = b2GetJoint(world, jointId);\n    const id = new b2JointId();\n    id.index1 = jointId + 1;\n    id.world0 = bodyId.world0;\n    id.revision = joint.revision;\n    jointArray[jointCount] = id;\n    jointCount += 1;\n    jointKey = joint.edges[edgeIndex].nextKey;\n  }\n  return jointCount;\n}\nfunction b2ShouldBodiesCollide(world, bodyA, bodyB) {\n  if (bodyA.type !== b2BodyType.b2_dynamicBody && bodyB.type !== b2BodyType.b2_dynamicBody) {\n    return false;\n  }\n  let jointKey;\n  let otherBodyId;\n  if (bodyA.jointCount < bodyB.jointCount) {\n    jointKey = bodyA.headJointKey;\n    otherBodyId = bodyB.id;\n  } else {\n    jointKey = bodyB.headJointKey;\n    otherBodyId = bodyA.id;\n  }\n  while (jointKey !== B2_NULL_INDEX) {\n    const jointId = jointKey >> 1;\n    const edgeIndex = jointKey & 1;\n    const otherEdgeIndex = edgeIndex ^ 1;\n    const joint = b2GetJoint(world, jointId);\n    if (joint.collideConnected === false && joint.edges[otherEdgeIndex].bodyId === otherBodyId) {\n      return false;\n    }\n    jointKey = joint.edges[edgeIndex].nextKey;\n  }\n  return true;\n}\nfunction resetProperties(obj) {\n  const resetProperty = (item) => {\n    if (typeof item === \"object\" && item !== null) {\n      Object.keys(item).forEach((key) => {\n        switch (typeof item[key]) {\n          case \"number\":\n            item[key] = 0;\n            break;\n          case \"boolean\":\n            item[key] = false;\n            break;\n          case \"string\":\n            item[key] = \"\";\n            break;\n          case \"object\":\n            if (Array.isArray(item[key])) {\n            } else if (item[key] !== null) {\n              resetProperty(item[key]);\n            } else {\n              item[key] = null;\n            }\n            break;\n        }\n      });\n    }\n  };\n  resetProperty(obj);\n}\n\n// src/include/body_h.js\nvar b2Body = class {\n  constructor() {\n    this.userData = null;\n    this.setIndex = 0;\n    this.localIndex = 0;\n    this.headContactKey = 0;\n    this.contactCount = 0;\n    this.headShapeId = 0;\n    this.shapeCount = 0;\n    this.headChainId = 0;\n    this.headJointKey = B2_NULL_INDEX;\n    this.jointCount = 0;\n    this.islandId = 0;\n    this.islandPrev = 0;\n    this.islandNext = 0;\n    this.sleepThreshold = 0;\n    this.sleepTime = 0;\n    this.bodyMoveIndex = 0;\n    this.id = B2_NULL_INDEX;\n    this.type = b2BodyType.b2_staticBody;\n    this.revision = 0;\n    this.enableSleep = false;\n    this.fixedRotation = false;\n    this.isSpeedCapped = false;\n    this.isMarked = false;\n    this.updateBodyMass = false;\n  }\n};\nvar b2BodyState = class {\n  constructor() {\n    this.linearVelocity = new b2Vec2(0, 0);\n    this.angularVelocity = 0;\n    this.flags = 0;\n    this.deltaPosition = new b2Vec2(0, 0);\n    this.deltaRotation = new b2Rot(1, 0);\n  }\n};\nvar b2BodySim = class {\n  constructor() {\n    this.transform = new b2Transform();\n    this.center = new b2Vec2(0, 0);\n    this.rotation0 = new b2Rot(1, 0);\n    this.center0X = 0;\n    this.center0Y = 0;\n    this.localCenter = new b2Vec2(0, 0);\n    this.force = new b2Vec2(0, 0);\n    this.torque = 0;\n    this.mass = 0;\n    this.invMass = 0;\n    this.inertia = 0;\n    this.invInertia = 0;\n    this.minExtent = 0;\n    this.maxExtent = 0;\n    this.linearDamping = 0;\n    this.angularDamping = 0;\n    this.gravityScale = 0;\n    this.bodyId = 0;\n    this.isFast = false;\n    this.isBullet = false;\n    this.isSpeedCapped = false;\n    this.allowFastRotation = false;\n    this.enlargeAABB = false;\n  }\n  copyTo(dst) {\n    dst.transform = this.transform.deepClone();\n    dst.center = this.center.clone();\n    dst.rotation0 = this.rotation0.clone();\n    dst.center0X = this.center0X;\n    dst.center0Y = this.center0Y;\n    dst.localCenter = this.localCenter.clone();\n    dst.force = this.force.clone();\n    dst.torque = this.torque;\n    dst.mass = this.mass;\n    dst.invMass = this.invMass;\n    dst.inertia = this.inertia;\n    dst.invInertia = this.invInertia;\n    dst.minExtent = this.minExtent;\n    dst.maxExtent = this.maxExtent;\n    dst.linearDamping = this.linearDamping;\n    dst.angularDamping = this.angularDamping;\n    dst.gravityScale = this.gravityScale;\n    dst.bodyId = this.bodyId;\n    dst.isFast = this.isFast;\n    dst.isBullet = this.isBullet;\n    dst.isSpeedCapped = this.isSpeedCapped;\n    dst.allowFastRotation = this.allowFastRotation;\n    dst.enlargeAABB = this.enlargeAABB;\n  }\n};\n\n// src/block_array_c.js\nvar B2_INITIAL_CAPACITY = 16;\nvar b2BodySimArray = class {\n  constructor(capacity = 0) {\n    this.data = [];\n    this.count = 0;\n    this.capacity = capacity;\n  }\n};\nvar b2BodyStateArray = class {\n  constructor(capacity = 0) {\n    this.data = [];\n    this.count = 0;\n    this.capacity = capacity;\n  }\n};\nvar b2ContactArray = class {\n  constructor(capacity = 0) {\n    this.data = [];\n    this.count = 0;\n    this.capacity = capacity;\n  }\n};\nvar b2IslandArray = class {\n  constructor(capacity = 0) {\n    this.data = [];\n    this.count = 0;\n    this.capacity = capacity;\n  }\n};\nvar b2JointArray = class {\n  constructor(capacity = 0) {\n    this.data = [];\n    this.count = 0;\n    this.capacity = capacity;\n  }\n};\nfunction b2CreateBodySimArray(capacity) {\n  const array = new b2BodySimArray(capacity);\n  if (capacity > 0) {\n    array.data = b2Alloc(capacity, () => {\n      return new b2BodySim();\n    });\n    return array;\n  }\n  array.data = null;\n  return array;\n}\nfunction b2CreateContactArray(capacity) {\n  const array = new b2ContactArray(capacity);\n  if (capacity > 0) {\n    array.data = b2Alloc(capacity, () => {\n      return new b2ContactSim();\n    });\n    return array;\n  }\n  array.data = null;\n  return array;\n}\nfunction b2CreateJointArray(capacity) {\n  const array = new b2JointArray(capacity);\n  if (capacity > 0) {\n    array.data = b2Alloc(capacity, () => {\n      return new b2JointSim();\n    });\n    return array;\n  }\n  array.data = null;\n  return array;\n}\nfunction b2AddBodySim(array) {\n  if (array.capacity === 0) {\n    array.data = b2Alloc(B2_INITIAL_CAPACITY, () => {\n      return new b2BodySim();\n    });\n    array.capacity = B2_INITIAL_CAPACITY;\n    array.count = 0;\n  } else if (array.count === array.capacity) {\n    const newCapacity = 2 * array.capacity;\n    b2Grow(array.data, newCapacity, () => {\n      return new b2BodySim();\n    });\n    array.capacity = newCapacity;\n  } else {\n    resetProperties(array.data[array.count]);\n  }\n  array.count += 1;\n  return array.data[array.count - 1];\n}\nfunction b2AddBodyState(array) {\n  if (array.capacity === 0) {\n    array.data = b2Alloc(B2_INITIAL_CAPACITY, () => {\n      return new b2BodyState();\n    });\n    array.capacity = B2_INITIAL_CAPACITY;\n    array.count = 0;\n  } else if (array.count === array.capacity) {\n    const newCapacity = 2 * array.capacity;\n    b2Grow(array.data, newCapacity, () => {\n      return new b2BodyState();\n    });\n    array.capacity = newCapacity;\n  } else {\n    resetProperties(array.data[array.count]);\n  }\n  array.count += 1;\n  return array.data[array.count - 1];\n}\nfunction b2AddContact(array) {\n  if (array.capacity === 0) {\n    array.data = b2Alloc(B2_INITIAL_CAPACITY, () => {\n      return new b2ContactSim();\n    });\n    array.capacity = B2_INITIAL_CAPACITY;\n    array.count = 0;\n  } else if (array.count === array.capacity) {\n    const newCapacity = 8 * array.capacity;\n    b2Grow(array.data, newCapacity, () => {\n      return new b2ContactSim();\n    });\n    array.capacity = newCapacity;\n  } else {\n    const sim = array.data[array.count];\n    resetProperties(sim);\n    sim._bodyIdA = sim._bodyIdB = B2_NULL_INDEX;\n  }\n  array.count += 1;\n  return array.data[array.count - 1];\n}\nfunction b2AddJoint(array) {\n  if (array.capacity === 0) {\n    array.data = b2Alloc(B2_INITIAL_CAPACITY, () => {\n      return new b2JointSim();\n    });\n    array.capacity = B2_INITIAL_CAPACITY;\n    array.count = 0;\n  } else if (array.count === array.capacity) {\n    const newCapacity = 2 * array.capacity;\n    b2Grow(array.data, newCapacity, () => {\n      return new b2JointSim();\n    });\n    array.capacity = newCapacity;\n  } else {\n    resetProperties(array.data[array.count]);\n  }\n  array.count += 1;\n  return array.data[array.count - 1];\n}\nfunction b2AddIsland(array) {\n  if (array.capacity === 0) {\n    array.data = b2Alloc(B2_INITIAL_CAPACITY, () => {\n      return new b2IslandSim();\n    });\n    array.capacity = B2_INITIAL_CAPACITY;\n    array.count = 0;\n  } else if (array.count === array.capacity) {\n    const newCapacity = 2 * array.capacity;\n    b2Grow(array.data, newCapacity, () => {\n      return new b2IslandSim();\n    });\n    array.capacity = newCapacity;\n  } else {\n    resetProperties(array.data[array.count]);\n  }\n  array.count += 1;\n  array.data[array.count - 1].islandId = B2_NULL_INDEX;\n  return array.data[array.count - 1];\n}\nfunction removeArrayIndex(array, index) {\n  if (index < array.count - 1) {\n    const swapA = array.data[array.count - 1];\n    const swapB = array.data[index];\n    array.data[index] = swapA;\n    array.data[array.count - 1] = swapB;\n    array.count -= 1;\n    return array.count;\n  }\n  array.count -= 1;\n  return B2_NULL_INDEX;\n}\nfunction b2RemoveBodySim(array, index) {\n  return removeArrayIndex(array, index);\n}\nfunction b2RemoveBodyState(array, index) {\n  return removeArrayIndex(array, index);\n}\nfunction b2RemoveContact(array, index) {\n  return removeArrayIndex(array, index);\n}\nfunction b2RemoveJoint(array, index) {\n  return removeArrayIndex(array, index);\n}\nfunction b2RemoveIsland(array, index) {\n  return removeArrayIndex(array, index);\n}\n\n// src/manifold_c.js\nvar B2_MAKE_ID = (A, B) => (A & 255) << 8 | B & 255;\nvar xf = new b2Transform(new b2Vec2(), new b2Rot());\nvar xf1 = new b2Transform(new b2Vec2(), new b2Rot());\nvar p12 = new b2Vec2();\nvar p2 = new b2Vec2();\nvar q1 = new b2Vec2();\nvar q2 = new b2Vec2();\nfunction b2MakeCapsule(p14, p23, radius) {\n  const axis = b2NormalizeChecked(b2Sub(p23, p14));\n  const normal = b2RightPerp(axis);\n  const shape = new b2Polygon();\n  shape.vertices = [p14, p23];\n  shape.centroid = b2Lerp(p14, p23, 0.5);\n  shape.normals = [normal, b2Neg(normal)];\n  shape.count = 2;\n  shape.radius = radius;\n  return shape;\n}\nfunction b2CollideCircles(circleA, xfA, circleB, xfB, manifold) {\n  b2InvMulTransformsOut(xfA, xfB, xf);\n  const pointA = circleA.center;\n  const pointBX = xf.q.c * circleB.center.x - xf.q.s * circleB.center.y + xf.p.x;\n  const pointBY = xf.q.s * circleB.center.x + xf.q.c * circleB.center.y + xf.p.y;\n  const sx = pointBX - pointA.x;\n  const sy = pointBY - pointA.y;\n  const distance = Math.sqrt(sx * sx + sy * sy);\n  let normalX = 0, normalY = 0;\n  if (distance >= eps) {\n    normalX = sx / distance;\n    normalY = sy / distance;\n  }\n  const radiusA = circleA.radius;\n  const radiusB = circleB.radius;\n  const separation = distance - radiusA - radiusB;\n  if (separation > b2_speculativeDistance) {\n    return manifold.clear();\n  }\n  const cAx = pointA.x + radiusA * normalX;\n  const cAy = pointA.y + radiusA * normalY;\n  const cBx = pointBX + -radiusB * normalX;\n  const cBy = pointBY + -radiusB * normalY;\n  const contactPointAx = cAx + 0.5 * (cBx - cAx);\n  const contactPointAy = cAy + 0.5 * (cBy - cAy);\n  manifold.normalX = xfA.q.c * normalX - xfA.q.s * normalY;\n  manifold.normalY = xfA.q.s * normalX + xfA.q.c * normalY;\n  manifold.normalX = xfA.q.c * normalX - xfA.q.s * normalY;\n  manifold.normalY = xfA.q.s * normalX + xfA.q.c * normalY;\n  const mp = manifold.points[0];\n  mp.anchorAX = xfA.q.c * contactPointAx - xfA.q.s * contactPointAy;\n  mp.anchorAY = xfA.q.s * contactPointAx + xfA.q.c * contactPointAy;\n  mp.anchorBX = mp.anchorAX + (xfA.p.x - xfB.p.x);\n  mp.anchorBY = mp.anchorAY + (xfA.p.y - xfB.p.y);\n  mp.pointX = xfA.p.x + mp.anchorAX;\n  mp.pointY = xfA.p.y + mp.anchorAY;\n  mp.separation = separation;\n  mp.id = 0;\n  manifold.pointCount = 1;\n  return manifold;\n}\nfunction b2CollideCapsuleAndCircle(capsuleA, xfA, circleB, xfB, manifold) {\n  b2InvMulTransformsOut(xfA, xfB, xf);\n  const pB = b2TransformPoint(xf, circleB.center);\n  const p14 = capsuleA.center1;\n  const p23 = capsuleA.center2;\n  const e = b2Sub(p23, p14);\n  let pA;\n  const s1 = b2Dot(b2Sub(pB, p14), e);\n  const s2 = b2Dot(b2Sub(p23, pB), e);\n  if (s1 < 0) {\n    pA = p14;\n  } else if (s2 < 0) {\n    pA = p23;\n  } else {\n    const s = s1 / b2Dot(e, e);\n    pA = b2MulAdd(p14, s, e);\n  }\n  const res = b2GetLengthAndNormalize(b2Sub(pB, pA));\n  const distance = res.length;\n  const normal = res.normal;\n  const radiusA = capsuleA.radius;\n  const radiusB = circleB.radius;\n  const separation = distance - radiusA - radiusB;\n  if (separation > b2_speculativeDistance) {\n    return manifold.clear();\n  }\n  const cA = b2MulAdd(pA, radiusA, normal);\n  const cB = b2MulAdd(pB, -radiusB, normal);\n  const contactPointA = b2Lerp(cA, cB, 0.5);\n  manifold.normalX = xfA.q.c * normal.x - xfA.q.s * normal.y;\n  manifold.normalY = xfA.q.s * normal.x + xfA.q.c * normal.y;\n  const mp = manifold.points[0];\n  mp.anchorAX = xfA.q.c * contactPointA.x - xfA.q.s * contactPointA.y;\n  mp.anchorAY = xfA.q.s * contactPointA.x + xfA.q.c * contactPointA.y;\n  mp.anchorBX = mp.anchorAX + (xfA.p.x - xfB.p.x);\n  mp.anchorBY = mp.anchorAY + (xfA.p.y - xfB.p.y);\n  mp.pointX = xfA.p.x + mp.anchorAX;\n  mp.pointY = xfA.p.y + mp.anchorAY;\n  mp.separation = separation;\n  mp.id = 0;\n  manifold.pointCount = 1;\n  return manifold;\n}\nvar c = new b2Vec2();\nfunction b2CollidePolygonAndCircle(polygonA, xfA, circleB, xfB, manifold) {\n  const speculativeDistance = b2_speculativeDistance;\n  b2InvMulTransformsOut(xfA, xfB, xf);\n  b2TransformPointOut(xf, circleB.center, c);\n  const radiusA = polygonA.radius;\n  const radiusB = circleB.radius;\n  const radius = radiusA + radiusB;\n  let normalIndex = 0;\n  let separation = -Number.MAX_VALUE;\n  const vertexCount = polygonA.count;\n  const vertices = polygonA.vertices;\n  const normals = polygonA.normals;\n  for (let i = 0; i < vertexCount; ++i) {\n    const s = normals[i].x * (c.x - vertices[i].x) + normals[i].y * (c.y - vertices[i].y);\n    if (s > separation) {\n      separation = s;\n      normalIndex = i;\n    }\n  }\n  if (separation > radius + speculativeDistance) {\n    return manifold.clear();\n  }\n  const vertIndex1 = normalIndex;\n  const vertIndex2 = vertIndex1 + 1 < vertexCount ? vertIndex1 + 1 : 0;\n  const v1 = vertices[vertIndex1];\n  const v2 = vertices[vertIndex2];\n  const u1 = (c.x - v1.x) * (v2.x - v1.x) + (c.y - v1.y) * (v2.y - v1.y);\n  const u2 = (c.x - v2.x) * (v1.x - v2.x) + (c.y - v2.y) * (v1.y - v2.y);\n  if (u1 < 0 && separation > eps) {\n    const x = c.x - v1.x;\n    const y = c.y - v1.y;\n    const length = Math.sqrt(x * x + y * y);\n    let normalX = 0, normalY = 0;\n    if (length > eps) {\n      const invLength = 1 / length;\n      normalX = x * invLength;\n      normalY = y * invLength;\n    }\n    separation = (c.x - v1.x) * normalX + (c.y - v1.y) * normalY;\n    if (separation > radius + speculativeDistance) {\n      return manifold.clear();\n    }\n    const cAX = v1.x + radiusA * normalX;\n    const cAY = v1.y + radiusA * normalY;\n    const cBX = c.x - radiusB * normalX;\n    const cBY = c.y - radiusB * normalY;\n    const contactPointAX = 0.5 * (cAX + cBX);\n    const contactPointAY = 0.5 * (cAY + cBY);\n    manifold.normalX = xfA.q.c * normalX - xfA.q.s * normalY;\n    manifold.normalY = xfA.q.s * normalX + xfA.q.c * normalY;\n    const mp = manifold.points[0];\n    mp.anchorAX = xfA.q.c * contactPointAX - xfA.q.s * contactPointAY;\n    mp.anchorAY = xfA.q.s * contactPointAX + xfA.q.c * contactPointAY;\n    mp.anchorBX = mp.anchorAX + (xfA.p.x - xfB.p.x);\n    mp.anchorBY = mp.anchorAY + (xfA.p.y - xfB.p.y);\n    mp.pointX = xfA.p.x + mp.anchorAX;\n    mp.pointY = xfA.p.y + mp.anchorAY;\n    mp.separation = (cBX - cAX) * normalX + (cBY - cAY) * normalY;\n    mp.id = 0;\n    manifold.pointCount = 1;\n  } else if (u2 < 0 && separation > eps) {\n    const x = c.x - v2.x;\n    const y = c.y - v2.y;\n    const length = Math.sqrt(x * x + y * y);\n    let normalX = 0, normalY = 0;\n    if (length > eps) {\n      const invLength = 1 / length;\n      normalX = x * invLength;\n      normalY = y * invLength;\n    }\n    separation = (c.x - v2.x) * normalX + (c.y - v2.y) * normalY;\n    if (separation > radius + speculativeDistance) {\n      return manifold.clear();\n    }\n    const cAX = v2.x + radiusA * normalX;\n    const cAY = v2.y + radiusA * normalY;\n    const cBX = c.x - radiusB * normalX;\n    const cBY = c.y - radiusB * normalY;\n    const contactPointAX = 0.5 * (cAX + cBX);\n    const contactPointAY = 0.5 * (cAY + cBY);\n    manifold.normalX = xfA.q.c * normalX - xfA.q.s * normalY;\n    manifold.normalY = xfA.q.s * normalX + xfA.q.c * normalY;\n    const mp = manifold.points[0];\n    mp.anchorAX = xfA.q.c * contactPointAX - xfA.q.s * contactPointAY;\n    mp.anchorAY = xfA.q.s * contactPointAX + xfA.q.c * contactPointAY;\n    mp.anchorBX = mp.anchorAX + (xfA.p.x - xfB.p.x);\n    mp.anchorBY = mp.anchorAY + (xfA.p.y - xfB.p.y);\n    mp.pointX = xfA.p.x + mp.anchorAX;\n    mp.pointY = xfA.p.y + mp.anchorAY;\n    mp.separation = (cBX - cAX) * normalX + (cBY - cAY) * normalY;\n    mp.id = 0;\n    manifold.pointCount = 1;\n  } else {\n    const normalX = normals[normalIndex].x;\n    const normalY = normals[normalIndex].y;\n    manifold.normalX = xfA.q.c * normalX - xfA.q.s * normalY;\n    manifold.normalY = xfA.q.s * normalX + xfA.q.c * normalY;\n    const d = radiusA - ((c.x - v1.x) * normalX + (c.y - v1.y) * normalY);\n    const cAX = c.x + d * normalX;\n    const cAY = c.y + d * normalY;\n    const cBX = c.x - radiusB * normalX;\n    const cBY = c.y - radiusB * normalY;\n    const contactPointAX = (cAX + cBX) * 0.5;\n    const contactPointAY = (cAY + cBY) * 0.5;\n    const mp = manifold.points[0];\n    mp.anchorAX = xfA.q.c * contactPointAX - xfA.q.s * contactPointAY;\n    mp.anchorAY = xfA.q.s * contactPointAX + xfA.q.c * contactPointAY;\n    mp.anchorBX = mp.anchorAX + (xfA.p.x - xfB.p.x);\n    mp.anchorBY = mp.anchorAY + (xfA.p.y - xfB.p.y);\n    mp.pointX = xfA.p.x + mp.anchorAX;\n    mp.pointY = xfA.p.y + mp.anchorAY;\n    mp.separation = separation - radius;\n    mp.id = 0;\n    manifold.pointCount = 1;\n  }\n  return manifold;\n}\nfunction b2CollideCapsules(capsuleA, xfA, capsuleB, xfB, manifold) {\n  const origin = capsuleA.center1;\n  b2MulAddOut(xfA.p, 1, b2RotateVector(xfA.q, origin), xf1.p);\n  xf1.q = xfA.q;\n  b2InvMulTransformsOut(xf1, xfB, xf);\n  p12.x = 0;\n  p12.y = 0;\n  q1.x = capsuleA.center2.x - origin.x;\n  q1.y = capsuleA.center2.y - origin.y;\n  b2TransformPointOut(xf, capsuleB.center1, p2);\n  b2TransformPointOut(xf, capsuleB.center2, q2);\n  const d1X = q1.x;\n  const d1Y = q1.y;\n  const d2X = q2.x - p2.x;\n  const d2Y = q2.y - p2.y;\n  const dd1 = d1X * d1X + d1Y * d1Y;\n  const dd2 = d2X * d2X + d2Y * d2Y;\n  const rX = p12.x - p2.x;\n  const rY = p12.y - p2.y;\n  const rd1 = rX * d1X + rY * d1Y;\n  const rd2 = rX * d2X + rY * d2Y;\n  const d12 = d1X * d2X + d1Y * d2Y;\n  const denom = dd1 * dd2 - d12 * d12;\n  let f1 = 0;\n  if (denom !== 0) {\n    f1 = b2ClampFloat((d12 * rd2 - rd1 * dd2) / denom, 0, 1);\n  }\n  let f2 = (d12 * f1 + rd2) / dd2;\n  if (f2 < 0) {\n    f2 = 0;\n    f1 = b2ClampFloat(-rd1 / dd1, 0, 1);\n  } else if (f2 > 1) {\n    f2 = 1;\n    f1 = b2ClampFloat((d12 - rd1) / dd1, 0, 1);\n  }\n  const closest1 = { x: p12.x + f1 * d1X, y: p12.y + f1 * d1Y };\n  const closest2 = { x: p2.x + f2 * d2X, y: p2.y + f2 * d2Y };\n  const distanceSquared = b2DistanceSquared(closest1, closest2);\n  const radiusA = capsuleA.radius;\n  const radiusB = capsuleB.radius;\n  const radius = radiusA + radiusB;\n  const maxDistance = radius + b2_speculativeDistance;\n  if (distanceSquared > maxDistance * maxDistance) {\n    resetProperties(manifold);\n    return;\n  }\n  const distance = Math.sqrt(distanceSquared);\n  const length1 = b2LengthXY(d1X, d1Y);\n  const u1X = d1X * 1 / length1;\n  const u1Y = d1Y * 1 / length1;\n  const length2 = b2LengthXY(d2X, d2Y);\n  const u2X = d2X * 1 / length2;\n  const u2Y = d2Y * 1 / length2;\n  const fp2 = (p2.x - p12.x) * u1X + (p2.y - p12.y) * u1Y;\n  const fq2 = (q2.x - p12.x) * u1X + (q2.y - p12.y) * u1Y;\n  const outsideA = fp2 <= 0 && fq2 <= 0 || fp2 >= length1 && fq2 >= length1;\n  const fp1 = (p12.x - p2.x) * u1X + (p12.y - p2.y) * u2Y;\n  const fq1 = (q1.x - p2.x) * u1X + (q1.y - p2.y) * u2Y;\n  const outsideB = fp1 <= 0 && fq1 <= 0 || fp1 >= length2 && fq1 >= length2;\n  manifold.pointCount = 0;\n  if (outsideA === false && outsideB === false) {\n    let normalAX, normalAY, separationA;\n    {\n      normalAX = -u1Y;\n      normalAY = u1X;\n      const ss1 = (p2.x - p12.x) * normalAX + (p2.y - p12.y) * normalAY;\n      const ss2 = (q2.x - p12.x) * normalAX + (q2.y - p12.y) * normalAY;\n      const s1p = Math.min(ss1, ss2);\n      const s1n = Math.max(-ss1, -ss2);\n      if (s1p > s1n) {\n        separationA = s1p;\n      } else {\n        separationA = s1n;\n        normalAX = -normalAX;\n        normalAY = -normalAY;\n      }\n    }\n    let normalBX, normalBY, separationB;\n    {\n      normalBX = -u2Y;\n      normalBY = u2X;\n      const ss1 = (p12.x - p2.x) * normalBX + (p12.y - p2.y) * normalBY;\n      const ss2 = (q1.x - p2.x) * normalBX + (q1.y - p2.y) * normalBY;\n      const s1p = Math.min(ss1, ss2);\n      const s1n = Math.max(-ss1, -ss2);\n      if (s1p > s1n) {\n        separationB = s1p;\n      } else {\n        separationB = s1n;\n        normalBX = -normalBX;\n        normalBY = -normalBY;\n      }\n    }\n    if (separationA >= separationB) {\n      manifold.normalX = normalAX;\n      manifold.normalY = normalAY;\n      let cpX = p2.x;\n      let cpY = p2.y;\n      let cqX = q2.x;\n      let cqY = q2.y;\n      if (fp2 < 0 && fq2 > 0) {\n        const t = (0 - fp2) / (fq2 - fp2);\n        cpX = p2.x + t * (q2.x - p2.x);\n        cpY = p2.y + t * (q2.y - p2.y);\n      } else if (fq2 < 0 && fp2 > 0) {\n        const t = (0 - fq2) / (fp2 - fq2);\n        cqX = q2.x + t * (p2.x - q2.x);\n        cqY = q2.y + t * (p2.y - q2.y);\n      }\n      if (fp2 > length1 && fq2 < length1) {\n        const t = (fp2 - length1) / (fp2 - fq2);\n        cpX = p2.x + t * (q2.x - p2.x);\n        cpY = p2.y + t * (q2.y - p2.y);\n      } else if (fq2 > length1 && fp2 < length1) {\n        const t = (fq2 - length1) / (fq2 - fp2);\n        cqX = q2.x + t * (p2.x - q2.x);\n        cqY = q2.y + t * (p2.y - q2.y);\n      }\n      const sp = (cpX - p12.x) * normalAX + (cpY - p12.y) * normalAY;\n      const sq = (cqX - p12.x) * normalAX + (cqY - p12.y) * normalAY;\n      if (sp <= distance + b2_linearSlop || sq <= distance + b2_linearSlop) {\n        let s = 0.5 * (radiusA - radiusB - sp);\n        manifold.points[0].anchorAX = cpX + s * normalAX;\n        manifold.points[0].anchorAY = cpY + s * normalAY;\n        manifold.points[0].separation = sp - radius;\n        manifold.points[0].id = B2_MAKE_ID(0, 0);\n        s = 0.5 * (radiusA - radiusB - sq);\n        manifold.points[1].anchorAX = cqX + s * normalAX;\n        manifold.points[1].anchorAY = cqY + s * normalAY;\n        manifold.points[1].separation = sq - radius;\n        manifold.points[1].id = B2_MAKE_ID(0, 1);\n        manifold.pointCount = 2;\n      }\n    } else {\n      manifold.normalX = -normalBX;\n      manifold.normalY = -normalBY;\n      let cpX = p12.x;\n      let cpY = p12.y;\n      let cqX = q1.x;\n      let cqY = q1.y;\n      if (fp1 < 0 && fq1 > 0) {\n        const t = (0 - fp1) / (fq1 - fp1);\n        cpX = p12.x + t * (q1.x - p12.x);\n        cpY = p12.y + t * (q1.y - p12.y);\n      } else if (fq1 < 0 && fp1 > 0) {\n        const t = (0 - fq1) / (fp1 - fq1);\n        cqX = q1.x + t * (p12.x - q1.x);\n        cqY = q1.y + t * (p12.y - q1.y);\n      }\n      if (fp1 > length2 && fq1 < length2) {\n        const t = (fp1 - length2) / (fp1 - fq1);\n        cpX = p12.x + t * (q1.x - p12.x);\n        cpY = p12.y + t * (q1.y - p12.y);\n      } else if (fq1 > length2 && fp1 < length2) {\n        const t = (fq1 - length2) / (fq1 - fp1);\n        cqX = q1.x + t * (p12.x - q1.x);\n        cqY = q1.y + t * (p12.y - q1.y);\n      }\n      const sp = (cpX - p2.x) * normalBX + (cpY - p2.y) * normalBY;\n      const sq = (cqX - p2.x) * normalBX + (cqY - p2.y) * normalBY;\n      if (sp <= distance + b2_linearSlop || sq <= distance + b2_linearSlop) {\n        let s = 0.5 * (radiusB - radiusA - sp);\n        manifold.points[0].anchorAX = cpX + s * normalBX;\n        manifold.points[0].anchorAY = cpY + s * normalBY;\n        manifold.points[0].separation = sp - radius;\n        manifold.points[0].id = B2_MAKE_ID(0, 0);\n        s = 0.5 * (radiusB - radiusA - sq);\n        manifold.points[1].anchorAX = cqX + s * normalBX;\n        manifold.points[1].anchorAY = cqY + s * normalBY;\n        manifold.points[1].separation = sq - radius;\n        manifold.points[1].id = B2_MAKE_ID(1, 0);\n        manifold.pointCount = 2;\n      }\n    }\n  }\n  if (manifold.pointCount === 0) {\n    let normalX = closest2.x - closest1.x;\n    let normalY = closest2.y - closest1.y;\n    const lengthSq = normalX * normalX + normalY * normalY;\n    if (lengthSq > epsSqr) {\n      const length = Math.sqrt(lengthSq);\n      normalX /= length;\n      normalY /= length;\n    } else {\n      normalX = -u1Y;\n      normalY = u1X;\n    }\n    const c1X = closest1.x + radiusA * normalX;\n    const c1Y = closest1.y + radiusA * normalY;\n    const c2X = closest2.x - radiusB * normalX;\n    const c2Y = closest2.y - radiusB * normalY;\n    const i1 = f1 === 0 ? 0 : 1;\n    const i2 = f2 === 0 ? 0 : 1;\n    manifold.normalX = normalX;\n    manifold.normalY = normalY;\n    manifold.points[0].anchorAX = (c1X + c2X) * 0.5;\n    manifold.points[0].anchorAY = (c1Y + c2Y) * 0.5;\n    manifold.points[0].separation = Math.sqrt(distanceSquared) - radius;\n    manifold.points[0].id = B2_MAKE_ID(i1, i2);\n    manifold.pointCount = 1;\n  }\n  if (manifold.pointCount > 0) {\n    const rotatedNormalX = xfA.q.c * manifold.normalX - xfA.q.s * manifold.normalY;\n    const rotatedNormalY = xfA.q.s * manifold.normalX + xfA.q.c * manifold.normalY;\n    manifold.normalX = rotatedNormalX;\n    manifold.normalY = rotatedNormalY;\n    for (let i = 0; i < manifold.pointCount; ++i) {\n      const mp = manifold.points[i];\n      const vx = mp.anchorAX + origin.x;\n      const vy = mp.anchorAY + origin.y;\n      const rotatedVecX = xfA.q.c * vx - xfA.q.s * vy;\n      const rotatedVecY = xfA.q.s * vx + xfA.q.c * vy;\n      mp.anchorAX = rotatedVecX;\n      mp.anchorAY = rotatedVecY;\n      mp.anchorBX = mp.anchorAX + (xfA.p.x - xfB.p.x);\n      mp.anchorBY = mp.anchorAY + (xfA.p.y - xfB.p.y);\n      mp.pointX = xfA.p.x + mp.anchorAX;\n      mp.pointY = xfA.p.y + mp.anchorAY;\n    }\n  }\n  return;\n}\nvar constCapsule = new b2Capsule();\nfunction b2CollideSegmentAndCapsule(segmentA, xfA, capsuleB, xfB, manifold) {\n  constCapsule.center1 = segmentA.point1;\n  constCapsule.center2 = segmentA.point2;\n  constCapsule.radius = 0;\n  return b2CollideCapsules(constCapsule, xfA, capsuleB, xfB);\n}\nfunction b2CollidePolygonAndCapsule(polygonA, xfA, capsuleB, xfB, manifold) {\n  const polyB = b2MakeCapsule(capsuleB.center1, capsuleB.center2, capsuleB.radius);\n  return b2CollidePolygons(polygonA, xfA, polyB, xfB, manifold);\n}\nfunction b2ClipPolygons(polyA, polyB, edgeA, edgeB, flip, manifold) {\n  let poly1, i11, i12;\n  let poly2, i21, i22;\n  if (flip) {\n    poly1 = polyB;\n    poly2 = polyA;\n    i11 = edgeB;\n    i12 = edgeB + 1 < polyB.count ? edgeB + 1 : 0;\n    i21 = edgeA;\n    i22 = edgeA + 1 < polyA.count ? edgeA + 1 : 0;\n  } else {\n    poly1 = polyA;\n    poly2 = polyB;\n    i11 = edgeA;\n    i12 = edgeA + 1 < polyA.count ? edgeA + 1 : 0;\n    i21 = edgeB;\n    i22 = edgeB + 1 < polyB.count ? edgeB + 1 : 0;\n  }\n  const normal = poly1.normals[i11];\n  const v11 = poly1.vertices[i11];\n  const v12 = poly1.vertices[i12];\n  const v21 = poly2.vertices[i21];\n  const v22 = poly2.vertices[i22];\n  const tangentX = -1 * normal.y;\n  const tangentY = 1 * normal.x;\n  const lower1 = 0;\n  let subX = v12.x - v11.x;\n  let subY = v12.y - v11.y;\n  const upper1 = subX * tangentX + subY * tangentY;\n  subX = v21.x - v11.x;\n  subY = v21.y - v11.y;\n  const upper2 = subX * tangentX + subY * tangentY;\n  subX = v22.x - v11.x;\n  subY = v22.y - v11.y;\n  const lower2 = subX * tangentX + subY * tangentY;\n  let vLower;\n  if (lower2 < lower1 && upper2 - lower2 > eps) {\n    vLower = b2Lerp(v22, v21, (lower1 - lower2) / (upper2 - lower2));\n  } else {\n    vLower = v22;\n  }\n  let vUpper;\n  if (upper2 > upper1 && upper2 - lower2 > eps) {\n    vUpper = b2Lerp(v22, v21, (upper1 - lower2) / (upper2 - lower2));\n  } else {\n    vUpper = v21;\n  }\n  const separationLower = b2DotSub(vLower, v11, normal);\n  const separationUpper = b2DotSub(vUpper, v11, normal);\n  const r1 = poly1.radius;\n  const r2 = poly2.radius;\n  b2MulAddOut(vLower, 0.5 * (r1 - r2 - separationLower), normal, p12);\n  b2MulAddOut(vUpper, 0.5 * (r1 - r2 - separationUpper), normal, p2);\n  const radius = r1 + r2;\n  if (flip === false) {\n    manifold.normalX = normal.x;\n    manifold.normalY = normal.y;\n    let mp = manifold.points[0];\n    mp.anchorAX = p12.x;\n    mp.anchorAY = p12.y;\n    mp.separation = separationLower - radius;\n    mp.id = B2_MAKE_ID(i11, i22);\n    mp = manifold.points[1];\n    mp.anchorAX = p2.x;\n    mp.anchorAY = p2.y;\n    mp.separation = separationUpper - radius;\n    mp.id = B2_MAKE_ID(i12, i21);\n    manifold.pointCount = 2;\n  } else {\n    manifold.normalX = -normal.x;\n    manifold.normalY = -normal.y;\n    let mp = manifold.points[0];\n    mp.anchorAX = p2.x;\n    mp.anchorAY = p2.y;\n    mp.separation = separationUpper - radius;\n    mp.id = B2_MAKE_ID(i21, i12);\n    mp = manifold.points[1];\n    mp.anchorAX = p12.x;\n    mp.anchorAY = p12.y;\n    mp.separation = separationLower - radius;\n    mp.id = B2_MAKE_ID(i22, i11);\n    manifold.pointCount = 2;\n  }\n  return manifold;\n}\nfunction b2FindMaxSeparation(poly1, poly2) {\n  const count1 = poly1.count;\n  const count2 = poly2.count;\n  const n1s = poly1.normals;\n  const v1s = poly1.vertices;\n  const v2s = poly2.vertices;\n  let bestIndex = 0;\n  let maxSeparation = Number.NEGATIVE_INFINITY;\n  for (let i = 0; i < count1; ++i) {\n    const n = n1s[i];\n    const vx = v1s[i].x, vy = v1s[i].y;\n    let si = Number.POSITIVE_INFINITY;\n    for (let j = 0; j < count2; ++j) {\n      const dx = v2s[j].x - vx;\n      const dy = v2s[j].y - vy;\n      const sij = n.x * dx + n.y * dy;\n      if (sij < si) {\n        si = sij;\n      }\n    }\n    if (si > maxSeparation) {\n      maxSeparation = si;\n      bestIndex = i;\n    }\n  }\n  return { edgeIndex: bestIndex, maxSeparation };\n}\nvar localPolyA = new b2Polygon(B2_MAX_POLYGON_VERTICES);\nvar localPolyB = new b2Polygon(B2_MAX_POLYGON_VERTICES);\nvar p3 = new b2Vec2();\nvar sfA = new b2Transform();\nfunction b2CollidePolygons(polygonA, xfA, polygonB, xfB, manifold) {\n  const originX = polygonA.vertices[0].x;\n  const originY = polygonA.vertices[0].y;\n  p3.x = xfA.p.x + (xfA.q.c * originX - xfA.q.s * originY);\n  p3.y = xfA.p.y + (xfA.q.s * originX + xfA.q.c * originY);\n  sfA.p = p3;\n  sfA.q = xfA.q;\n  b2InvMulTransformsOut(sfA, xfB, xf);\n  localPolyA.centroid = null;\n  localPolyA.count = polygonA.count;\n  localPolyA.radius = polygonA.radius;\n  localPolyA.vertices[0].x = 0;\n  localPolyA.vertices[0].y = 0;\n  localPolyA.normals[0].x = polygonA.normals[0].x;\n  localPolyA.normals[0].y = polygonA.normals[0].y;\n  for (let i = 1; i < localPolyA.count; ++i) {\n    const v = localPolyA.vertices[i];\n    v.x = polygonA.vertices[i].x - originX;\n    v.y = polygonA.vertices[i].y - originY;\n    const n = localPolyA.normals[i];\n    n.x = polygonA.normals[i].x;\n    n.y = polygonA.normals[i].y;\n  }\n  localPolyA.centroid = null;\n  localPolyB.count = polygonB.count;\n  localPolyB.radius = polygonB.radius;\n  for (let i = 0; i < localPolyB.count; ++i) {\n    const v = localPolyB.vertices[i];\n    const p4 = polygonB.vertices[i];\n    v.x = xf.q.c * p4.x - xf.q.s * p4.y + xf.p.x;\n    v.y = xf.q.s * p4.x + xf.q.c * p4.y + xf.p.y;\n    const n = localPolyB.normals[i];\n    n.x = xf.q.c * polygonB.normals[i].x - xf.q.s * polygonB.normals[i].y;\n    n.y = xf.q.s * polygonB.normals[i].x + xf.q.c * polygonB.normals[i].y;\n  }\n  const ret1 = b2FindMaxSeparation(localPolyA, localPolyB);\n  let edgeA = ret1.edgeIndex;\n  const separationA = ret1.maxSeparation;\n  const ret2 = b2FindMaxSeparation(localPolyB, localPolyA);\n  let edgeB = ret2.edgeIndex;\n  const separationB = ret2.maxSeparation;\n  const radius = localPolyA.radius + localPolyB.radius;\n  if (separationA > b2_speculativeDistance + radius || separationB > b2_speculativeDistance + radius) {\n    return manifold.clear();\n  }\n  let flip;\n  if (separationA >= separationB) {\n    flip = false;\n    const searchDirection = localPolyA.normals[edgeA];\n    const count = localPolyB.count;\n    const normals = localPolyB.normals;\n    edgeB = 0;\n    let minDot = Number.MAX_VALUE;\n    for (let i = 0; i < count; ++i) {\n      const dot = searchDirection.x * normals[i].x + searchDirection.y * normals[i].y;\n      if (dot < minDot) {\n        minDot = dot;\n        edgeB = i;\n      }\n    }\n  } else {\n    flip = true;\n    const searchDirection = localPolyB.normals[edgeB];\n    const count = localPolyA.count;\n    const normals = localPolyA.normals;\n    edgeA = 0;\n    let minDot = Number.MAX_VALUE;\n    for (let i = 0; i < count; ++i) {\n      const dot = searchDirection.x * normals[i].x + searchDirection.y * normals[i].y;\n      if (dot < minDot) {\n        minDot = dot;\n        edgeA = i;\n      }\n    }\n  }\n  if (separationA > 0.1 * b2_linearSlop || separationB > 0.1 * b2_linearSlop) {\n    const i11 = edgeA;\n    const i12 = edgeA + 1 < localPolyA.count ? edgeA + 1 : 0;\n    const i21 = edgeB;\n    const i22 = edgeB + 1 < localPolyB.count ? edgeB + 1 : 0;\n    const v11 = localPolyA.vertices[i11];\n    const v12 = localPolyA.vertices[i12];\n    const v21 = localPolyB.vertices[i21];\n    const v22 = localPolyB.vertices[i22];\n    const result = b2SegmentDistance(v11.x, v11.y, v12.x, v12.y, v21.x, v21.y, v22.x, v22.y);\n    if (result.fraction1 === 0 && result.fraction2 === 0) {\n      let normalX = v21.x - v11.x;\n      let normalY = v21.y - v11.y;\n      const distance = Math.sqrt(result.distanceSquared);\n      if (distance > b2_speculativeDistance + radius) {\n        return manifold.clear();\n      }\n      const invDistance = 1 / distance;\n      normalX *= invDistance;\n      normalY *= invDistance;\n      const c1X = v11.x + localPolyA.radius * normalX;\n      const c1Y = v11.y + localPolyA.radius * normalY;\n      const c2X = v21.x - localPolyB.radius * normalX;\n      const c2Y = v21.y - localPolyB.radius * normalY;\n      manifold.normalX = normalX;\n      manifold.normalY = normalY;\n      const mp = manifold.points[0];\n      mp.anchorAX = (c1X + c2X) * 0.5;\n      mp.anchorAY = (c1Y + c2Y) * 0.5;\n      mp.separation = distance - radius;\n      mp.id = B2_MAKE_ID(i11, i21);\n      manifold.pointCount = 1;\n    } else if (result.fraction1 === 0 && result.fraction2 === 1) {\n      let normalX = v22.x - v11.x;\n      let normalY = v22.y - v11.y;\n      const distance = Math.sqrt(result.distanceSquared);\n      if (distance > b2_speculativeDistance + radius) {\n        return manifold.clear();\n      }\n      const invDistance = 1 / distance;\n      normalX *= invDistance;\n      normalY *= invDistance;\n      const c1X = v11.x + localPolyA.radius * normalX;\n      const c1Y = v11.y + localPolyA.radius * normalY;\n      const c2X = v22.x - localPolyB.radius * normalX;\n      const c2Y = v22.y - localPolyB.radius * normalY;\n      manifold.normalX = normalX;\n      manifold.normalY = normalY;\n      const mp = new b2ManifoldPoint();\n      mp.anchorAX = (c1X + c2X) * 0.5;\n      mp.anchorAY = (c1Y + c2Y) * 0.5;\n      mp.separation = distance - radius;\n      mp.id = B2_MAKE_ID(i11, i22);\n      manifold.points[0] = mp;\n      manifold.pointCount = 1;\n    } else if (result.fraction1 === 1 && result.fraction2 === 0) {\n      let normalX = v21.x - v12.x;\n      let normalY = v21.y - v12.y;\n      const distance = Math.sqrt(result.distanceSquared);\n      if (distance > b2_speculativeDistance + radius) {\n        return manifold.clear();\n      }\n      const invDistance = 1 / distance;\n      normalX *= invDistance;\n      normalY *= invDistance;\n      const c1X = v12.x + localPolyA.radius * normalX;\n      const c1Y = v12.y + localPolyA.radius * normalY;\n      const c2X = v21.x - localPolyB.radius * normalX;\n      const c2Y = v21.y - localPolyB.radius * normalY;\n      manifold.normalX = normalX;\n      manifold.normalY = normalY;\n      const mp = new b2ManifoldPoint();\n      mp.anchorAX = (c1X + c2X) * 0.5;\n      mp.anchorAY = (c1Y + c2Y) * 0.5;\n      mp.separation = distance - radius;\n      mp.id = B2_MAKE_ID(i12, i21);\n      manifold.points[0] = mp;\n      manifold.pointCount = 1;\n    } else if (result.fraction1 === 1 && result.fraction2 === 1) {\n      let normalX = v22.x - v12.x;\n      let normalY = v22.y - v12.y;\n      const distance = Math.sqrt(result.distanceSquared);\n      if (distance > b2_speculativeDistance + radius) {\n        return manifold.clear();\n      }\n      const invDistance = 1 / distance;\n      normalX *= invDistance;\n      normalY *= invDistance;\n      const c1X = v12.x + localPolyA.radius * normalX;\n      const c1Y = v12.y + localPolyA.radius * normalY;\n      const c2X = v22.x - localPolyB.radius * normalX;\n      const c2Y = v22.y - localPolyB.radius * normalY;\n      manifold.normalX = normalX;\n      manifold.normalY = normalY;\n      const mp = new b2ManifoldPoint();\n      mp.anchorAX = (c1X + c2X) * 0.5;\n      mp.anchorAY = (c1Y + c2Y) * 0.5;\n      mp.separation = distance - radius;\n      mp.id = B2_MAKE_ID(i12, i22);\n      manifold.points[0] = mp;\n      manifold.pointCount = 1;\n    } else {\n      b2ClipPolygons(localPolyA, localPolyB, edgeA, edgeB, flip, manifold);\n    }\n  } else {\n    b2ClipPolygons(localPolyA, localPolyB, edgeA, edgeB, flip, manifold);\n  }\n  if (manifold.pointCount > 0) {\n    const tmpx = manifold.normalX;\n    manifold.normalX = xfA.q.c * manifold.normalX - xfA.q.s * manifold.normalY;\n    manifold.normalY = xfA.q.s * tmpx + xfA.q.c * manifold.normalY;\n    for (let i = 0; i < manifold.pointCount; ++i) {\n      const mp = manifold.points[i];\n      const addX = mp.anchorAX + originX;\n      const addY = mp.anchorAY + originY;\n      mp.anchorAX = xfA.q.c * addX - xfA.q.s * addY;\n      mp.anchorAY = xfA.q.s * addX + xfA.q.c * addY;\n      mp.anchorBX = mp.anchorAX + (xfA.p.x - xfB.p.x);\n      mp.anchorBY = mp.anchorAY + (xfA.p.y - xfB.p.y);\n      mp.pointX = xfA.p.x + mp.anchorAX;\n      mp.pointY = xfA.p.y + mp.anchorAY;\n    }\n  }\n  return manifold;\n}\nfunction b2CollideSegmentAndCircle(segmentA, xfA, circleB, xfB, manifold) {\n  const capsuleA = new b2Capsule();\n  capsuleA.center1 = segmentA.point1;\n  capsuleA.center2 = segmentA.point2;\n  capsuleA.radius = 0;\n  return b2CollideCapsuleAndCircle(capsuleA, xfA, circleB, xfB, manifold);\n}\nfunction b2CollideSegmentAndPolygon(segmentA, xfA, polygonB, xfB, manifold) {\n  const polygonA = b2MakeCapsule(segmentA.point1, segmentA.point2, 0);\n  return b2CollidePolygons(polygonA, xfA, polygonB, xfB, manifold);\n}\nfunction b2CollideChainSegmentAndCircle(chainSegmentA, xfA, circleB, xfB, manifold) {\n  b2InvMulTransformsOut(xfA, xfB, xf);\n  const pB = b2TransformPoint(xf, circleB.center);\n  const p14 = chainSegmentA.segment.point1;\n  const p23 = chainSegmentA.segment.point2;\n  const e = b2Sub(p23, p14);\n  const offset = b2Dot(b2RightPerp(e), b2Sub(pB, p14));\n  if (offset < 0) {\n    return manifold.clear();\n  }\n  const u = b2Dot(e, b2Sub(p23, pB));\n  const v = b2Dot(e, b2Sub(pB, p14));\n  let pA;\n  if (v <= 0) {\n    const prevEdge = b2Sub(p14, chainSegmentA.ghost1);\n    const uPrev = b2Dot(prevEdge, b2Sub(pB, p14));\n    if (uPrev <= 0) {\n      return manifold.clear();\n    }\n    pA = p14;\n  } else if (u <= 0) {\n    const nextEdge = b2Sub(chainSegmentA.ghost2, p23);\n    const vNext = b2Dot(nextEdge, b2Sub(pB, p23));\n    if (vNext > 0) {\n      return manifold.clear();\n    }\n    pA = p23;\n  } else {\n    const ee = b2Dot(e, e);\n    pA = new b2Vec2(u * p14.x + v * p23.x, u * p14.y + v * p23.y);\n    pA = ee > 0 ? b2MulSV(1 / ee, pA) : p14;\n  }\n  const res = b2GetLengthAndNormalize(b2Sub(pB, pA));\n  const distance = res.length;\n  const normal = res.normal;\n  const radius = circleB.radius;\n  const separation = distance - radius;\n  if (separation > b2_speculativeDistance) {\n    return manifold.clear();\n  }\n  const cA = pA;\n  const cB = b2MulAdd(pB, -radius, normal);\n  const contactPointA = b2Lerp(cA, cB, 0.5);\n  manifold.normalX = xfA.q.c * normal.x - xfA.q.s * normal.y;\n  manifold.normalY = xfA.q.s * normal.x + xfA.q.c * normal.y;\n  const mp = manifold.points[0];\n  mp.anchorAX = xfA.q.c * contactPointA.x - xfA.q.s * contactPointA.y;\n  mp.anchorAY = xfA.q.s * contactPointA.x + xfA.q.c * contactPointA.y;\n  mp.anchorBX = mp.anchorAX + (xfA.p.x - xfB.p.x);\n  mp.anchorBY = mp.anchorAY + (xfA.p.y - xfB.p.y);\n  mp.pointX = xfA.p.x + mp.anchorAX;\n  mp.pointY = xfA.p.y + mp.anchorAY;\n  mp.separation = separation;\n  mp.id = 0;\n  manifold.pointCount = 1;\n  return manifold;\n}\nfunction b2CollideChainSegmentAndCapsule(segmentA, xfA, capsuleB, xfB, cache, manifold) {\n  const polyB = b2MakeCapsule(capsuleB.center1, capsuleB.center2, capsuleB.radius);\n  return b2CollideChainSegmentAndPolygon(segmentA, xfA, polyB, xfB, cache, manifold);\n}\nfunction b2ClipSegments(a1, a2, b1, b2, normal, ra, rb, id1, id2, manifold) {\n  const tangent = b2LeftPerp(normal);\n  const lower1 = 0;\n  const upper1 = b2Dot(b2Sub(a2, a1), tangent);\n  const upper2 = b2Dot(b2Sub(b1, a1), tangent);\n  const lower2 = b2Dot(b2Sub(b2, a1), tangent);\n  if (upper2 < lower1 || upper1 < lower2) {\n    return manifold.clear();\n  }\n  let vLower;\n  if (lower2 < lower1 && upper2 - lower2 > eps) {\n    vLower = b2Lerp(b2, b1, (lower1 - lower2) / (upper2 - lower2));\n  } else {\n    vLower = b2;\n  }\n  let vUpper;\n  if (upper2 > upper1 && upper2 - lower2 > eps) {\n    vUpper = b2Lerp(b2, b1, (upper1 - lower2) / (upper2 - lower2));\n  } else {\n    vUpper = b1;\n  }\n  const separationLower = b2Dot(b2Sub(vLower, a1), normal);\n  const separationUpper = b2Dot(b2Sub(vUpper, a1), normal);\n  vLower = b2MulAdd(vLower, 0.5 * (ra - rb - separationLower), normal);\n  vUpper = b2MulAdd(vUpper, 0.5 * (ra - rb - separationUpper), normal);\n  const radius = ra + rb;\n  manifold.normalX = normal.x;\n  manifold.normalY = normal.y;\n  const p03 = manifold.points[0];\n  p03.anchorAX = vLower.x;\n  p03.anchorAY = vLower.y;\n  p03.separation = separationLower - radius;\n  p03.id = id1;\n  const p14 = manifold.points[1];\n  p14.anchorAX = vUpper.x;\n  p14.anchorAY = vUpper.y;\n  p14.separation = separationUpper - radius;\n  p14.id = id2;\n  manifold.pointCount = 2;\n  return manifold;\n}\nvar b2NormalType = {\n  b2_normalSkip: 0,\n  b2_normalAdmit: 1,\n  b2_normalSnap: 2\n};\nfunction b2ClassifyNormal(params, normal) {\n  const sinTol = 0.01;\n  if (b2Dot(normal, params.edge1) <= 0) {\n    if (params.convex1) {\n      if (b2Cross(normal, params.normal0) > sinTol) {\n        return b2NormalType.b2_normalSkip;\n      }\n      return b2NormalType.b2_normalAdmit;\n    } else {\n      return b2NormalType.b2_normalSnap;\n    }\n  } else {\n    if (params.convex2) {\n      if (b2Cross(params.normal2, normal) > sinTol) {\n        return b2NormalType.b2_normalSkip;\n      }\n      return b2NormalType.b2_normalAdmit;\n    } else {\n      return b2NormalType.b2_normalSnap;\n    }\n  }\n}\nvar b2ChainSegmentParams = class {\n  constructor() {\n    this.edge1 = new b2Vec2();\n    this.normal0 = new b2Vec2();\n    this.normal2 = new b2Vec2();\n    this.convex1 = false;\n    this.convex2 = false;\n  }\n};\nfunction b2CollideChainSegmentAndPolygon(chainSegmentA, xfA, polygonB, xfB, cache, manifold) {\n  b2InvMulTransformsOut(xfA, xfB, xf);\n  const centroidB = b2TransformPoint(xf, polygonB.centroid);\n  const radiusB = polygonB.radius;\n  const p14 = chainSegmentA.segment.point1;\n  const p23 = chainSegmentA.segment.point2;\n  const edge1 = b2Normalize(b2Sub(p23, p14));\n  const chainParams = new b2ChainSegmentParams();\n  chainParams.edge1 = edge1.clone();\n  const convexTol = 0.01;\n  const edge0 = b2Normalize(b2Sub(p14, chainSegmentA.ghost1));\n  chainParams.normal0 = b2RightPerp(edge0);\n  chainParams.convex1 = b2Cross(edge0, edge1) >= convexTol;\n  const edge2 = b2Normalize(b2Sub(chainSegmentA.ghost2, p23));\n  chainParams.normal2 = b2RightPerp(edge2);\n  chainParams.convex2 = b2Cross(edge1, edge2) >= convexTol;\n  const normal1 = b2RightPerp(edge1);\n  const behind1 = b2Dot(normal1, b2Sub(centroidB, p14)) < 0;\n  let behind0 = true;\n  let behind2 = true;\n  if (chainParams.convex1) {\n    behind0 = b2Dot(chainParams.normal0, b2Sub(centroidB, p14)) < 0;\n  }\n  if (chainParams.convex2) {\n    behind2 = b2Dot(chainParams.normal2, b2Sub(centroidB, p23)) < 0;\n  }\n  if (behind1 && behind0 && behind2) {\n    return manifold.clear();\n  }\n  const count = polygonB.count;\n  const vertices = [];\n  const normals = [];\n  for (let i = 0; i < count; ++i) {\n    vertices[i] = b2TransformPoint(xf, polygonB.vertices[i]);\n    normals[i] = b2RotateVector(xf.q, polygonB.normals[i]);\n  }\n  const input = new b2DistanceInput();\n  input.proxyA = b2MakeProxy([chainSegmentA.segment.point1, chainSegmentA.segment.point2], 2, 0);\n  input.proxyB = b2MakeProxy(vertices, count, 0);\n  input.transformA = new b2Transform(new b2Vec2(0, 0), new b2Rot(1, 0));\n  input.transformB = new b2Transform(new b2Vec2(0, 0), new b2Rot(1, 0));\n  input.useRadii = false;\n  const output = b2ShapeDistance(cache, input, null, 0);\n  if (output.distance > radiusB + b2_speculativeDistance) {\n    return manifold.clear();\n  }\n  const n0 = chainParams.convex1 ? chainParams.normal0 : normal1;\n  const n2 = chainParams.convex2 ? chainParams.normal2 : normal1;\n  let incidentIndex = -1;\n  let incidentNormal = -1;\n  if (behind1 == false && output.distance > 0.1 * b2_linearSlop) {\n    if (cache.count == 1) {\n      const pA = output.pointA;\n      const pB = output.pointB;\n      const normal = b2Normalize(b2Sub(pB, pA));\n      const type = b2ClassifyNormal(chainParams, normal);\n      if (type == b2NormalType.b2_normalSkip) {\n        return manifold.clear();\n      }\n      if (type == b2NormalType.b2_normalAdmit) {\n        manifold.normalX = xfA.q.c * normal.x - xfA.q.s * normal.y;\n        manifold.normalY = xfA.q.s * normal.x + xfA.q.c * normal.y;\n        const mp = new b2ManifoldPoint();\n        mp.anchorAX = xfA.q.c * pA.x - xfA.q.s * pA.y;\n        mp.anchorAY = xfA.q.s * pA.x + xfA.q.c * pA.y;\n        mp.anchorBX = mp.anchorAX + (xfA.p.x - xfB.p.x);\n        mp.anchorBY = mp.anchorAY + (xfA.p.y - xfB.p.y);\n        mp.pointX = xfA.p.x + mp.anchorAX;\n        mp.pointY = xfA.p.y + mp.anchorAY;\n        mp.separation = output.distance - radiusB;\n        mp.id = B2_MAKE_ID(cache.indexA[0], cache.indexB[0]);\n        manifold.points[0] = mp;\n        manifold.pointCount = 1;\n        return manifold;\n      }\n      incidentIndex = cache.indexB[0];\n    } else {\n      const ia1 = cache.indexA[0];\n      const ia2 = cache.indexA[1];\n      let ib12 = cache.indexB[0];\n      let ib22 = cache.indexB[1];\n      if (ia1 == ia2) {\n        let normalB = b2Sub(output.pointA, output.pointB);\n        let dot1 = b2Dot(normalB, normals[ib12]);\n        let dot2 = b2Dot(normalB, normals[ib22]);\n        const ib = dot1 > dot2 ? ib12 : ib22;\n        normalB = normals[ib];\n        const type = b2ClassifyNormal(chainParams, b2Neg(normalB));\n        if (type == b2NormalType.b2_normalSkip) {\n          return manifold.clear();\n        }\n        if (type == b2NormalType.b2_normalAdmit) {\n          ib12 = ib;\n          ib22 = ib < count - 1 ? ib + 1 : 0;\n          const b12 = vertices[ib12];\n          const b22 = vertices[ib22];\n          dot1 = b2Dot(normalB, b2Sub(p14, b12));\n          dot2 = b2Dot(normalB, b2Sub(p23, b12));\n          if (dot1 < dot2) {\n            if (b2Dot(n0, normalB) < b2Dot(normal1, normalB)) {\n              return manifold.clear();\n            }\n          } else {\n            if (b2Dot(n2, normalB) < b2Dot(normal1, normalB)) {\n              return manifold.clear();\n            }\n          }\n          b2ClipSegments(b12, b22, p14, p23, normalB, radiusB, 0, B2_MAKE_ID(ib12, 1), B2_MAKE_ID(ib22, 0), manifold);\n          manifold.normalX = xfA.q.c * -normalB.x - xfA.q.s * -normalB.y;\n          manifold.normalY = xfA.q.s * -normalB.x + xfA.q.c * -normalB.y;\n          manifold.points[0].anchorAX = xfA.q.c * manifold.points[0].anchorAX - xfA.q.s * manifold.points[0].anchorAY;\n          manifold.points[0].anchorAY = xfA.q.s * manifold.points[0].anchorAX + xfA.q.c * manifold.points[0].anchorAY;\n          manifold.points[1].anchorAX = xfA.q.c * manifold.points[1].anchorAX - xfA.q.s * manifold.points[1].anchorAY;\n          manifold.points[1].anchorAY = xfA.q.s * manifold.points[1].anchorAX + xfA.q.c * manifold.points[1].anchorAY;\n          const pAB2 = b2Sub(xfA.p, xfB.p);\n          manifold.points[0].anchorBX = manifold.points[0].anchorAX + pAB2.x;\n          manifold.points[0].anchorBY = manifold.points[0].anchorAY + pAB2.y;\n          manifold.points[1].anchorBX = manifold.points[1].anchorAX + pAB2.x;\n          manifold.points[1].anchorBY = manifold.points[1].anchorAY + pAB2.y;\n          manifold.points[0].pointX = xfA.p.x + manifold.points[0].anchorAX;\n          manifold.points[0].pointY = xfA.p.y + manifold.points[0].anchorAY;\n          manifold.points[1].pointX = xfA.p.x + manifold.points[1].anchorAX;\n          manifold.points[1].pointY = xfA.p.y + manifold.points[1].anchorAY;\n          return manifold;\n        }\n        incidentNormal = ib;\n      } else {\n        const dot1 = b2Dot(normal1, b2Sub(vertices[ib12], p14));\n        const dot2 = b2Dot(normal1, b2Sub(vertices[ib22], p23));\n        incidentIndex = dot1 < dot2 ? ib12 : ib22;\n      }\n    }\n  } else {\n    let edgeSeparation = Number.MAX_VALUE;\n    for (let i = 0; i < count; ++i) {\n      const s = b2Dot(normal1, b2Sub(vertices[i], p14));\n      if (s < edgeSeparation) {\n        edgeSeparation = s;\n        incidentIndex = i;\n      }\n    }\n    if (chainParams.convex1) {\n      let s0 = Number.MAX_VALUE;\n      for (let i = 0; i < count; ++i) {\n        const s = b2Dot(chainParams.normal0, b2Sub(vertices[i], p14));\n        if (s < s0) {\n          s0 = s;\n        }\n      }\n      if (s0 > edgeSeparation) {\n        edgeSeparation = s0;\n        incidentIndex = -1;\n      }\n    }\n    if (chainParams.convex2) {\n      let s2 = Number.MAX_VALUE;\n      for (let i = 0; i < count; ++i) {\n        const s = b2Dot(chainParams.normal2, b2Sub(vertices[i], p23));\n        if (s < s2) {\n          s2 = s;\n        }\n      }\n      if (s2 > edgeSeparation) {\n        edgeSeparation = s2;\n        incidentIndex = -1;\n      }\n    }\n    let polygonSeparation = -Number.MAX_VALUE;\n    let referenceIndex = -1;\n    for (let i = 0; i < count; ++i) {\n      const n = normals[i];\n      const type = b2ClassifyNormal(chainParams, b2Neg(n));\n      if (type != b2NormalType.b2_normalAdmit) {\n        continue;\n      }\n      const p4 = vertices[i];\n      const s = Math.min(b2Dot(n, b2Sub(p23, p4)), b2Dot(n, b2Sub(p14, p4)));\n      if (s > polygonSeparation) {\n        polygonSeparation = s;\n        referenceIndex = i;\n      }\n    }\n    if (polygonSeparation > edgeSeparation) {\n      const ia1 = referenceIndex;\n      const ia2 = ia1 < count - 1 ? ia1 + 1 : 0;\n      const a1 = vertices[ia1];\n      const a2 = vertices[ia2];\n      const n = normals[ia1];\n      const dot1 = b2Dot(n, b2Sub(p14, a1));\n      const dot2 = b2Dot(n, b2Sub(p23, a1));\n      if (dot1 < dot2) {\n        if (b2Dot(n0, n) < b2Dot(normal1, n)) {\n          return manifold.clear();\n        }\n      } else {\n        if (b2Dot(n2, n) < b2Dot(normal1, n)) {\n          return manifold.clear(0);\n        }\n      }\n      b2ClipSegments(a1, a2, p14, p23, normals[ia1], radiusB, 0, B2_MAKE_ID(ia1, 1), B2_MAKE_ID(ia2, 0), manifold);\n      manifold.normalX = xfA.q.c * -normals[ia1].x - xfA.q.s * -normals[ia1].y;\n      manifold.normalY = xfA.q.s * -normals[ia1].x + xfA.q.c * -normals[ia1].y;\n      manifold.points[0].anchorAX = xfA.q.c * manifold.points[0].anchorAX - xfA.q.s * manifold.points[0].anchorAY;\n      manifold.points[0].anchorAY = xfA.q.s * manifold.points[0].anchorAX + xfA.q.c * manifold.points[0].anchorAY;\n      manifold.points[1].anchorAX = xfA.q.c * manifold.points[1].anchorAX - xfA.q.s * manifold.points[1].anchorAY;\n      manifold.points[1].anchorAY = xfA.q.s * manifold.points[1].anchorAX + xfA.q.c * manifold.points[1].anchorAY;\n      const pAB2 = b2Sub(xfA.p, xfB.p);\n      manifold.points[0].anchorBX = manifold.points[0].anchorAX + pAB2.x;\n      manifold.points[0].anchorBY = manifold.points[0].anchorAY + pAB2.y;\n      manifold.points[1].anchorBX = manifold.points[1].anchorAX + pAB2.x;\n      manifold.points[1].anchorBY = manifold.points[1].anchorAY + pAB2.y;\n      manifold.points[0].pointX = xfA.p.x + manifold.points[0].anchorAX;\n      manifold.points[0].pointY = xfA.p.y + manifold.points[0].anchorAY;\n      manifold.points[1].pointX = xfA.p.x + manifold.points[1].anchorAX;\n      manifold.points[1].pointY = xfA.p.y + manifold.points[1].anchorAY;\n      return manifold;\n    }\n    if (incidentIndex == -1) {\n      return manifold.clear();\n    }\n  }\n  let b1, b2;\n  let ib1, ib2;\n  if (incidentNormal != -1) {\n    ib1 = incidentNormal;\n    ib2 = ib1 < count - 1 ? ib1 + 1 : 0;\n    b1 = vertices[ib1];\n    b2 = vertices[ib2];\n  } else {\n    const i2 = incidentIndex;\n    const i1 = i2 > 0 ? i2 - 1 : count - 1;\n    const d1 = b2Dot(normal1, normals[i1]);\n    const d2 = b2Dot(normal1, normals[i2]);\n    if (d1 < d2) {\n      ib1 = i1;\n      ib2 = i2;\n      b1 = vertices[ib1];\n      b2 = vertices[ib2];\n    } else {\n      ib1 = i2;\n      ib2 = i2 < count - 1 ? i2 + 1 : 0;\n      b1 = vertices[ib1];\n      b2 = vertices[ib2];\n    }\n  }\n  b2ClipSegments(p14, p23, b1, b2, normal1, 0, radiusB, B2_MAKE_ID(0, ib2), B2_MAKE_ID(1, ib1), manifold);\n  manifold.normalX = xfA.q.c * manifold.normalX - xfA.q.s * manifold.normalY;\n  manifold.normalY = xfA.q.s * manifold.normalX + xfA.q.c * manifold.normalY;\n  manifold.points[0].anchorAX = xfA.q.c * manifold.points[0].anchorAX - xfA.q.s * manifold.points[0].anchorAY;\n  manifold.points[0].anchorAY = xfA.q.s * manifold.points[0].anchorAX + xfA.q.c * manifold.points[0].anchorAY;\n  manifold.points[1].anchorAX = xfA.q.c * manifold.points[1].anchorAX - xfA.q.s * manifold.points[1].anchorAY;\n  manifold.points[1].anchorAY = xfA.q.s * manifold.points[1].anchorAX + xfA.q.c * manifold.points[1].anchorAY;\n  const pAB = b2Sub(xfA.p, xfB.p);\n  manifold.points[0].anchorBX = manifold.points[0].anchorAX + pAB.x;\n  manifold.points[0].anchorBY = manifold.points[0].anchorAY + pAB.y;\n  manifold.points[1].anchorBX = manifold.points[1].anchorAX + pAB.x;\n  manifold.points[1].anchorBY = manifold.points[1].anchorAY + pAB.y;\n  manifold.points[0].pointX = xfA.p.x + manifold.points[0].anchorAX;\n  manifold.points[0].pointY = xfA.p.y + manifold.points[0].anchorAY;\n  manifold.points[1].pointX = xfA.p.x + manifold.points[1].anchorAX;\n  manifold.points[1].pointY = xfA.p.y + manifold.points[1].anchorAY;\n  return manifold;\n}\n\n// src/contact_c.js\nvar b2ContactFlags = {\n  b2_contactTouchingFlag: 1,\n  b2_contactHitEventFlag: 2,\n  b2_contactSensorFlag: 4,\n  b2_contactSensorTouchingFlag: 8,\n  b2_contactEnableSensorEvents: 16,\n  b2_contactEnableContactEvents: 32\n};\nvar b2ContactEdge = class {\n  constructor() {\n    this.bodyId = 0;\n    this.prevKey = 0;\n    this.nextKey = 0;\n  }\n};\nvar b2Contact = class {\n  constructor() {\n    this.setIndex = 0;\n    this.colorIndex = 0;\n    this.localIndex = 0;\n    this.edges = [new b2ContactEdge(), new b2ContactEdge()];\n    this.shapeIdA = 0;\n    this.shapeIdB = 0;\n    this.islandPrev = 0;\n    this.islandNext = 0;\n    this.islandId = B2_NULL_INDEX;\n    this.contactId = B2_NULL_INDEX;\n    this.flags = 0;\n    this.isMarked = false;\n  }\n};\nvar b2ContactSim = class {\n  constructor(manifold = new b2Manifold()) {\n    this.contactId = 0;\n    this._bodyIdA = B2_NULL_INDEX;\n    this._bodyIdB = B2_NULL_INDEX;\n    this.bodySimIndexA = 0;\n    this.bodySimIndexB = 0;\n    this.shapeIdA = 0;\n    this.shapeIdB = 0;\n    this.invMassA = 0;\n    this.invIA = 0;\n    this.invMassB = 0;\n    this.invIB = 0;\n    this.manifold = manifold;\n    this.friction = 0;\n    this.restitution = 0;\n    this.tangentSpeed = 0;\n    this.simFlags = 0;\n    this.cache = new b2DistanceCache();\n  }\n  set(src) {\n    this.contactId = src.contactId;\n    this._bodyIdA = src._bodyIdA;\n    this._bodyIdB = src._bodyIdB;\n    this.bodySimIndexA = src.bodySimIndexA;\n    this.bodySimIndexB = src.bodySimIndexB;\n    this.shapeIdA = src.shapeIdA;\n    this.shapeIdB = src.shapeIdB;\n    this.invMassA = src.invMassA;\n    this.invIA = src.invIA;\n    this.invMassB = src.invMassB;\n    this.invIB = src.invIB;\n    src.manifold.copyTo(this.manifold);\n    this.friction = src.friction;\n    this.restitution = src.restitution;\n    this.tangentSpeed = src.tangentSpeed;\n    this.simFlags = src.simFlags;\n    this.cache = src.cache.clone();\n  }\n};\nfunction b2MixFriction(friction1, friction2) {\n  return Math.sqrt(friction1 * friction2);\n}\nfunction b2MixRestitution(restitution1, restitution2) {\n  return Math.max(restitution1, restitution2);\n}\nvar b2ContactRegister = class {\n  constructor(fcn = null, primary = false) {\n    this.fcn = fcn;\n    this.primary = primary;\n  }\n};\nvar s_registers = Array(b2ShapeType.b2_shapeTypeCount).fill().map(\n  () => Array(b2ShapeType.b2_shapeTypeCount).fill().map(() => new b2ContactRegister())\n);\nvar s_initialized = false;\nfunction b2CircleManifold(shapeA, xfA, shapeB, xfB, cache, manifold) {\n  return b2CollideCircles(shapeA.circle, xfA, shapeB.circle, xfB, manifold);\n}\nfunction b2CapsuleAndCircleManifold(shapeA, xfA, shapeB, xfB, cache, manifold) {\n  return b2CollideCapsuleAndCircle(shapeA.capsule, xfA, shapeB.circle, xfB, manifold);\n}\nfunction b2CapsuleManifold(shapeA, xfA, shapeB, xfB, cache, manifold) {\n  return b2CollideCapsules(shapeA.capsule, xfA, shapeB.capsule, xfB, manifold);\n}\nfunction b2PolygonAndCircleManifold(shapeA, xfA, shapeB, xfB, cache, manifold) {\n  return b2CollidePolygonAndCircle(shapeA.polygon, xfA, shapeB.circle, xfB, manifold);\n}\nfunction b2PolygonAndCapsuleManifold(shapeA, xfA, shapeB, xfB, cache, manifold) {\n  return b2CollidePolygonAndCapsule(shapeA.polygon, xfA, shapeB.capsule, xfB, manifold);\n}\nfunction b2PolygonManifold(shapeA, xfA, shapeB, xfB, cache, manifold) {\n  return b2CollidePolygons(shapeA.polygon, xfA, shapeB.polygon, xfB, manifold);\n}\nfunction b2SegmentAndCircleManifold(shapeA, xfA, shapeB, xfB, cache, manifold) {\n  return b2CollideSegmentAndCircle(shapeA.segment, xfA, shapeB.circle, xfB, manifold);\n}\nfunction b2SegmentAndCapsuleManifold(shapeA, xfA, shapeB, xfB, cache, manifold) {\n  return b2CollideSegmentAndCapsule(shapeA.segment, xfA, shapeB.capsule, xfB, manifold);\n}\nfunction b2SegmentAndPolygonManifold(shapeA, xfA, shapeB, xfB, cache, manifold) {\n  return b2CollideSegmentAndPolygon(shapeA.segment, xfA, shapeB.polygon, xfB, manifold);\n}\nfunction b2ChainSegmentAndCircleManifold(shapeA, xfA, shapeB, xfB, cache, manifold) {\n  return b2CollideChainSegmentAndCircle(shapeA.chainSegment, xfA, shapeB.circle, xfB, manifold);\n}\nfunction b2ChainSegmentAndCapsuleManifold(shapeA, xfA, shapeB, xfB, cache, manifold) {\n  return b2CollideChainSegmentAndCapsule(shapeA.chainSegment, xfA, shapeB.capsule, xfB, cache, manifold);\n}\nfunction b2ChainSegmentAndPolygonManifold(shapeA, xfA, shapeB, xfB, cache, manifold) {\n  return b2CollideChainSegmentAndPolygon(shapeA.chainSegment, xfA, shapeB.polygon, xfB, cache, manifold);\n}\nfunction b2AddType(fcn, type1, type2) {\n  s_registers[type1][type2].fcn = fcn;\n  s_registers[type1][type2].primary = true;\n  if (type1 != type2) {\n    s_registers[type2][type1].fcn = fcn;\n    s_registers[type2][type1].primary = false;\n  }\n}\nfunction b2InitializeContactRegisters() {\n  if (s_initialized === false) {\n    b2AddType(b2CircleManifold, b2ShapeType.b2_circleShape, b2ShapeType.b2_circleShape);\n    b2AddType(b2CapsuleAndCircleManifold, b2ShapeType.b2_capsuleShape, b2ShapeType.b2_circleShape);\n    b2AddType(b2CapsuleManifold, b2ShapeType.b2_capsuleShape, b2ShapeType.b2_capsuleShape);\n    b2AddType(b2PolygonAndCircleManifold, b2ShapeType.b2_polygonShape, b2ShapeType.b2_circleShape);\n    b2AddType(b2PolygonAndCapsuleManifold, b2ShapeType.b2_polygonShape, b2ShapeType.b2_capsuleShape);\n    b2AddType(b2PolygonManifold, b2ShapeType.b2_polygonShape, b2ShapeType.b2_polygonShape);\n    b2AddType(b2SegmentAndCircleManifold, b2ShapeType.b2_segmentShape, b2ShapeType.b2_circleShape);\n    b2AddType(b2SegmentAndCapsuleManifold, b2ShapeType.b2_segmentShape, b2ShapeType.b2_capsuleShape);\n    b2AddType(b2SegmentAndPolygonManifold, b2ShapeType.b2_segmentShape, b2ShapeType.b2_polygonShape);\n    b2AddType(b2ChainSegmentAndCircleManifold, b2ShapeType.b2_chainSegmentShape, b2ShapeType.b2_circleShape);\n    b2AddType(b2ChainSegmentAndCapsuleManifold, b2ShapeType.b2_chainSegmentShape, b2ShapeType.b2_capsuleShape);\n    b2AddType(b2ChainSegmentAndPolygonManifold, b2ShapeType.b2_chainSegmentShape, b2ShapeType.b2_polygonShape);\n    s_initialized = true;\n  }\n}\nfunction b2CreateContact(world, shapeA, shapeB) {\n  const type1 = shapeA.type;\n  const type2 = shapeB.type;\n  if (s_registers[type1][type2].fcn === null) {\n    return;\n  }\n  if (s_registers[type1][type2].primary === false) {\n    b2CreateContact(world, shapeB, shapeA);\n    return;\n  }\n  const bodyA = b2GetBody(world, shapeA.bodyId);\n  const bodyB = b2GetBody(world, shapeB.bodyId);\n  let setIndex;\n  if (bodyA.setIndex === b2SetType.b2_awakeSet || bodyB.setIndex === b2SetType.b2_awakeSet) {\n    setIndex = b2SetType.b2_awakeSet;\n  } else {\n    setIndex = b2SetType.b2_disabledSet;\n  }\n  const set = world.solverSetArray[setIndex];\n  const contactId = b2AllocId(world.contactIdPool);\n  while (world.contactArray.length <= contactId) {\n    world.contactArray.push(new b2Contact());\n  }\n  const shapeIdA = shapeA.id;\n  const shapeIdB = shapeB.id;\n  const contact = world.contactArray[contactId];\n  contact.contactId = contactId;\n  contact.setIndex = setIndex;\n  contact.colorIndex = B2_NULL_INDEX;\n  contact.localIndex = set.contacts.count;\n  contact.islandId = B2_NULL_INDEX;\n  contact.islandPrev = B2_NULL_INDEX;\n  contact.islandNext = B2_NULL_INDEX;\n  contact.shapeIdA = shapeIdA;\n  contact.shapeIdB = shapeIdB;\n  contact.isMarked = false;\n  contact.flags = 0;\n  if (shapeA.isSensor || shapeB.isSensor) {\n    contact.flags |= b2ContactFlags.b2_contactSensorFlag;\n  }\n  if (shapeA.enableSensorEvents || shapeB.enableSensorEvents) {\n    contact.flags |= b2ContactFlags.b2_contactEnableSensorEvents;\n  }\n  if (shapeA.enableContactEvents || shapeB.enableContactEvents) {\n    contact.flags |= b2ContactFlags.b2_contactEnableContactEvents;\n  }\n  {\n    contact.edges[0].bodyId = shapeA.bodyId;\n    contact.edges[0].prevKey = B2_NULL_INDEX;\n    contact.edges[0].nextKey = bodyA.headContactKey;\n    const keyA = contactId << 1 | 0;\n    const headContactKey = bodyA.headContactKey;\n    if (headContactKey !== B2_NULL_INDEX) {\n      const headContact = world.contactArray[headContactKey >> 1];\n      headContact.edges[headContactKey & 1].prevKey = keyA;\n    }\n    bodyA.headContactKey = keyA;\n    bodyA.contactCount += 1;\n  }\n  {\n    contact.edges[1].bodyId = shapeB.bodyId;\n    contact.edges[1].prevKey = B2_NULL_INDEX;\n    contact.edges[1].nextKey = bodyB.headContactKey;\n    const keyB = contactId << 1 | 1;\n    const headContactKey = bodyB.headContactKey;\n    if (bodyB.headContactKey !== B2_NULL_INDEX) {\n      const headContact = world.contactArray[headContactKey >> 1];\n      headContact.edges[headContactKey & 1].prevKey = keyB;\n    }\n    bodyB.headContactKey = keyB;\n    bodyB.contactCount += 1;\n  }\n  const pairKey = B2_SHAPE_PAIR_KEY(shapeIdA, shapeIdB);\n  b2AddKey(world.broadPhase.pairSet, pairKey);\n  const contactSim = b2AddContact(set.contacts);\n  contactSim.contactId = contactId;\n  contactSim._bodyIdA = shapeA.bodyId;\n  contactSim._bodyIdB = shapeB.bodyId;\n  contactSim.bodySimIndexA = B2_NULL_INDEX;\n  contactSim.bodySimIndexB = B2_NULL_INDEX;\n  contactSim.invMassA = 0;\n  contactSim.invIA = 0;\n  contactSim.invMassB = 0;\n  contactSim.invIB = 0;\n  contactSim.shapeIdA = shapeIdA;\n  contactSim.shapeIdB = shapeIdB;\n  contactSim.friction = b2MixFriction(shapeA.friction, shapeB.friction);\n  contactSim.restitution = b2MixRestitution(shapeA.restitution, shapeB.restitution);\n  contactSim.tangentSpeed = 0;\n  contactSim.simFlags = 0;\n  if (shapeA.enablePreSolveEvents || shapeB.enablePreSolveEvents) {\n    contactSim.simFlags |= b2ContactSimFlags.b2_simEnablePreSolveEvents;\n  }\n}\nfunction b2DestroyContact(world, contact, wakeBodies) {\n  const pairKey = B2_SHAPE_PAIR_KEY(contact.shapeIdA, contact.shapeIdB);\n  b2RemoveKey(world.broadPhase.pairSet, pairKey);\n  const edgeA = contact.edges[0];\n  const edgeB = contact.edges[1];\n  const bodyIdA = edgeA.bodyId;\n  const bodyIdB = edgeB.bodyId;\n  const bodyA = b2GetBody(world, bodyIdA);\n  const bodyB = b2GetBody(world, bodyIdB);\n  const flags = contact.flags;\n  if ((flags & (b2ContactFlags.b2_contactTouchingFlag | b2ContactFlags.b2_contactSensorTouchingFlag)) != 0 && (flags & (b2ContactFlags.b2_contactEnableContactEvents | b2ContactFlags.b2_contactEnableSensorEvents)) != 0) {\n    const worldId = world.worldId;\n    const shapeA = world.shapeArray[contact.shapeIdA];\n    const shapeB = world.shapeArray[contact.shapeIdB];\n    const shapeIdA = new b2ShapeId(shapeA.id + 1, worldId, shapeA.revision);\n    const shapeIdB = new b2ShapeId(shapeB.id + 1, worldId, shapeB.revision);\n    if ((flags & b2ContactFlags.b2_contactTouchingFlag) != 0 && (flags & b2ContactFlags.b2_contactEnableContactEvents) != 0) {\n      const event = new b2ContactEndTouchEvent(shapeIdA, shapeIdB);\n      world.contactEndArray.push(event);\n    }\n    if ((flags & b2ContactFlags.b2_contactSensorTouchingFlag) != 0 && (flags & b2ContactFlags.b2_contactEnableSensorEvents) != 0) {\n      const event = new b2SensorEndTouchEvent();\n      if (shapeA.isSensor) {\n        event.sensorShapeId = shapeIdA;\n        event.visitorShapeId = shapeIdB;\n      } else {\n        event.sensorShapeId = shapeIdB;\n        event.visitorShapeId = shapeIdA;\n      }\n      world.sensorEndEventArray.push(event);\n    }\n  }\n  if (edgeA.prevKey !== B2_NULL_INDEX) {\n    const prevContact = world.contactArray[edgeA.prevKey >> 1];\n    const prevEdge = prevContact.edges[edgeA.prevKey & 1];\n    prevEdge.nextKey = edgeA.nextKey;\n  }\n  if (edgeA.nextKey !== B2_NULL_INDEX) {\n    const nextContact = world.contactArray[edgeA.nextKey >> 1];\n    const nextEdge = nextContact.edges[edgeA.nextKey & 1];\n    nextEdge.prevKey = edgeA.prevKey;\n  }\n  const contactId = contact.contactId;\n  const edgeKeyA = contactId << 1 | 0;\n  if (bodyA.headContactKey === edgeKeyA) {\n    bodyA.headContactKey = edgeA.nextKey;\n  }\n  bodyA.contactCount -= 1;\n  if (edgeB.prevKey !== B2_NULL_INDEX) {\n    const prevContact = world.contactArray[edgeB.prevKey >> 1];\n    const prevEdge = prevContact.edges[edgeB.prevKey & 1];\n    prevEdge.nextKey = edgeB.nextKey;\n  }\n  if (edgeB.nextKey !== B2_NULL_INDEX) {\n    const nextContact = world.contactArray[edgeB.nextKey >> 1];\n    const nextEdge = nextContact.edges[edgeB.nextKey & 1];\n    nextEdge.prevKey = edgeB.prevKey;\n  }\n  const edgeKeyB = contactId << 1 | 1;\n  if (bodyB.headContactKey === edgeKeyB) {\n    bodyB.headContactKey = edgeB.nextKey;\n  }\n  bodyB.contactCount -= 1;\n  if (contact.islandId !== B2_NULL_INDEX) {\n    b2UnlinkContact(world, contact);\n  }\n  if (contact.colorIndex !== B2_NULL_INDEX) {\n    b2RemoveContactFromGraph(world, bodyIdA, bodyIdB, contact.colorIndex, contact.localIndex);\n  } else {\n    const set = world.solverSetArray[contact.setIndex];\n    const movedIndex = b2RemoveContact(set.contacts, contact.localIndex);\n    if (movedIndex !== B2_NULL_INDEX) {\n      const movedContact = set.contacts.data[contact.localIndex];\n      world.contactArray[movedContact.contactId].localIndex = contact.localIndex;\n    }\n  }\n  contact.contactId = B2_NULL_INDEX;\n  contact.setIndex = B2_NULL_INDEX;\n  contact.colorIndex = B2_NULL_INDEX;\n  contact.localIndex = B2_NULL_INDEX;\n  b2FreeId(world.contactIdPool, contactId);\n  if (wakeBodies) {\n    b2WakeBody(world, bodyA);\n    b2WakeBody(world, bodyB);\n  }\n}\nfunction b2GetContactSim(world, contact) {\n  if (contact.setIndex === b2SetType.b2_awakeSet && contact.colorIndex !== B2_NULL_INDEX) {\n    const color = world.constraintGraph.colors[contact.colorIndex];\n    const sim = color.contacts.data[contact.localIndex];\n    return sim;\n  }\n  const set = world.solverSetArray[contact.setIndex];\n  return set.contacts.data[contact.localIndex];\n}\nfunction b2ShouldShapesCollide(filterA, filterB) {\n  if (filterA.groupIndex === filterB.groupIndex && filterA.groupIndex !== 0) {\n    return filterA.groupIndex > 0;\n  }\n  const collide = (filterA.maskBits & filterB.categoryBits) !== 0 && (filterA.categoryBits & filterB.maskBits) !== 0;\n  return collide;\n}\nfunction b2TestShapeOverlap(shapeA, xfA, shapeB, xfB, cache) {\n  const input = new b2DistanceInput();\n  input.proxyA = b2MakeShapeDistanceProxy(shapeA);\n  input.proxyB = b2MakeShapeDistanceProxy(shapeB);\n  input.transformA = xfA;\n  input.transformB = xfB;\n  input.useRadii = true;\n  const output = b2ShapeDistance(cache, input, null, 0);\n  return output.distance < 10 * eps;\n}\nvar oldManifold = new b2Manifold();\nfunction b2UpdateContact(world, contactSim, shapeA, transformA, centerOffsetA2, shapeB, transformB, centerOffsetB2) {\n  let touching;\n  if (shapeA.isSensor || shapeB.isSensor) {\n    touching = b2TestShapeOverlap(shapeA, transformA, shapeB, transformB, contactSim.cache);\n  } else {\n    contactSim.manifold.copyTo(oldManifold);\n    const fcn = s_registers[shapeA.type][shapeB.type].fcn;\n    fcn(shapeA, transformA, shapeB, transformB, contactSim.cache, contactSim.manifold);\n    const pointCount = contactSim.manifold.pointCount;\n    touching = pointCount > 0;\n    if (touching && world.preSolveFcn && (contactSim.simFlags & b2ContactSimFlags.b2_simEnablePreSolveEvents) != 0) {\n      const shapeIdA = new b2ShapeId(shapeA.id + 1, world.worldId, shapeA.revision);\n      const shapeIdB = new b2ShapeId(shapeB.id + 1, world.worldId, shapeB.revision);\n      touching = world.preSolveFcn(shapeIdA, shapeIdB, contactSim.manifold, world.preSolveContext);\n      if (touching == false) {\n        contactSim.manifold.pointCount = 0;\n      }\n    }\n    if (touching && (shapeA.enableHitEvents || shapeB.enableHitEvents)) {\n      contactSim.simFlags |= b2ContactSimFlags.b2_simEnableHitEvent;\n    } else {\n      contactSim.simFlags &= ~b2ContactSimFlags.b2_simEnableHitEvent;\n    }\n    for (let i = 0; i < pointCount; ++i) {\n      const mp2 = contactSim.manifold.points[i];\n      mp2.anchorAX -= centerOffsetA2.x;\n      mp2.anchorAY -= centerOffsetA2.y;\n      mp2.anchorBX -= centerOffsetB2.x;\n      mp2.anchorBY -= centerOffsetB2.y;\n      mp2.normalImpulse = 0;\n      mp2.tangentImpulse = 0;\n      mp2.maxNormalImpulse = 0;\n      mp2.normalVelocity = 0;\n      mp2.persisted = false;\n      const id2 = mp2.id;\n      for (let j = 0, l = oldManifold.pointCount; j < l; ++j) {\n        const mp1 = oldManifold.points[j];\n        if (mp1.id === id2) {\n          mp2.normalImpulse = mp1.normalImpulse;\n          mp2.tangentImpulse = mp1.tangentImpulse;\n          mp2.persisted = true;\n          break;\n        }\n      }\n    }\n  }\n  if (touching) {\n    contactSim.simFlags |= b2ContactSimFlags.b2_simTouchingFlag;\n  } else {\n    contactSim.simFlags &= ~b2ContactSimFlags.b2_simTouchingFlag;\n  }\n  return touching;\n}\nfunction b2ComputeManifold(shapeA, transformA, shapeB, transformB, manifold) {\n  const fcn = s_registers[shapeA.type][shapeB.type].fcn;\n  const cache = new b2DistanceCache();\n  return fcn(shapeA, transformA, shapeB, transformB, cache, manifold);\n}\n\n// src/include/contact_h.js\nvar b2ContactSimFlags = {\n  b2_simTouchingFlag: 65536,\n  b2_simDisjoint: 131072,\n  b2_simStartedTouching: 262144,\n  b2_simStoppedTouching: 524288,\n  b2_simEnableHitEvent: 1048576,\n  b2_simEnablePreSolveEvents: 2097152\n};\n\n// src/broad_phase_c.js\nvar b2BroadPhase = class {\n  constructor() {\n    this.trees = new Array(b2BodyType.b2_bodyTypeCount).fill().map(() => new b2DynamicTree());\n    this.moveSet = null;\n    this.moveArray = null;\n    this.moveResults = null;\n    this.movePairs = null;\n    this.movePairCapacity = 0;\n    this.movePairIndex = 0;\n    this.pairSet = null;\n  }\n};\nvar B2_PROXY_TYPE = (KEY) => KEY & 3;\nvar B2_PROXY_ID = (KEY) => KEY >> 2;\nvar B2_PROXY_KEY = (ID, TYPE) => ID << 2 | TYPE;\nfunction b2BufferMove(bp, queryProxy) {\n  if (!b2AddKey(bp.moveSet, queryProxy + 1)) {\n    bp.moveArray.push(queryProxy);\n  }\n}\nfunction b2CreateBroadPhase(bp) {\n  bp.moveSet = b2CreateSet();\n  bp.moveArray = [];\n  bp.moveResults = null;\n  bp.movePairs = null;\n  bp.movePairCapacity = 0;\n  bp.movePairIndex = 0;\n  bp.pairSet = b2CreateSet();\n  for (let i = 0; i < b2BodyType.b2_bodyTypeCount; ++i) {\n    bp.trees[i] = b2DynamicTree_Create();\n  }\n}\nfunction b2DestroyBroadPhase(bp) {\n  for (let i = 0; i < b2BodyType.b2_bodyTypeCount; ++i) {\n    b2DynamicTree_Destroy(bp.trees[i]);\n  }\n  b2DestroySet(bp.moveSet);\n  bp.moveArray = null;\n  b2DestroySet(bp.pairSet);\n  Object.keys(bp).forEach((key) => delete bp[key]);\n}\nfunction b2UnBufferMove(bp, proxyKey) {\n  const found = b2RemoveKey(bp.moveSet, proxyKey + 1);\n  if (found) {\n    const count = bp.moveArray.length;\n    for (let i = 0; i < count; ++i) {\n      if (bp.moveArray[i] === proxyKey) {\n        bp.moveArray[i] = bp.moveArray[count - 1];\n        bp.moveArray.pop();\n        break;\n      }\n    }\n  }\n}\nfunction b2BroadPhase_CreateProxy(bp, proxyType, aabb, categoryBits, shapeIndex, forcePairCreation) {\n  const proxyId = b2DynamicTree_CreateProxy(bp.trees[proxyType], aabb, categoryBits, shapeIndex);\n  const proxyKey = B2_PROXY_KEY(proxyId, proxyType);\n  if (proxyType !== b2BodyType.b2_staticBody || forcePairCreation) {\n    b2BufferMove(bp, proxyKey);\n  }\n  return proxyKey;\n}\nfunction b2BroadPhase_DestroyProxy(bp, proxyKey) {\n  b2UnBufferMove(bp, proxyKey);\n  const proxyType = B2_PROXY_TYPE(proxyKey);\n  const proxyId = B2_PROXY_ID(proxyKey);\n  b2DynamicTree_DestroyProxy(bp.trees[proxyType], proxyId);\n}\nfunction b2BroadPhase_MoveProxy(bp, proxyKey, aabb) {\n  const proxyType = B2_PROXY_TYPE(proxyKey);\n  const proxyId = B2_PROXY_ID(proxyKey);\n  b2DynamicTree_MoveProxy(bp.trees[proxyType], proxyId, aabb);\n  b2BufferMove(bp, proxyKey);\n}\nfunction b2BroadPhase_EnlargeProxy(bp, proxyKey, aabb) {\n  const typeIndex = B2_PROXY_TYPE(proxyKey);\n  const proxyId = B2_PROXY_ID(proxyKey);\n  b2DynamicTree_EnlargeProxy(bp.trees[typeIndex], proxyId, aabb);\n  b2BufferMove(bp, proxyKey);\n}\nvar b2MovePair = class {\n  constructor() {\n    this.shapeIndexA = 0;\n    this.shapeIndexB = 0;\n    this.next = null;\n  }\n};\nvar b2MoveResult = class {\n  constructor() {\n    this.pairList = null;\n  }\n};\nvar b2QueryPairContext = class {\n  constructor() {\n    this.world = null;\n    this.moveResult = null;\n    this.queryTreeType = 0;\n    this.queryProxyKey = 0;\n    this.queryShapeIndex = 0;\n  }\n};\nfunction b2PairQueryCallback(proxyId, shapeId, context) {\n  const queryContext = context;\n  const bp = queryContext.world.broadPhase;\n  const proxyKey = B2_PROXY_KEY(proxyId, queryContext.queryTreeType);\n  if (proxyKey === queryContext.queryProxyKey) {\n    return true;\n  }\n  if (queryContext.queryTreeType !== b2BodyType.b2_staticBody) {\n    if (proxyKey < queryContext.queryProxyKey && b2ContainsKey(bp.moveSet, proxyKey + 1)) {\n      return true;\n    }\n  }\n  const pairKey = B2_SHAPE_PAIR_KEY(shapeId, queryContext.queryShapeIndex);\n  if (b2ContainsKey(bp.pairSet, pairKey)) {\n    return true;\n  }\n  let shapeIdA, shapeIdB;\n  if (proxyKey < queryContext.queryProxyKey) {\n    shapeIdA = shapeId;\n    shapeIdB = queryContext.queryShapeIndex;\n  } else {\n    shapeIdA = queryContext.queryShapeIndex;\n    shapeIdB = shapeId;\n  }\n  const world = queryContext.world;\n  const shapeA = world.shapeArray[shapeIdA];\n  const shapeB = world.shapeArray[shapeIdB];\n  const bodyIdA = shapeA.bodyId;\n  const bodyIdB = shapeB.bodyId;\n  if (bodyIdA === bodyIdB) {\n    return true;\n  }\n  if (!b2ShouldShapesCollide(shapeA.filter, shapeB.filter)) {\n    return true;\n  }\n  if (shapeA.isSensor && shapeB.isSensor) {\n    return true;\n  }\n  const bodyA = b2GetBody(world, bodyIdA);\n  const bodyB = b2GetBody(world, bodyIdB);\n  if (!b2ShouldBodiesCollide(world, bodyA, bodyB)) {\n    return true;\n  }\n  const customFilterFcn = queryContext.world.customFilterFcn;\n  if (customFilterFcn) {\n    const idA = new b2ShapeId(shapeIdA + 1, world.worldId, shapeA.revision);\n    const idB = new b2ShapeId(shapeIdB + 1, world.worldId, shapeB.revision);\n    const shouldCollide = customFilterFcn(idA, idB, queryContext.world.customFilterContext);\n    if (!shouldCollide) {\n      return true;\n    }\n  }\n  const pairIndex = bp.movePairIndex++;\n  let pair;\n  if (pairIndex < bp.movePairCapacity) {\n    pair = bp.movePairs[pairIndex];\n  } else {\n    pair = new b2MovePair();\n  }\n  pair.shapeIndexA = shapeIdA;\n  pair.shapeIndexB = shapeIdB;\n  pair.next = queryContext.moveResult.pairList;\n  queryContext.moveResult.pairList = pair;\n  return true;\n}\nfunction b2UpdateBroadPhasePairs(world) {\n  const bp = world.broadPhase;\n  const moveCount = bp.moveArray.length;\n  if (moveCount === 0) {\n    return;\n  }\n  const alloc = world.stackAllocator;\n  bp.moveResults = b2AllocateStackItem(alloc, moveCount, \"move results\", () => new b2MoveResult());\n  b2FindPairsTask(0, moveCount, world);\n  const shapes = world.shapeArray;\n  for (const result of bp.moveResults) {\n    for (let pair = result.pairList; pair; pair = pair.next) {\n      b2CreateContact(world, shapes[pair.shapeIndexA], shapes[pair.shapeIndexB]);\n    }\n  }\n  bp.moveArray.length = 0;\n  b2ClearSet(bp.moveSet);\n  b2FreeStackItem(alloc, bp.moveResults);\n  bp.moveResults = null;\n  b2ValidateSolverSets(world);\n}\nfunction b2FindPairsTask(startIndex, endIndex, world) {\n  const bp = world.broadPhase;\n  const queryContext = new b2QueryPairContext();\n  queryContext.world = world;\n  for (let i = startIndex; i < endIndex; ++i) {\n    const proxyKey = bp.moveArray[i];\n    if (proxyKey === B2_NULL_INDEX) {\n      continue;\n    }\n    const proxyType = B2_PROXY_TYPE(proxyKey);\n    const proxyId = B2_PROXY_ID(proxyKey);\n    queryContext.queryProxyKey = proxyKey;\n    const baseTree = bp.trees[proxyType];\n    const fatAABB = baseTree.nodes[proxyId].aabb;\n    queryContext.queryShapeIndex = b2DynamicTree_GetUserData(baseTree, proxyId);\n    const moveResult = bp.moveResults[i];\n    moveResult.pairList = null;\n    queryContext.moveResult = moveResult;\n    if (proxyType === b2BodyType.b2_dynamicBody) {\n      b2QueryTreeForPairs(bp, fatAABB, queryContext, b2BodyType.b2_kinematicBody);\n      b2QueryTreeForPairs(bp, fatAABB, queryContext, b2BodyType.b2_staticBody);\n    }\n    queryContext.queryTreeType = b2BodyType.b2_dynamicBody;\n    b2DynamicTree_QueryAll(bp.trees[b2BodyType.b2_dynamicBody], fatAABB, queryContext);\n  }\n}\nfunction b2QueryTreeForPairs(bp, fatAABB, queryContext, treeType) {\n  queryContext.queryTreeType = treeType;\n  b2DynamicTree_QueryAll(bp.trees[treeType], fatAABB, queryContext);\n}\nfunction b2BroadPhase_RebuildTrees(bp) {\n  b2DynamicTree_Rebuild(bp.trees[b2BodyType.b2_dynamicBody]);\n  b2DynamicTree_Rebuild(bp.trees[b2BodyType.b2_kinematicBody]);\n}\n\n// src/world_c.js\nvar B2_MAX_WORLDS = 32;\nvar b2SetType = {\n  b2_staticSet: 0,\n  b2_disabledSet: 1,\n  b2_awakeSet: 2,\n  b2_firstSleepingSet: 3\n};\nvar b2World = class {\n  stackAllocator = new b2StackAllocator();\n  broadPhase = new b2BroadPhase();\n  constraintGraph = new b2ConstraintGraph();\n  // bodyIdPool = new b2IdPool();\n  bodyArray = [];\n  // solverSetIdPool = new b2IdPool();\n  solverSetArray = [];\n  // jointIdPool = new b2IdPool();\n  jointArray = [];\n  // contactIdPool = new b2IdPool();\n  contactArray = [];\n  // islandIdPool = new b2IdPool();\n  islandArray = [];\n  // shapeIdPool = new b2IdPool();\n  // chainIdPool = new b2IdPool();\n  shapeArray = [];\n  chainArray = [];\n  taskContextArray = [];\n  bodyMoveEventArray = [];\n  sensorBeginEventArray = [];\n  sensorEndEventArray = [];\n  contactBeginArray = [];\n  contactEndArray = [];\n  contactHitArray = [];\n  debugBodySet = new b2BitSet();\n  debugJointSet = new b2BitSet();\n  debugContactSet = new b2BitSet();\n  stepIndex = 0;\n  splitIslandId = 0;\n  gravity = new b2Vec2(0, 0);\n  hitEventThreshold = 0;\n  restitutionThreshold = 0;\n  maxLinearVelocity = 0;\n  contactPushoutVelocity = 0;\n  contactHertz = 0;\n  contactDampingRatio = 0;\n  jointHertz = 0;\n  jointDampingRatio = 0;\n  revision = 0;\n  // profile = new b2Profile();\n  preSolveFcn = null;\n  preSolveContext = null;\n  customFilterFcn = null;\n  customFilterContext = null;\n  workerCount = 0;\n  userTaskContext = null;\n  userTreeTask = null;\n  inv_h = 0;\n  worldId = new b2WorldId();\n  enableSleep = true;\n  locked = false;\n  enableWarmStarting = false;\n  enableContinuous = false;\n  inUse = false;\n};\nvar WorldOverlapContext = class {\n  constructor() {\n    this.world = null;\n    this.fcn = null;\n    this.filter = null;\n    this.proxy = null;\n    this.transform = null;\n    this.userContext = null;\n  }\n};\nvar WorldRayCastContext = class {\n  constructor() {\n    this.world = null;\n    this.fcn = null;\n    this.filter = null;\n    this.fraction = 0;\n    this.userContext = null;\n  }\n};\nvar b2TaskContext = class {\n  constructor() {\n    this.contactStateBitSet = new b2BitSet();\n    this.enlargedSimBitSet = new b2BitSet();\n    this.awakeIslandBitSet = new b2BitSet();\n    this.splitSleepTime = 0;\n    this.splitIslandId = B2_NULL_INDEX;\n  }\n};\nfunction b2GetWorldFromId(id) {\n  const world = b2_worlds[id.index1 - 1];\n  return world;\n}\nfunction b2GetWorld(index) {\n  const world = b2_worlds[index];\n  return world;\n}\nfunction b2GetWorldLocked(index) {\n  const world = b2_worlds[index];\n  if (world.locked) {\n    return null;\n  }\n  return world;\n}\nvar b2_worlds = null;\nfunction b2CreateWorldArray() {\n  if (b2_worlds != null) {\n    return;\n  }\n  b2_worlds = [];\n  for (let i = 0; i < B2_MAX_WORLDS; i++) {\n    b2_worlds[i] = new b2World();\n    b2_worlds[i].inUse = false;\n  }\n}\nfunction b2CreateWorld(def) {\n  let worldId = B2_NULL_INDEX;\n  for (let i = 0; i < b2_worlds.length; ++i) {\n    if (b2_worlds[i].inUse === false) {\n      worldId = i;\n      break;\n    }\n  }\n  if (worldId === B2_NULL_INDEX) {\n    return new b2WorldId(0, 0);\n  }\n  b2InitializeContactRegisters();\n  const world = b2_worlds[worldId];\n  const revision = world.revision;\n  world.worldId = worldId;\n  world.revision = revision;\n  world.inUse = true;\n  world.stackAllocator = b2CreateStackAllocator();\n  b2CreateBroadPhase(world.broadPhase);\n  world.constraintGraph = b2CreateGraph(world.constraintGraph, 16);\n  world.bodyIdPool = b2CreateIdPool(\"body\");\n  world.bodyArray = [];\n  world.solverSetArray = [];\n  world.solverSetIdPool = b2CreateIdPool(\"solverSet\");\n  let set;\n  set = new b2SolverSet();\n  set.setIndex = b2AllocId(world.solverSetIdPool);\n  world.solverSetArray.push(set);\n  set = new b2SolverSet();\n  set.setIndex = b2AllocId(world.solverSetIdPool);\n  world.solverSetArray.push(set);\n  set = new b2SolverSet();\n  set.setIndex = b2AllocId(world.solverSetIdPool);\n  world.solverSetArray.push(set);\n  world.shapeIdPool = b2CreateIdPool(\"shapeId\");\n  world.shapeArray = [];\n  world.chainIdPool = b2CreateIdPool(\"chainId\");\n  world.chainArray = [];\n  world.contactIdPool = b2CreateIdPool(\"contactId\");\n  world.contactArray = [];\n  for (let i = 0; i < 4096; i++) {\n    world.contactArray.push(new b2Contact());\n  }\n  world.jointIdPool = b2CreateIdPool(\"jointId\");\n  world.jointArray = [];\n  world.islandIdPool = b2CreateIdPool(\"islandId\");\n  world.islandArray = [];\n  world.bodyMoveEventArray = [];\n  world.sensorBeginEventArray = [];\n  world.sensorEndEventArray = [];\n  world.contactBeginArray = [];\n  world.contactEndArray = [];\n  world.contactHitArray = [];\n  world.stepIndex = 0;\n  world.splitIslandId = B2_NULL_INDEX;\n  world.gravity = def.gravity;\n  world.hitEventThreshold = def.hitEventThreshold;\n  world.restitutionThreshold = def.restitutionThreshold;\n  world.maxLinearVelocity = def.maximumLinearVelocity;\n  world.contactPushoutVelocity = def.contactPushoutVelocity;\n  world.contactHertz = def.contactHertz;\n  world.contactDampingRatio = def.contactDampingRatio;\n  world.jointHertz = def.jointHertz;\n  world.jointDampingRatio = def.jointDampingRatio;\n  world.enableSleep = def.enableSleep;\n  world.locked = false;\n  world.enableWarmStarting = true;\n  world.enableContinuous = def.enableContinuous;\n  world.userTreeTask = null;\n  world.workerCount = 1;\n  world.userTaskContext = null;\n  world.taskContextArray = [];\n  for (let i = 0; i < world.workerCount; ++i) {\n    const context = new b2TaskContext();\n    context.contactStateBitSet = b2CreateBitSet(1024);\n    context.enlargedSimBitSet = b2CreateBitSet(256), context.awakeIslandBitSet = b2CreateBitSet(256);\n    world.taskContextArray[i] = context;\n  }\n  world.debugBodySet = b2CreateBitSet(256);\n  world.debugJointSet = b2CreateBitSet(256);\n  world.debugContactSet = b2CreateBitSet(256);\n  return new b2WorldId(worldId + 1, world.revision);\n}\nfunction b2DestroyWorld(worldId) {\n  let world = b2GetWorldFromId(worldId);\n  b2DestroyBitSet(world.debugBodySet);\n  b2DestroyBitSet(world.debugJointSet);\n  b2DestroyBitSet(world.debugContactSet);\n  for (let i = 0; i < world.workerCount; ++i) {\n    b2DestroyBitSet(world.taskContextArray[i].contactStateBitSet);\n    b2DestroyBitSet(world.taskContextArray[i].enlargedSimBitSet);\n    b2DestroyBitSet(world.taskContextArray[i].awakeIslandBitSet);\n  }\n  world.taskContextArray = null;\n  world.bodyMoveEventArray = null;\n  world.sensorBeginEventArray = null;\n  world.sensorEndEventArray = null;\n  world.contactBeginArray = null;\n  world.contactEndArray = null;\n  world.contactHitArray = null;\n  const chainCapacity = world.chainArray.length;\n  for (let i = 0; i < chainCapacity; ++i) {\n    const chain = world.chainArray[i];\n    if (chain.id !== B2_NULL_INDEX) {\n      chain.shapeIndices = null;\n    } else {\n    }\n  }\n  world.bodyArray = null;\n  world.shapeArray = null;\n  world.chainArray = null;\n  world.contactArray = null;\n  world.jointArray = null;\n  world.islandArray = null;\n  const setCapacity = world.solverSetArray.length;\n  for (let i = 0; i < setCapacity; ++i) {\n    const set = world.solverSetArray[i];\n    if (set.setIndex !== B2_NULL_INDEX) {\n      b2DestroySolverSet(world, i);\n    }\n  }\n  world.solverSetArray = null;\n  b2DestroyGraph(world.constraintGraph);\n  b2DestroyBroadPhase(world.broadPhase);\n  b2DestroyIdPool(world.bodyIdPool);\n  b2DestroyIdPool(world.shapeIdPool);\n  b2DestroyIdPool(world.chainIdPool);\n  b2DestroyIdPool(world.contactIdPool);\n  b2DestroyIdPool(world.jointIdPool);\n  b2DestroyIdPool(world.islandIdPool);\n  b2DestroyIdPool(world.solverSetIdPool);\n  b2DestroyStackAllocator(world.stackAllocator);\n  const revision = world.revision;\n  world = new b2World();\n  world.worldId = B2_NULL_INDEX;\n  world.revision = revision + 1;\n}\nvar centerOffsetA = new b2Vec2();\nvar centerOffsetB = new b2Vec2();\nfunction b2CollideTask(startIndex, endIndex, threadIndex, context) {\n  const stepContext = context;\n  const world = stepContext.world;\n  const taskContext = world.taskContextArray[threadIndex];\n  const contactSims = stepContext.contacts;\n  const shapes = world.shapeArray;\n  const bodies = world.bodyArray;\n  for (let i = startIndex; i < endIndex; ++i) {\n    const contactSim = contactSims[i];\n    const contactId = contactSim.contactId;\n    const shapeA = shapes[contactSim.shapeIdA];\n    const shapeB = shapes[contactSim.shapeIdB];\n    const overlap = b2AABB_Overlaps(shapeA.fatAABB, shapeB.fatAABB);\n    if (!overlap) {\n      contactSim.simFlags |= b2ContactSimFlags.b2_simDisjoint;\n      contactSim.simFlags &= ~b2ContactSimFlags.b2_simTouchingFlag;\n      b2SetBit(taskContext.contactStateBitSet, contactId);\n    } else {\n      const wasTouching = (contactSim.simFlags & b2ContactSimFlags.b2_simTouchingFlag) !== 0;\n      const bodyA = bodies[shapeA.bodyId];\n      const bodyB = bodies[shapeB.bodyId];\n      const bodySimA = b2GetBodySim(world, bodyA);\n      const bodySimB = b2GetBodySim(world, bodyB);\n      contactSim.bodySimIndexA = bodyA.setIndex === b2SetType.b2_awakeSet ? bodyA.localIndex : B2_NULL_INDEX;\n      contactSim.invMassA = bodySimA.invMass;\n      contactSim.invIA = bodySimA.invInertia;\n      contactSim.bodySimIndexB = bodyB.setIndex === b2SetType.b2_awakeSet ? bodyB.localIndex : B2_NULL_INDEX;\n      contactSim.invMassB = bodySimB.invMass;\n      contactSim.invIB = bodySimB.invInertia;\n      const transformA = bodySimA.transform;\n      const transformB = bodySimB.transform;\n      centerOffsetA.x = transformA.q.c * bodySimA.localCenter.x - transformA.q.s * bodySimA.localCenter.y;\n      centerOffsetA.y = transformA.q.s * bodySimA.localCenter.x + transformA.q.c * bodySimA.localCenter.y;\n      centerOffsetB.x = transformB.q.c * bodySimB.localCenter.x - transformB.q.s * bodySimB.localCenter.y;\n      centerOffsetB.y = transformB.q.s * bodySimB.localCenter.x + transformB.q.c * bodySimB.localCenter.y;\n      const touching = b2UpdateContact(world, contactSim, shapeA, transformA, centerOffsetA, shapeB, transformB, centerOffsetB);\n      if (touching && !wasTouching) {\n        contactSim.simFlags |= b2ContactSimFlags.b2_simStartedTouching;\n        b2SetBit(taskContext.contactStateBitSet, contactId);\n      } else if (!touching && wasTouching) {\n        contactSim.simFlags |= b2ContactSimFlags.b2_simStoppedTouching;\n        b2SetBit(taskContext.contactStateBitSet, contactId);\n      }\n    }\n  }\n}\nfunction b2AddNonTouchingContact(world, contact, contactSim) {\n  const set = world.solverSetArray[b2SetType.b2_awakeSet];\n  contact.colorIndex = B2_NULL_INDEX;\n  contact.localIndex = set.contacts.count;\n  const newContactSim = b2AddContact(set.contacts);\n  newContactSim.set(contactSim);\n}\nfunction b2RemoveNonTouchingContact(world, setIndex, localIndex) {\n  const set = world.solverSetArray[setIndex];\n  const movedIndex = b2RemoveContact(set.contacts, localIndex);\n  if (movedIndex !== B2_NULL_INDEX) {\n    const movedContactSim = set.contacts.data[localIndex];\n    const movedContact = world.contactArray[movedContactSim.contactId];\n    movedContact.localIndex = localIndex;\n  }\n}\nfunction b2Collide(context) {\n  const world = context.world;\n  b2BroadPhase_RebuildTrees(world.broadPhase);\n  let contactCount = 0;\n  const graphColors = world.constraintGraph.colors;\n  for (let i = 0; i < b2_graphColorCount; ++i) {\n    contactCount += graphColors[i].contacts.count;\n  }\n  const nonTouchingCount = world.solverSetArray[b2SetType.b2_awakeSet].contacts.count;\n  contactCount += nonTouchingCount;\n  if (contactCount == 0) {\n    return;\n  }\n  const contactSims = [];\n  let contactIndex = 0;\n  for (let i = 0; i < b2_graphColorCount; ++i) {\n    const color = graphColors[i];\n    const count = color.contacts.count;\n    const base = color.contacts.data;\n    for (let j = 0; j < count; ++j) {\n      contactSims.push(base[j]);\n      contactIndex += 1;\n    }\n  }\n  {\n    const base = world.solverSetArray[b2SetType.b2_awakeSet].contacts.data;\n    for (let i = 0; i < nonTouchingCount; ++i) {\n      contactSims.push(base[i]);\n      contactIndex += 1;\n    }\n  }\n  context.contacts = contactSims;\n  const contactIdCapacity = b2GetIdCapacity(world.contactIdPool);\n  for (let i = 0; i < world.workerCount; ++i) {\n    world.taskContextArray[i].contactStateBitSet = b2SetBitCountAndClear(world.taskContextArray[i].contactStateBitSet, contactIdCapacity);\n  }\n  b2CollideTask(0, contactCount, 0, context);\n  context.contacts = null;\n  const bitSet = world.taskContextArray[0].contactStateBitSet;\n  for (let i = 1; i < world.workerCount; ++i) {\n    b2InPlaceUnion(bitSet, world.taskContextArray[i].contactStateBitSet);\n  }\n  const contacts = world.contactArray;\n  const awakeSet = world.solverSetArray[b2SetType.b2_awakeSet];\n  const shapes = world.shapeArray;\n  const worldId = world.worldId;\n  for (let k = 0; k < bitSet.blockCount; ++k) {\n    let bits = bitSet.bits[k];\n    while (bits != 0n) {\n      const ctz = b2CTZ64(bits);\n      const contactId = 64 * k + ctz;\n      const contact = contacts[contactId];\n      const colorIndex = contact.colorIndex;\n      const localIndex = contact.localIndex;\n      let contactSim;\n      if (colorIndex != B2_NULL_INDEX) {\n        const color = graphColors[colorIndex];\n        contactSim = color.contacts.data[localIndex];\n      } else {\n        contactSim = awakeSet.contacts.data[localIndex];\n      }\n      const shapeA = shapes[contact.shapeIdA];\n      const shapeB = shapes[contact.shapeIdB];\n      const shapeIdA = new b2ShapeId(shapeA.id + 1, worldId, shapeA.revision);\n      const shapeIdB = new b2ShapeId(shapeB.id + 1, worldId, shapeB.revision);\n      const flags = contact.flags;\n      const simFlags = contactSim.simFlags;\n      if (simFlags & b2ContactSimFlags.b2_simDisjoint) {\n        if ((flags & b2ContactFlags.b2_contactTouchingFlag) != 0 && (flags & b2ContactFlags.b2_contactEnableContactEvents) != 0) {\n          const event = new b2ContactEndTouchEvent();\n          event.shapeIdA = shapeIdA;\n          event.shapeIdB = shapeIdB;\n          world.contactEndArray.push(event);\n        }\n        contact.flags &= ~b2ContactFlags.b2_contactTouchingFlag;\n        b2DestroyContact(world, contact, false);\n      } else if (simFlags & b2ContactSimFlags.b2_simStartedTouching) {\n        if ((flags & b2ContactFlags.b2_contactSensorFlag) != 0) {\n          if ((flags & b2ContactFlags.b2_contactEnableSensorEvents) != 0) {\n            if (shapeA.isSensor) {\n              const event = new b2SensorBeginTouchEvent();\n              event.sensorShapeId = shapeIdA;\n              event.visitorShapeId = shapeIdB;\n              world.sensorBeginEventArray.push(event);\n            }\n            if (shapeB.isSensor) {\n              const event = new b2SensorBeginTouchEvent();\n              event.sensorShapeId = shapeIdB;\n              event.visitorShapeId = shapeIdA;\n              world.sensorBeginEventArray.push(event);\n            }\n          }\n          contactSim.simFlags &= ~b2ContactSimFlags.b2_simStartedTouching;\n          contact.flags |= b2ContactFlags.b2_contactSensorTouchingFlag;\n        } else {\n          if (flags & b2ContactFlags.b2_contactEnableContactEvents) {\n            const event = new b2ContactBeginTouchEvent();\n            event.shapeIdA = shapeIdA;\n            event.shapeIdB = shapeIdB;\n            event.manifold = contactSim.manifold;\n            world.contactBeginArray.push(event);\n          }\n          contact.flags |= b2ContactFlags.b2_contactTouchingFlag;\n          b2LinkContact(world, contact);\n          contactSim = awakeSet.contacts.data[localIndex];\n          contactSim.simFlags &= ~b2ContactSimFlags.b2_simStartedTouching;\n          b2AddContactToGraph(world, contactSim, contact);\n          b2RemoveNonTouchingContact(world, b2SetType.b2_awakeSet, localIndex);\n        }\n      } else if (simFlags & b2ContactSimFlags.b2_simStoppedTouching) {\n        contactSim.simFlags &= ~b2ContactSimFlags.b2_simStoppedTouching;\n        if ((flags & b2ContactFlags.b2_contactSensorFlag) != 0) {\n          contact.flags &= ~b2ContactFlags.b2_contactSensorTouchingFlag;\n          if ((flags & b2ContactFlags.b2_contactEnableSensorEvents) != 0) {\n            if (shapeA.isSensor) {\n              const event = new b2SensorEndTouchEvent();\n              event.sensorShapeId = shapeIdA;\n              event.visitorShapeId = shapeIdB;\n              world.sensorEndEventArray.push(event);\n            }\n            if (shapeB.isSensor) {\n              const event = new b2SensorEndTouchEvent();\n              event.sensorShapeId = shapeIdB;\n              event.visitorShapeId = shapeIdA;\n              world.sensorEndEventArray.push(event);\n            }\n          }\n        } else {\n          contact.flags &= ~b2ContactFlags.b2_contactTouchingFlag;\n          if (contact.flags & b2ContactFlags.b2_contactEnableContactEvents) {\n            const event = new b2ContactEndTouchEvent();\n            event.shapeIdA = shapeIdA;\n            event.shapeIdB = shapeIdB;\n            world.contactEndArray.push(event);\n          }\n          b2UnlinkContact(world, contact);\n          const bodyIdA = contact.edges[0].bodyId;\n          const bodyIdB = contact.edges[1].bodyId;\n          b2AddNonTouchingContact(world, contact, contactSim);\n          b2RemoveContactFromGraph(world, bodyIdA, bodyIdB, colorIndex, localIndex);\n        }\n      }\n      bits = bits & bits - 1n;\n    }\n  }\n  b2ValidateSolverSets(world);\n  b2ValidateContacts(world);\n}\nGlobalDebug.b2Vec2Count = 0;\nb2Vec2Where.calls = {};\nGlobalDebug.b2Rot2Count = 0;\nb2Rot2Where.calls = {};\nGlobalDebug.b2ManifoldCount = 0;\nGlobalDebug.b2ManifoldPointCount = 0;\nb2ManifoldPointWhere.calls = {};\nGlobalDebug.b2PolyCollideCount = 0;\nGlobalDebug.b2ContactSimCount = 0;\nGlobalDebug.b2TOIInputCount = 0;\nGlobalDebug.b2ShapeCastPairInputCount = 0;\nGlobalDebug.b2SweepCount = 0;\nfunction b2World_Step(worldId, timeStep, subStepCount) {\n  GlobalDebug.b2FrameCount++;\n  const world = b2GetWorldFromId(worldId);\n  if (world.locked) {\n    return;\n  }\n  world.bodyMoveEventArray = [];\n  world.sensorBeginEventArray = [];\n  world.sensorEndEventArray = [];\n  world.contactBeginArray = [];\n  world.contactEndArray = [];\n  world.contactHitArray = [];\n  if (timeStep === 0) {\n    return;\n  }\n  world.locked = true;\n  b2UpdateBroadPhasePairs(world);\n  const context = new b2StepContext();\n  context.world = world;\n  context.dt = timeStep;\n  context.subStepCount = Math.max(1, subStepCount);\n  if (timeStep > 0) {\n    context.inv_dt = 1 / timeStep;\n    context.h = timeStep / context.subStepCount;\n    context.inv_h = context.subStepCount * context.inv_dt;\n  } else {\n    context.inv_dt = 0;\n    context.h = 0;\n    context.inv_h = 0;\n  }\n  world.inv_h = context.inv_h;\n  const contactHertz = Math.min(world.contactHertz, 0.25 * context.inv_h);\n  const jointHertz = Math.min(world.jointHertz, 0.125 * context.inv_h);\n  context.contactSoftness = b2MakeSoft(contactHertz, world.contactDampingRatio, context.h);\n  context.staticSoftness = b2MakeSoft(2 * contactHertz, world.contactDampingRatio, context.h);\n  context.jointSoftness = b2MakeSoft(jointHertz, world.jointDampingRatio, context.h);\n  context.restitutionThreshold = world.restitutionThreshold;\n  context.maxLinearVelocity = world.maxLinearVelocity;\n  context.enableWarmStarting = world.enableWarmStarting;\n  b2Collide(context);\n  if (context.dt > 0) {\n    b2Solve(world, context);\n  }\n  world.locked = false;\n}\nvar p13 = new b2Vec2();\nvar p22 = new b2Vec2();\nvar q = new b2Rot();\nvar txf = new b2Transform(p13, q);\nfunction b2DrawShape(draw, shape, transform, color) {\n  const xf2 = transform.clone();\n  switch (shape.type) {\n    case b2ShapeType.b2_capsuleShape:\n      {\n        const capsule = shape.capsule;\n        b2TransformPointOut(xf2, capsule.center1, p13);\n        b2TransformPointOut(xf2, capsule.center2, p22);\n        if (shape.image) {\n          draw.DrawImageCapsule(p13, p22, capsule.radius, shape, draw.context);\n        } else if (!shape.imageNoDebug) {\n          draw.DrawSolidCapsule(p13, p22, capsule.radius, color, draw.context);\n        }\n      }\n      break;\n    case b2ShapeType.b2_circleShape:\n      {\n        const circle = shape.circle;\n        b2TransformPointOutXf(xf2, circle.center, txf);\n        if (shape.image) {\n          draw.DrawImageCircle(txf, circle.radius, shape, draw.context);\n        } else if (!shape.imageNoDebug) {\n          draw.DrawSolidCircle(txf, circle.radius, color, draw.context);\n        }\n      }\n      break;\n    case b2ShapeType.b2_polygonShape:\n      {\n        const poly = shape.polygon;\n        if (shape.image) {\n          draw.DrawImagePolygon(xf2, shape, draw.context);\n        } else if (!shape.imageNoDebug) {\n          draw.DrawSolidPolygon(xf2, poly.vertices, poly.count, poly.radius, color, draw.context);\n        }\n      }\n      break;\n    case b2ShapeType.b2_segmentShape:\n      {\n        const segment = shape.segment;\n        b2TransformPointOut(xf2, segment.point1, p13);\n        b2TransformPointOut(xf2, segment.point2, p22);\n        if (!shape.imageNoDebug) {\n          draw.DrawSegment(p13, p22, color, draw.context);\n        }\n      }\n      break;\n    case b2ShapeType.b2_chainSegmentShape:\n      {\n        const segment = shape.chainSegment.segment;\n        b2TransformPointOut(xf2, segment.point1, p13);\n        b2TransformPointOut(xf2, segment.point2, p22);\n        if (!shape.imageNoDebug) {\n          draw.DrawSegment(p13, p22, color, draw.context);\n        }\n      }\n      break;\n    default:\n      break;\n  }\n}\nvar DrawContext = class {\n  constructor(world, draw) {\n    this.world = world;\n    this.draw = draw;\n  }\n};\nfunction DrawQueryCallback(proxyId, shapeId, context) {\n  const drawContext = context;\n  const world = drawContext.world;\n  const draw = drawContext.draw;\n  const shape = world.shapeArray[shapeId];\n  b2SetBit(world.debugBodySet, shape.bodyId);\n  if (draw.drawShapes) {\n    const body = world.bodyArray[shape.bodyId];\n    const bodySim = b2GetBodySim(world, body);\n    let color;\n    if (body.setIndex >= b2SetType.b2_firstSleepingSet) {\n      color = b2HexColor.b2_colorGray;\n    } else if (shape.customColor !== 0) {\n      color = shape.customColor;\n    } else if (body.type === b2BodyType.b2_dynamicBody && bodySim.mass === 0) {\n      color = b2HexColor.b2_colorRed;\n    } else if (body.setIndex === b2SetType.b2_disabledSet) {\n      color = b2HexColor.b2_colorSlateGray;\n    } else if (shape.isSensor) {\n      color = b2HexColor.b2_colorWheat;\n    } else if (bodySim.isBullet && body.setIndex === b2SetType.b2_awakeSet) {\n      color = b2HexColor.b2_colorTurquoise;\n    } else if (body.isSpeedCapped) {\n      color = b2HexColor.b2_colorYellow;\n    } else if (bodySim.isFast) {\n      color = b2HexColor.b2_colorSalmon;\n    } else if (body.type === b2BodyType.b2_staticBody) {\n      color = b2HexColor.b2_colorPaleGreen;\n    } else if (body.type === b2BodyType.b2_kinematicBody) {\n      color = b2HexColor.b2_colorRoyalBlue;\n    } else if (body.setIndex === b2SetType.b2_awakeSet) {\n      color = b2HexColor.b2_colorPink;\n    } else {\n      color = b2HexColor.b2_colorGray;\n    }\n    b2DrawShape(draw, shape, bodySim.transform, color);\n  }\n  if (draw.drawAABBs) {\n    const aabb = shape.fatAABB;\n    const vs = [\n      new b2Vec2(aabb.lowerBoundX, aabb.lowerBoundY),\n      new b2Vec2(aabb.upperBoundX, aabb.lowerBoundY),\n      new b2Vec2(aabb.upperBoundX, aabb.upperBoundY),\n      new b2Vec2(aabb.lowerBoundX, aabb.upperBoundY)\n    ];\n    draw.DrawPolygon(vs, 4, b2HexColor.b2_colorGold, draw.context);\n  }\n  return true;\n}\nfunction b2DrawWithBounds(world, draw) {\n  const k_impulseScale = 1;\n  const k_axisScale = 0.3;\n  const speculativeColor = b2HexColor.b2_colorGray3;\n  const addColor = b2HexColor.b2_colorGreen;\n  const persistColor = b2HexColor.b2_colorBlue;\n  const normalColor = b2HexColor.b2_colorGray9;\n  const impulseColor = b2HexColor.b2_colorMagenta;\n  const frictionColor = b2HexColor.b2_colorYellow;\n  const graphColors = [\n    b2HexColor.b2_colorRed,\n    b2HexColor.b2_colorOrange,\n    b2HexColor.b2_colorYellow,\n    b2HexColor.b2_colorGreen,\n    b2HexColor.b2_colorCyan,\n    b2HexColor.b2_colorBlue,\n    b2HexColor.b2_colorViolet,\n    b2HexColor.b2_colorPink,\n    b2HexColor.b2_colorChocolate,\n    b2HexColor.b2_colorGoldenrod,\n    b2HexColor.b2_colorCoral,\n    b2HexColor.b2_colorBlack\n  ];\n  const bodyCapacity = b2GetIdCapacity(world.bodyIdPool);\n  world.debugBodySet = b2SetBitCountAndClear(world.debugBodySet, bodyCapacity);\n  const jointCapacity = b2GetIdCapacity(world.jointIdPool);\n  world.debugJointSet = b2SetBitCountAndClear(world.debugJointSet, jointCapacity);\n  const contactCapacity = b2GetIdCapacity(world.contactIdPool);\n  world.debugContactSet = b2SetBitCountAndClear(world.debugContactSet, contactCapacity);\n  const drawContext = new DrawContext(world, draw);\n  for (let i = 0; i < b2BodyType.b2_bodyTypeCount; ++i) {\n    b2DynamicTree_Query(\n      world.broadPhase.trees[i],\n      draw.drawingBounds,\n      B2_DEFAULT_MASK_BITS,\n      DrawQueryCallback,\n      drawContext\n    );\n  }\n  const wordCount = world.debugBodySet.blockCount;\n  const bits = world.debugBodySet.bits;\n  for (let k = 0; k < wordCount; ++k) {\n    let word = bits[k];\n    while (word !== 0) {\n      const ctz = b2CTZ64(word);\n      const bodyId = 64 * k + ctz;\n      const body = world.bodyArray[bodyId];\n      if (draw.drawMass && body.type === b2BodyType.b2_dynamicBody) {\n        const offset = new b2Vec2(0.1, 0.1);\n        const bodySim = b2GetBodySim(world, body);\n        const transform = new b2Transform(bodySim.center, bodySim.transform.q);\n        draw.DrawTransform(transform, draw.context);\n        const p4 = b2TransformPoint(transform, offset);\n        const buffer = `  ${bodySim.mass.toFixed(2)}`;\n        draw.DrawString(p4, buffer, draw.context);\n      }\n      if (draw.drawJoints) {\n        let jointKey = body.headJointKey;\n        while (jointKey !== B2_NULL_INDEX) {\n          const jointId = jointKey >> 1;\n          const edgeIndex = jointKey & 1;\n          const joint = world.jointArray[jointId];\n          if (b2GetBit2(world.debugJointSet, jointId) === false) {\n            b2DrawJoint(draw, world, joint);\n            b2SetBit(world.debugJointSet, jointId);\n          }\n          jointKey = joint.edges[edgeIndex].nextKey;\n        }\n      }\n      const linearSlop = b2_linearSlop;\n      if (draw.drawContacts && body.type === b2BodyType.b2_dynamicBody && body.setIndex === b2SetType.b2_awakeSet) {\n        let contactKey = body.headContactKey;\n        while (contactKey !== B2_NULL_INDEX) {\n          const contactId = contactKey >> 1;\n          const edgeIndex = contactKey & 1;\n          const contact = world.contactArray[contactId];\n          contactKey = contact.edges[edgeIndex].nextKey;\n          if (contact.setIndex !== b2SetType.b2_awakeSet || contact.colorIndex === B2_NULL_INDEX) {\n            continue;\n          }\n          if (b2GetBit2(world.debugContactSet, contactId) === false) {\n            const gc = world.constraintGraph.colors[contact.colorIndex];\n            const contactSim = gc.contacts.data[contact.localIndex];\n            const pointCount = contactSim.manifold.pointCount;\n            const normal = new b2Vec2(contactSim.manifold.normalX, contactSim.manifold.normalY);\n            for (let j = 0; j < pointCount; ++j) {\n              const point = contactSim.manifold.points[j];\n              if (draw.drawGraphColors) {\n                const pointSize = contact.colorIndex === b2_overflowIndex ? 7.5 : 5;\n                draw.DrawPoint(point.pointX, point.pointY, pointSize, graphColors[contact.colorIndex], draw.context);\n              } else if (point.separation > linearSlop) {\n                draw.DrawPoint(point.pointX, point.pointY, 5, speculativeColor, draw.context);\n              } else if (point.persisted === false) {\n                draw.DrawPoint(point.pointX, point.pointY, 10, addColor, draw.context);\n              } else if (point.persisted === true) {\n                draw.DrawPoint(point.pointX, point.pointY, 5, persistColor, draw.context);\n              }\n              if (draw.drawContactNormals) {\n                const p14 = new b2Vec2(point.pointX, point.pointY);\n                const p23 = b2MulAdd(p14, k_axisScale, normal);\n                draw.DrawSegment(p14, p23, normalColor, draw.context);\n              } else if (draw.drawContactImpulses) {\n                const p14 = new b2Vec2(point.pointX, point.pointY);\n                const p23 = b2MulAdd(p14, k_impulseScale * point.normalImpulse, normal);\n                draw.DrawSegment(p14, p23, impulseColor, draw.context);\n                const buffer = `${(1e3 * point.normalImpulse).toFixed(1)}`;\n                draw.DrawString(p14, buffer, draw.context);\n              }\n              if (draw.drawFrictionImpulses) {\n                const tangent = b2RightPerp(normal);\n                const p14 = new b2Vec2(point.pointX, point.pointY);\n                const p23 = b2MulAdd(p14, k_impulseScale * point.tangentImpulse, tangent);\n                draw.DrawSegment(p14, p23, frictionColor, draw.context);\n                const buffer = `${(1e3 * point.tangentImpulse).toFixed(1)}`;\n                draw.DrawString(p14, buffer, draw.context);\n              }\n            }\n            b2SetBit(world.debugContactSet, contactId);\n          }\n          contactKey = contact.edges[edgeIndex].nextKey;\n        }\n      }\n      word = word & word - 1;\n    }\n  }\n}\nfunction b2World_Draw(worldId, draw) {\n  const world = b2GetWorldFromId(worldId);\n  if (world.locked) {\n    return;\n  }\n  if (draw.useDrawingBounds) {\n    b2DrawWithBounds(world, draw);\n    return;\n  }\n  if (draw.drawShapes) {\n    const setCount = world.solverSetArray.length;\n    for (let setIndex = 0; setIndex < setCount; ++setIndex) {\n      const set = world.solverSetArray[setIndex];\n      const bodyCount = set.sims.count;\n      for (let bodyIndex = 0; bodyIndex < bodyCount; ++bodyIndex) {\n        const bodySim = set.sims.data[bodyIndex];\n        const body = world.bodyArray[bodySim.bodyId];\n        const xf2 = bodySim.transform;\n        let shapeId = body.headShapeId;\n        while (shapeId !== B2_NULL_INDEX) {\n          const shape = world.shapeArray[shapeId];\n          let color;\n          if (body.setIndex >= b2SetType.b2_firstSleepingSet) {\n            color = b2HexColor.b2_colorGray;\n          } else if (shape.customColor !== 0) {\n            color = shape.customColor;\n          } else if (body.type === b2BodyType.b2_dynamicBody && bodySim.mass === 0) {\n            color = b2HexColor.b2_colorRed;\n          } else if (body.setIndex === b2SetType.b2_disabledSet) {\n            color = b2HexColor.b2_colorSlateGray;\n          } else if (shape.isSensor) {\n            color = b2HexColor.b2_colorWheat;\n          } else if (bodySim.isBullet && body.setIndex === b2SetType.b2_awakeSet) {\n            color = b2HexColor.b2_colorTurquoise;\n          } else if (body.isSpeedCapped) {\n            color = b2HexColor.b2_colorYellow;\n          } else if (bodySim.isFast) {\n            color = b2HexColor.b2_colorSalmon;\n          } else if (body.type === b2BodyType.b2_staticBody) {\n            color = b2HexColor.b2_colorPaleGreen;\n          } else if (body.type === b2BodyType.b2_kinematicBody) {\n            color = b2HexColor.b2_colorRoyalBlue;\n          } else if (body.setIndex === b2SetType.b2_awakeSet) {\n            color = b2HexColor.b2_colorPink;\n          } else {\n            color = b2HexColor.b2_colorGray;\n          }\n          b2DrawShape(draw, shape, xf2, color);\n          shapeId = shape.nextShapeId;\n        }\n      }\n    }\n  }\n  if (draw.drawJoints) {\n    const count = world.jointArray.length;\n    for (let i = 0; i < count; ++i) {\n      const joint = world.jointArray[i];\n      if (joint.setIndex === B2_NULL_INDEX) {\n        continue;\n      }\n      b2DrawJoint(draw, world, joint);\n    }\n  }\n  if (draw.drawAABBs) {\n    const color = b2HexColor.b2_colorGray;\n    const setIndex = b2SetType.b2_awakeSet;\n    {\n      const set = world.solverSetArray[setIndex];\n      const bodyCount = set.sims.count;\n      for (let bodyIndex = 0; bodyIndex < bodyCount; ++bodyIndex) {\n        const bodySim = set.sims.data[bodyIndex];\n        const xf2 = b2Transform.identity();\n        const body = world.bodyArray[bodySim.bodyId];\n        let shapeId = body.headShapeId;\n        while (shapeId !== B2_NULL_INDEX) {\n          const shape = world.shapeArray[shapeId];\n          const aabb = shape.fatAABB;\n          const vs = [\n            new b2Vec2(aabb.lowerBoundX, aabb.lowerBoundY),\n            new b2Vec2(aabb.upperBoundX, aabb.lowerBoundY),\n            new b2Vec2(aabb.upperBoundX, aabb.upperBoundY),\n            new b2Vec2(aabb.lowerBoundX, aabb.upperBoundY)\n          ];\n          draw.DrawPolygon(xf2, vs, 4, color, draw.context);\n          shapeId = shape.nextShapeId;\n        }\n      }\n    }\n  }\n  if (draw.drawMass) {\n    const offset = new b2Vec2(0.1, 0.1);\n    const setCount = world.solverSetArray.length;\n    for (let setIndex = 0; setIndex < setCount; ++setIndex) {\n      const set = world.solverSetArray[setIndex];\n      const bodyCount = set.sims.count;\n      for (let bodyIndex = 0; bodyIndex < bodyCount; ++bodyIndex) {\n        const bodySim = set.sims.data[bodyIndex];\n        const transform = new b2Transform(bodySim.center, bodySim.transform.q);\n        draw.DrawTransform(transform, draw.context);\n        const p4 = b2TransformPoint(transform, offset);\n        const buffer = `  ${bodySim.mass.toFixed(2)}`;\n        draw.DrawString(p4, buffer, draw.context);\n      }\n    }\n  }\n  if (draw.drawContacts) {\n    const k_impulseScale = 1;\n    const k_axisScale = 0.3;\n    const linearSlop = b2_linearSlop;\n    const speculativeColor = b2HexColor.b2_colorGray3;\n    const addColor = b2HexColor.b2_colorGreen;\n    const persistColor = b2HexColor.b2_colorBlue;\n    const normalColor = b2HexColor.b2_colorGray9;\n    const impulseColor = b2HexColor.b2_colorMagenta;\n    const frictionColor = b2HexColor.b2_colorYellow;\n    const colors = [\n      b2HexColor.b2_colorRed,\n      b2HexColor.b2_colorOrange,\n      b2HexColor.b2_colorYellow,\n      b2HexColor.b2_colorGreen,\n      b2HexColor.b2_colorCyan,\n      b2HexColor.b2_colorBlue,\n      b2HexColor.b2_colorViolet,\n      b2HexColor.b2_colorPink,\n      b2HexColor.b2_colorChocolate,\n      b2HexColor.b2_colorGoldenrod,\n      b2HexColor.b2_colorCoral,\n      b2HexColor.b2_colorBlack\n    ];\n    for (let colorIndex = 0; colorIndex < b2_graphColorCount; ++colorIndex) {\n      const graphColor = world.constraintGraph.colors[colorIndex];\n      const contactCount = graphColor.contacts.count;\n      for (let contactIndex = 0; contactIndex < contactCount; ++contactIndex) {\n        const contact = graphColor.contacts.data[contactIndex];\n        const pointCount = contact.manifold.pointCount;\n        const normal = new b2Vec2(contact.manifold.normalX, contact.manifold.normalY);\n        for (let j = 0; j < pointCount; ++j) {\n          const point = contact.manifold.points[j];\n          if (draw.drawGraphColors && 0 <= colorIndex && colorIndex <= b2_graphColorCount) {\n            const pointSize = colorIndex === b2_overflowIndex ? 7.5 : 5;\n            draw.DrawPoint(point.pointX, point.pointY, pointSize, colors[colorIndex], draw.context);\n          } else if (point.separation > linearSlop) {\n            draw.DrawPoint(point.pointX, point.pointY, 5, speculativeColor, draw.context);\n          } else if (point.persisted === false) {\n            draw.DrawPoint(point.pointX, point.pointY, 10, addColor, draw.context);\n          } else if (point.persisted === true) {\n            draw.DrawPoint(point.pointX, point.pointY, 5, persistColor, draw.context);\n          }\n          if (draw.drawContactNormals) {\n            const p14 = new b2Vec2(point.pointX, point.pointY);\n            const p23 = b2MulAdd(p14, k_axisScale, normal);\n            draw.DrawSegment(p14, p23, normalColor, draw.context);\n          } else if (draw.drawContactImpulses) {\n            const p14 = new b2Vec2(point.pointX, point.pointY);\n            const p23 = b2MulAdd(p14, k_impulseScale * point.normalImpulse, normal);\n            draw.DrawSegment(p14, p23, impulseColor, draw.context);\n            const buffer = `${(1e3 * point.normalImpulse).toFixed(2)}`;\n            draw.DrawString(p14, buffer, draw.context);\n          }\n          if (draw.drawFrictionImpulses) {\n            const tangent = b2RightPerp(normal);\n            const p14 = new b2Vec2(point.pointX, point.pointY);\n            const p23 = b2MulAdd(p14, k_impulseScale * point.tangentImpulse, tangent);\n            draw.DrawSegment(p14, p23, frictionColor, draw.context);\n            const buffer = `${point.normalImpulse.toFixed(2)}`;\n            draw.DrawString(p14, buffer, draw.context);\n          }\n        }\n      }\n    }\n  }\n}\nfunction b2World_GetBodyEvents(worldId) {\n  const world = b2GetWorldFromId(worldId);\n  if (world.locked) {\n    return new b2BodyEvents();\n  }\n  const count = world.bodyMoveEventArray.length;\n  const events = new b2BodyEvents();\n  events.moveEvents = world.bodyMoveEventArray;\n  events.moveCount = count;\n  return events;\n}\nfunction b2World_GetSensorEvents(worldId) {\n  const world = b2GetWorldFromId(worldId);\n  if (world.locked) {\n    return new b2SensorEvents();\n  }\n  const beginCount = world.sensorBeginEventArray.length;\n  const endCount = world.sensorEndEventArray.length;\n  const events = new b2SensorEvents();\n  events.beginEvents = world.sensorBeginEventArray;\n  events.endEvents = world.sensorEndEventArray;\n  events.beginCount = beginCount;\n  events.endCount = endCount;\n  return events;\n}\nfunction b2World_GetContactEvents(worldId) {\n  const world = b2GetWorldFromId(worldId);\n  if (world.locked) {\n    return new b2ContactEvents();\n  }\n  const beginCount = world.contactBeginArray.length;\n  const endCount = world.contactEndArray.length;\n  const hitCount = world.contactHitArray.length;\n  const events = new b2ContactEvents();\n  events.beginEvents = world.contactBeginArray;\n  events.endEvents = world.contactEndArray;\n  events.hitEvents = world.contactHitArray;\n  events.beginCount = beginCount;\n  events.endCount = endCount;\n  events.hitCount = hitCount;\n  return events;\n}\nfunction b2World_IsValid(id) {\n  if (id === void 0) {\n    return false;\n  }\n  if (id.index1 < 1 || B2_MAX_WORLDS < id.index1) {\n    return false;\n  }\n  const world = b2_worlds[id.index1 - 1];\n  if (world.worldId !== id.index1 - 1) {\n    return false;\n  }\n  return id.revision === world.revision;\n}\nfunction b2Body_IsValid(id) {\n  if (id === void 0) {\n    return false;\n  }\n  if (!(id instanceof b2BodyId)) {\n    return false;\n  }\n  if (id.world0 < 0 || B2_MAX_WORLDS <= id.world0) {\n    return false;\n  }\n  const world = b2_worlds[id.world0];\n  if (world.worldId !== id.world0) {\n    return false;\n  }\n  if (id.index1 < 1 || world.bodyArray.length < id.index1) {\n    return false;\n  }\n  const body = world.bodyArray[id.index1 - 1];\n  if (body.setIndex === B2_NULL_INDEX) {\n    return false;\n  }\n  if (body.revision !== id.revision) {\n    return false;\n  }\n  return true;\n}\nfunction b2Shape_IsValid(id) {\n  if (id === void 0) {\n    return false;\n  }\n  if (B2_MAX_WORLDS <= id.world0) {\n    return false;\n  }\n  const world = b2_worlds[id.world0];\n  if (world.worldId !== id.world0) {\n    return false;\n  }\n  const shapeId = id.index1 - 1;\n  if (shapeId < 0 || world.shapeArray.length <= shapeId) {\n    return false;\n  }\n  const shape = world.shapeArray[shapeId];\n  if (shape.id === B2_NULL_INDEX) {\n    return false;\n  }\n  return id.revision === shape.revision;\n}\nfunction b2Chain_IsValid(id) {\n  if (id === void 0) {\n    return false;\n  }\n  if (id.world0 < 0 || B2_MAX_WORLDS <= id.world0) {\n    return false;\n  }\n  const world = b2_worlds[id.world0];\n  if (world.worldId !== id.world0) {\n    return false;\n  }\n  const chainId = id.index1 - 1;\n  if (chainId < 0 || world.chainArray.length <= chainId) {\n    return false;\n  }\n  const chain = world.chainArray[chainId];\n  if (chain.id === B2_NULL_INDEX) {\n    return false;\n  }\n  return id.revision === chain.revision;\n}\nfunction b2Joint_IsValid(id) {\n  if (id === void 0) {\n    return false;\n  }\n  if (id.world0 < 0 || B2_MAX_WORLDS <= id.world0) {\n    return false;\n  }\n  const world = b2_worlds[id.world0];\n  if (world.worldId !== id.world0) {\n    return false;\n  }\n  const jointId = id.index1 - 1;\n  if (jointId < 0 || world.jointArray.length <= jointId) {\n    return false;\n  }\n  const joint = world.jointArray[jointId];\n  if (joint.jointId === B2_NULL_INDEX) {\n    return false;\n  }\n  return id.revision === joint.revision;\n}\nfunction b2World_EnableSleeping(worldId, flag) {\n  const world = b2GetWorldFromId(worldId);\n  if (world.locked) {\n    return;\n  }\n  if (flag === world.enableSleep) {\n    return;\n  }\n  world.enableSleep = flag;\n  if (flag === false) {\n    const setCount = world.solverSetArray.length;\n    for (let i = b2SetType.b2_firstSleepingSet; i < setCount; ++i) {\n      const set = world.solverSetArray[i];\n      if (set.sims.length > 0) {\n        b2WakeSolverSet(world, i);\n      }\n    }\n  }\n}\nfunction b2World_EnableWarmStarting(worldId, flag) {\n  const world = b2GetWorldFromId(worldId);\n  if (world.locked) {\n    return;\n  }\n  world.enableWarmStarting = flag;\n}\nfunction b2World_EnableContinuous(worldId, flag) {\n  const world = b2GetWorldFromId(worldId);\n  if (world.locked) {\n    return;\n  }\n  world.enableContinuous = flag;\n}\nfunction b2World_SetRestitutionThreshold(worldId, value) {\n  const world = b2GetWorldFromId(worldId);\n  if (world.locked) {\n    return;\n  }\n  world.restitutionThreshold = Math.max(0, Math.min(value, Number.MAX_VALUE));\n}\nfunction b2World_SetHitEventThreshold(worldId, value) {\n  const world = b2GetWorldFromId(worldId);\n  if (world.locked) {\n    return;\n  }\n  world.hitEventThreshold = Math.max(0, Math.min(value, Number.MAX_VALUE));\n}\nfunction b2World_SetContactTuning(worldId, hertz, dampingRatio, pushOut) {\n  const world = b2GetWorldFromId(worldId);\n  if (world.locked) {\n    return;\n  }\n  world.contactHertz = b2ClampFloat(hertz, 0, Number.MAX_VALUE);\n  world.contactDampingRatio = b2ClampFloat(dampingRatio, 0, Number.MAX_VALUE);\n  world.contactPushoutVelocity = b2ClampFloat(pushOut, 0, Number.MAX_VALUE);\n}\nfunction TreeQueryCallback(proxyId, shapeId, context) {\n  const worldContext = context;\n  const world = worldContext.world;\n  const shape = world.shapeArray[shapeId];\n  const shapeFilter = shape.filter;\n  const queryFilter = worldContext.filter;\n  if ((shapeFilter.categoryBits & queryFilter.maskBits) === 0 || (shapeFilter.maskBits & queryFilter.categoryBits) === 0) {\n    return true;\n  }\n  const id = new b2ShapeId(shapeId + 1, world.worldId, shape.revision);\n  const result = worldContext.fcn(id, worldContext.userContext);\n  return result;\n}\nvar WorldQueryContext = class {\n  constructor(world = null, fcn = null, filter = null, userContext = null) {\n    this.world = world;\n    this.fcn = fcn;\n    this.filter = filter;\n    this.userContext = userContext;\n  }\n};\nfunction b2World_OverlapAABB(worldId, aabb, filter, fcn, context) {\n  const world = b2GetWorldFromId(worldId);\n  if (world.locked) {\n    return;\n  }\n  const worldContext = new WorldQueryContext(world, fcn, filter, context);\n  for (let i = 0; i < b2BodyType.b2_bodyTypeCount; ++i) {\n    b2DynamicTree_Query(world.broadPhase.trees[i], aabb, filter.maskBits, TreeQueryCallback, worldContext);\n  }\n}\nfunction TreeOverlapCallback(proxyId, shapeId, context) {\n  const worldContext = context;\n  const world = worldContext.world;\n  const shape = world.shapeArray[shapeId];\n  const shapeFilter = shape.filter;\n  const queryFilter = worldContext.filter;\n  if ((shapeFilter.categoryBits & queryFilter.maskBits) === 0 || (shapeFilter.maskBits & queryFilter.categoryBits) === 0) {\n    return true;\n  }\n  const body = b2GetBody(world, shape.bodyId);\n  const transform = b2GetBodyTransformQuick(world, body);\n  const input = new b2DistanceInput();\n  input.proxyA = worldContext.proxy;\n  input.proxyB = b2MakeShapeDistanceProxy(shape);\n  input.transformA = worldContext.transform;\n  input.transformB = transform;\n  input.useRadii = true;\n  const cache = new b2DistanceCache();\n  const output = b2ShapeDistance(cache, input, null, 0);\n  if (output.distance > 0) {\n    return true;\n  }\n  const id = new b2ShapeId(shape.id + 1, world.worldId, shape.revision);\n  const result = worldContext.fcn(id, worldContext.userContext);\n  return result;\n}\nfunction b2World_OverlapCircle(worldId, circle, transform, filter, fcn, context) {\n  const world = b2GetWorldFromId(worldId);\n  if (world.locked) {\n    return;\n  }\n  const aabb = b2ComputeCircleAABB(circle, transform);\n  const worldContext = new WorldOverlapContext();\n  worldContext.world = world;\n  worldContext.fcn = fcn;\n  worldContext.filter = filter;\n  worldContext.proxy = b2MakeProxy(circle.center, 1, circle.radius);\n  worldContext.transform = transform;\n  worldContext.userContext = context;\n  for (let i = 0; i < b2BodyType.b2_bodyTypeCount; ++i) {\n    b2DynamicTree_Query(world.broadPhase.trees[i], aabb, filter.maskBits, TreeOverlapCallback, worldContext);\n  }\n}\nfunction b2World_OverlapCapsule(worldId, capsule, transform, filter, fcn, context) {\n  const world = b2GetWorldFromId(worldId);\n  if (world.locked) {\n    return;\n  }\n  const aabb = b2ComputeCapsuleAABB(capsule, transform);\n  const worldContext = new WorldOverlapContext();\n  worldContext.world = world;\n  worldContext.fcn = fcn;\n  worldContext.filter = filter;\n  worldContext.proxy = b2MakeProxy(capsule.center, 2, capsule.radius);\n  worldContext.transform = transform;\n  worldContext.userContext = context;\n  for (let i = 0; i < b2BodyType.b2_bodyTypeCount; ++i) {\n    b2DynamicTree_Query(world.broadPhase.trees[i], aabb, filter.maskBits, TreeOverlapCallback, worldContext);\n  }\n}\nfunction b2World_OverlapPolygon(worldId, polygon, transform, filter, fcn, context) {\n  const world = b2GetWorldFromId(worldId);\n  if (world.locked) {\n    return;\n  }\n  const aabb = b2ComputePolygonAABB(polygon, transform);\n  const worldContext = new WorldOverlapContext();\n  worldContext.world = world;\n  worldContext.fcn = fcn;\n  worldContext.filter = filter;\n  worldContext.proxy = b2MakeProxy(polygon.vertices, polygon.count, polygon.radius), worldContext.transform = transform;\n  worldContext.userContext = context;\n  for (let i = 0; i < b2BodyType.b2_bodyTypeCount; ++i) {\n    b2DynamicTree_Query(world.broadPhase.trees[i], aabb, filter.maskBits, TreeOverlapCallback, worldContext);\n  }\n}\nfunction RayCastCallback(input, proxyId, shapeId, context) {\n  const worldContext = context;\n  const world = worldContext.world;\n  const shape = world.shapeArray[shapeId];\n  const shapeFilter = shape.filter;\n  const queryFilter = worldContext.filter;\n  if ((shapeFilter.categoryBits & queryFilter.maskBits) === 0 || (shapeFilter.maskBits & queryFilter.categoryBits) === 0) {\n    return input.maxFraction;\n  }\n  const body = b2GetBody(world, shape.bodyId);\n  const transform = b2GetBodyTransformQuick(world, body);\n  const output = b2RayCastShape(input, shape, transform);\n  if (output.hit) {\n    const id = new b2ShapeId(shapeId + 1, world.worldId, shape.revision);\n    const fraction = worldContext.fcn(id, output.point, output.normal, output.fraction, worldContext.userContext);\n    if (fraction >= 0 && fraction <= 1) {\n      worldContext.fraction = fraction;\n    }\n    return fraction;\n  }\n  return input.maxFraction;\n}\nfunction b2World_CastRay(worldId, origin, translation, filter, fcn, context) {\n  const world = b2GetWorldFromId(worldId);\n  if (world.locked) {\n    return;\n  }\n  const input = new b2RayCastInput();\n  input.origin = origin;\n  input.translation = translation;\n  input.maxFraction = 1;\n  const worldContext = new WorldRayCastContext();\n  worldContext.world = world;\n  worldContext.fcn = fcn;\n  worldContext.filter = filter;\n  worldContext.fraction = 1;\n  worldContext.userContext = context;\n  for (let i = 0; i < b2BodyType.b2_bodyTypeCount; ++i) {\n    b2DynamicTree_RayCast(world.broadPhase.trees[i], input, filter.maskBits, RayCastCallback, worldContext);\n    if (worldContext.fraction === 0) {\n      return;\n    }\n    input.maxFraction = worldContext.fraction;\n  }\n}\nfunction b2RayCastClosestFcn(shapeId, point, normal, fraction, context) {\n  const rayResult = context;\n  rayResult.shapeId = shapeId;\n  rayResult.point = point;\n  rayResult.normal = normal;\n  rayResult.fraction = fraction;\n  rayResult.hit = true;\n  return fraction;\n}\nfunction b2World_CastRayClosest(worldId, origin, translation, filter) {\n  const result = new b2RayResult();\n  const world = b2GetWorldFromId(worldId);\n  if (world.locked) {\n    return result;\n  }\n  const input = new b2RayCastInput();\n  input.origin = origin;\n  input.translation = translation;\n  input.maxFraction = 1;\n  const worldContext = new WorldRayCastContext();\n  worldContext.world = world;\n  worldContext.fcn = b2RayCastClosestFcn;\n  worldContext.fraction = 1;\n  worldContext.userContext = result;\n  for (let i = 0; i < b2BodyType.b2_bodyTypeCount; ++i) {\n    b2DynamicTree_RayCast(world.broadPhase.trees[i], input, filter.maskBits, RayCastCallback, worldContext);\n    if (worldContext.fraction == 0) {\n      return result;\n    }\n    input.maxFraction = worldContext.fraction;\n  }\n  return result;\n}\nfunction ShapeCastCallback(input, proxyId, shapeId, context) {\n  const worldContext = context;\n  const world = worldContext.world;\n  const shape = world.shapeArray[shapeId];\n  const shapeFilter = shape.filter;\n  const queryFilter = worldContext.filter;\n  if ((shapeFilter.categoryBits & queryFilter.maskBits) == 0 || (shapeFilter.maskBits & queryFilter.categoryBits) == 0) {\n    return input.maxFraction;\n  }\n  const body = b2GetBody(world, shape.bodyId);\n  const transform = b2GetBodyTransformQuick(world, body);\n  const output = b2ShapeCastShape(input, shape, transform);\n  if (output.hit) {\n    const id = new b2ShapeId(shapeId + 1, world.worldId, shape.revision);\n    const fraction = worldContext.fcn(id, output.point, output.normal, output.fraction, worldContext.userContext);\n    worldContext.fraction = fraction;\n    return fraction;\n  }\n  return input.maxFraction;\n}\nfunction b2World_CastCircle(worldId, circle, originTransform, translation, filter, fcn, context) {\n  const world = b2GetWorldFromId(worldId);\n  if (world.locked) {\n    return;\n  }\n  const input = new b2ShapeCastInput();\n  input.points = [b2TransformPoint(originTransform, circle.center)];\n  input.count = 1;\n  input.radius = circle.radius;\n  input.translation = translation;\n  input.maxFraction = 1;\n  const worldContext = new WorldRayCastContext();\n  worldContext.world = world;\n  worldContext.fcn = fcn;\n  worldContext.filter = filter;\n  worldContext.fraction = 1;\n  worldContext.userContext = context;\n  for (let i = 0; i < b2BodyType.b2_bodyTypeCount; ++i) {\n    b2DynamicTree_ShapeCast(world.broadPhase.trees[i], input, filter.maskBits, ShapeCastCallback, worldContext);\n    if (worldContext.fraction == 0) {\n      return;\n    }\n    input.maxFraction = worldContext.fraction;\n  }\n}\nfunction b2World_CastCapsule(worldId, capsule, originTransform, translation, filter, fcn, context) {\n  const world = b2GetWorldFromId(worldId);\n  if (world.locked) {\n    return;\n  }\n  const input = new b2ShapeCastInput();\n  input.points = [b2TransformPoint(originTransform, capsule.center1), b2TransformPoint(originTransform, capsule.center2)];\n  input.count = 2;\n  input.radius = capsule.radius;\n  input.translation = translation;\n  input.maxFraction = 1;\n  const worldContext = new WorldRayCastContext();\n  worldContext.world = world;\n  worldContext.fcn = fcn;\n  worldContext.filter = filter;\n  worldContext.fraction = 1;\n  worldContext.userContext = context;\n  for (let i = 0; i < b2BodyType.b2_bodyTypeCount; ++i) {\n    b2DynamicTree_ShapeCast(world.broadPhase.trees[i], input, filter.maskBits, ShapeCastCallback, worldContext);\n    if (worldContext.fraction == 0) {\n      return;\n    }\n    input.maxFraction = worldContext.fraction;\n  }\n}\nfunction b2World_CastPolygon(worldId, polygon, originTransform, translation, filter, fcn, context) {\n  const world = b2GetWorldFromId(worldId);\n  if (world.locked) {\n    return;\n  }\n  const input = new b2ShapeCastInput();\n  input.points = polygon.vertices.map((vertex) => b2TransformPoint(originTransform, vertex));\n  input.count = polygon.count;\n  input.radius = polygon.radius;\n  input.translation = translation;\n  input.maxFraction = 1;\n  const worldContext = new WorldRayCastContext();\n  worldContext.world = world;\n  worldContext.fcn = fcn;\n  worldContext.filter = filter;\n  worldContext.fraction = 1;\n  worldContext.userContext = context;\n  for (let i = 0; i < b2BodyType.b2_bodyTypeCount; ++i) {\n    b2DynamicTree_ShapeCast(world.broadPhase.trees[i], input, filter.maskBits, ShapeCastCallback, worldContext);\n    if (worldContext.fraction == 0) {\n      return;\n    }\n    input.maxFraction = worldContext.fraction;\n  }\n}\nfunction b2World_SetPreSolveCallback(worldId, fcn, context) {\n  const world = b2GetWorldFromId(worldId);\n  world.preSolveFcn = fcn;\n  world.preSolveContext = context;\n}\nfunction b2World_SetCustomFilterCallback(worldId, fcn, context) {\n  const world = b2GetWorldFromId(worldId);\n  world.customFilterFcn = fcn;\n  world.customFilterContext = context;\n}\nfunction b2World_SetGravity(worldId, gravity) {\n  const world = b2GetWorldFromId(worldId);\n  world.gravity = gravity;\n}\nfunction b2World_GetGravity(worldId) {\n  const world = b2GetWorldFromId(worldId);\n  return world.gravity;\n}\nvar ExplosionContext = class {\n  constructor(world, position, radius, magnitude) {\n    this.world = world;\n    this.position = position;\n    this.radius = radius;\n    this.magnitude = magnitude;\n  }\n};\nfunction ExplosionCallback(proxyId, shapeId, context) {\n  const explosionContext = context;\n  const world = explosionContext.world;\n  const shape = world.shapeArray[shapeId];\n  const body = world.bodyArray[shape.bodyId];\n  if (body.type === b2BodyType.b2_kinematicBody) {\n    return true;\n  }\n  b2WakeBody(world, body);\n  if (body.setIndex !== b2SetType.b2_awakeSet) {\n    return true;\n  }\n  const transform = b2GetBodyTransformQuick(world, body);\n  const input = new b2DistanceInput();\n  input.proxyA = b2MakeShapeDistanceProxy(shape);\n  input.proxyB = b2MakeProxy([explosionContext.position], 1, 0);\n  input.transformA = transform;\n  input.transformB = new b2Transform(new b2Vec2(0, 0), new b2Rot(1, 0));\n  input.useRadii = true;\n  const cache = new b2DistanceCache();\n  const output = b2ShapeDistance(cache, input, null, 0);\n  if (output.distance > explosionContext.radius) {\n    return true;\n  }\n  let closestPoint = output.pointA;\n  if (output.distance === 0) {\n    const localCentroid = b2GetShapeCentroid(shape);\n    closestPoint = b2TransformPoint(transform, localCentroid);\n  }\n  const falloff = 0.4;\n  const perimeter = b2GetShapePerimeter(shape);\n  const magnitude = explosionContext.magnitude * perimeter * (1 - falloff * output.distance / explosionContext.radius);\n  const direction = b2Normalize(b2Sub(closestPoint, explosionContext.position));\n  const impulse = b2MulSV(magnitude, direction);\n  const localIndex = body.localIndex;\n  const set = world.solverSetArray[b2SetType.b2_awakeSet];\n  const state = set.states.data[localIndex];\n  const bodySim = set.sims.data[localIndex];\n  state.linearVelocity = b2MulAdd(state.linearVelocity, bodySim.invMass, impulse);\n  state.angularVelocity += bodySim.invInertia * b2Cross(b2Sub(closestPoint, bodySim.center), impulse);\n  return true;\n}\nfunction b2World_Explode(worldId, position, radius, magnitude) {\n  const world = b2GetWorldFromId(worldId);\n  if (world.locked) {\n    return;\n  }\n  const explosionContext = new ExplosionContext(world, position, radius, magnitude);\n  const aabb = new b2AABB(position.x - radius, position.y - radius, position.x + radius, position.y + radius);\n  b2DynamicTree_Query(\n    world.broadPhase.trees[b2BodyType.b2_dynamicBody],\n    aabb,\n    B2_DEFAULT_MASK_BITS,\n    ExplosionCallback,\n    explosionContext\n  );\n}\nfunction b2GetRootIslandId(world, islandId) {\n  if (islandId === B2_NULL_INDEX) {\n    return B2_NULL_INDEX;\n  }\n  let rootId = islandId;\n  let rootIsland = world.islandArray[islandId];\n  while (rootIsland.parentIsland !== B2_NULL_INDEX) {\n    const parent = world.islandArray[rootIsland.parentIsland];\n    rootId = rootIsland.parentIsland;\n    rootIsland = parent;\n  }\n  return rootId;\n}\nfunction b2CheckId(a, id) {\n}\nfunction b2CheckIndex(a, i) {\n  if (Array.isArray(a)) {\n  } else {\n  }\n}\nfunction b2ValidateConnectivity(world) {\n  if (!b2Validation) {\n    return;\n  }\n  const bodyCapacity = world.bodyArray.length;\n  for (let bodyIndex = 0; bodyIndex < bodyCapacity; ++bodyIndex) {\n    const body = world.bodyArray[bodyIndex];\n    if (body.id === B2_NULL_INDEX) {\n      continue;\n    }\n    const bodyIslandId = b2GetRootIslandId(world, body.islandId);\n    const bodySetIndex = body.setIndex;\n    let contactKey = body.headContactKey;\n    while (contactKey !== B2_NULL_INDEX) {\n      const contactId = contactKey >> 1;\n      const edgeIndex = contactKey & 1;\n      const contact = world.contactArray[contactId];\n      const touching = (contact.flags & b2ContactFlags.b2_contactTouchingFlag) !== 0;\n      if (touching && (contact.flags & b2ContactFlags.b2_contactSensorFlag) === 0) {\n        if (bodySetIndex !== b2SetType.b2_staticSet) {\n          const contactIslandId = b2GetRootIslandId(world, contact.islandId);\n        }\n      } else {\n      }\n      contactKey = contact.edges[edgeIndex].nextKey;\n    }\n    let jointKey = body.headJointKey;\n    while (jointKey !== B2_NULL_INDEX) {\n      const jointId = jointKey >> 1;\n      const edgeIndex = jointKey & 1;\n      const joint = world.jointArray[jointId];\n      const otherEdgeIndex = edgeIndex ^ 1;\n      const otherBody = world.bodyArray[joint.edges[otherEdgeIndex].bodyId];\n      if (bodySetIndex === b2SetType.b2_disabledSet || otherBody.setIndex === b2SetType.b2_disabledSet) {\n      } else if (bodySetIndex === b2SetType.b2_staticSet) {\n        if (otherBody.setIndex === b2SetType.b2_staticSet) {\n        }\n      } else {\n        const jointIslandId = b2GetRootIslandId(world, joint.islandId);\n      }\n      jointKey = joint.edges[edgeIndex].nextKey;\n    }\n  }\n}\nfunction b2ValidateSolverSets(world) {\n  if (!b2Validation) {\n    return;\n  }\n  let activeSetCount = 0;\n  let totalBodyCount = 0;\n  let totalJointCount = 0;\n  let totalContactCount = 0;\n  let totalIslandCount = 0;\n  const setCount = world.solverSetArray.length;\n  for (let setIndex = 0; setIndex < setCount; ++setIndex) {\n    const set = world.solverSetArray[setIndex];\n    if (set.setIndex !== B2_NULL_INDEX) {\n      activeSetCount += 1;\n      if (setIndex === b2SetType.b2_staticSet) {\n      } else if (setIndex === b2SetType.b2_awakeSet) {\n      } else if (setIndex === b2SetType.b2_disabledSet) {\n      } else {\n      }\n      {\n        const bodies = world.bodyArray;\n        totalBodyCount += set.sims.count;\n        for (let i = 0; i < set.sims.count; ++i) {\n          const bodySim = set.sims.data[i];\n          const bodyId = bodySim.bodyId;\n          b2CheckIndex(bodies, bodyId);\n          const body = bodies[bodyId];\n          if (setIndex === b2SetType.b2_disabledSet) {\n          }\n          let prevShapeId = B2_NULL_INDEX;\n          let shapeId = body.headShapeId;\n          while (shapeId !== B2_NULL_INDEX) {\n            b2CheckId(world.shapeArray, shapeId);\n            const shape = world.shapeArray[shapeId];\n            if (setIndex === b2SetType.b2_disabledSet) {\n            } else if (setIndex === b2SetType.b2_staticSet) {\n            } else {\n              const proxyType = B2_PROXY_TYPE(shape.proxyKey);\n            }\n            prevShapeId = shapeId;\n            shapeId = shape.nextShapeId;\n          }\n          let contactKey = body.headContactKey;\n          while (contactKey !== B2_NULL_INDEX) {\n            const contactId = contactKey >> 1;\n            const edgeIndex = contactKey & 1;\n            b2CheckIndex(world.contactArray, contactId);\n            const contact = world.contactArray[contactId];\n            contactKey = contact.edges[edgeIndex].nextKey;\n          }\n          let jointKey = body.headJointKey;\n          while (jointKey !== B2_NULL_INDEX) {\n            const jointId = jointKey >> 1;\n            const edgeIndex = jointKey & 1;\n            b2CheckIndex(world.jointArray, jointId);\n            const joint = world.jointArray[jointId];\n            const otherEdgeIndex = edgeIndex ^ 1;\n            b2CheckIndex(world.bodyArray, joint.edges[otherEdgeIndex].bodyId);\n            const otherBody = world.bodyArray[joint.edges[otherEdgeIndex].bodyId];\n            if (setIndex === b2SetType.b2_disabledSet || otherBody.setIndex === b2SetType.b2_disabledSet) {\n            } else if (setIndex === b2SetType.b2_staticSet && otherBody.setIndex === b2SetType.b2_staticSet) {\n            } else if (setIndex === b2SetType.b2_awakeSet) {\n            } else if (setIndex >= b2SetType.b2_firstSleepingSet) {\n            }\n            const jointSim = b2GetJointSim(world, joint);\n            jointKey = joint.edges[edgeIndex].nextKey;\n          }\n        }\n      }\n      {\n        const contacts = world.contactArray;\n        totalContactCount += set.contacts.count;\n        for (let i = 0; i < set.contacts.count; ++i) {\n          const contactSim = set.contacts.data[i];\n          const contact = contacts[contactSim.contactId];\n          if (setIndex === b2SetType.b2_awakeSet) {\n          }\n        }\n      }\n      {\n        const joints = world.jointArray;\n        totalJointCount += set.joints.count;\n        for (let i = 0; i < set.joints.count; ++i) {\n          const jointSim = set.joints.data[i];\n          const joint = joints[jointSim.jointId];\n        }\n      }\n      {\n        const islands = world.islandArray;\n        totalIslandCount += set.islands.count;\n        for (let i = 0; i < set.islands.count; ++i) {\n          const islandSim = set.islands.data[i];\n          const island = islands[islandSim.islandId];\n        }\n      }\n    } else {\n    }\n  }\n  const setIdCount = b2GetIdCount(world.solverSetIdPool);\n  const bodyIdCount = b2GetIdCount(world.bodyIdPool);\n  const islandIdCount = b2GetIdCount(world.islandIdPool);\n  for (let colorIndex = 0; colorIndex < b2_graphColorCount; ++colorIndex) {\n    const color = world.constraintGraph.colors[colorIndex];\n    {\n      const contacts = world.contactArray;\n      totalContactCount += color.contacts.count;\n      for (let i = 0; i < color.contacts.count; ++i) {\n        const contactSim = color.contacts.data[i];\n        b2CheckIndex(contacts, contactSim.contactId);\n        const contact = contacts[contactSim.contactId];\n        const bodyIdA = contact.edges[0].bodyId;\n        const bodyIdB = contact.edges[1].bodyId;\n        b2CheckIndex(world.bodyArray, bodyIdA);\n        b2CheckIndex(world.bodyArray, bodyIdB);\n        if (colorIndex < b2_overflowIndex) {\n          const bodyA = world.bodyArray[bodyIdA];\n          const bodyB = world.bodyArray[bodyIdB];\n        }\n      }\n    }\n    {\n      const joints = world.jointArray;\n      totalJointCount += color.joints.count;\n      for (let i = 0; i < color.joints.count; ++i) {\n        const jointSim = color.joints.data[i];\n        b2CheckIndex(joints, jointSim.jointId);\n        const joint = joints[jointSim.jointId];\n        const bodyIdA = joint.edges[0].bodyId;\n        const bodyIdB = joint.edges[1].bodyId;\n        b2CheckIndex(world.bodyArray, bodyIdA);\n        b2CheckIndex(world.bodyArray, bodyIdB);\n        if (colorIndex < b2_overflowIndex) {\n          const bodyA = world.bodyArray[bodyIdA];\n          const bodyB = world.bodyArray[bodyIdB];\n        }\n      }\n    }\n  }\n  const contactIdCount = b2GetIdCount(world.contactIdPool);\n  const jointIdCount = b2GetIdCount(world.jointIdPool);\n}\nfunction b2GetBit2(bitSet, bitIndex) {\n  const blockIndex = Math.floor(bitIndex / 64);\n  if (blockIndex >= bitSet.blockCount) {\n    return false;\n  }\n  return (bitSet.bits[blockIndex] & BigInt(1) << BigInt(bitIndex % 64)) !== BigInt(0);\n}\nfunction b2ValidateContacts(world) {\n  if (!b2Validation) {\n    return;\n  }\n  const contactCount = world.contactArray.length;\n  let allocatedContactCount = 0;\n  for (let contactIndex = 0; contactIndex < contactCount; ++contactIndex) {\n    const contact = world.contactArray[contactIndex];\n    if (contact.contactId === B2_NULL_INDEX) {\n      continue;\n    }\n    allocatedContactCount += 1;\n    const touching = (contact.flags & b2ContactFlags.b2_contactTouchingFlag) !== 0;\n    const sensorTouching = (contact.flags & b2ContactFlags.b2_contactSensorTouchingFlag) !== 0;\n    const isSensor = (contact.flags & b2ContactFlags.b2_contactSensorFlag) !== 0;\n    const setId = contact.setIndex;\n    if (setId === b2SetType.b2_awakeSet) {\n      if (touching && isSensor === false) {\n      } else {\n      }\n    } else if (setId >= b2SetType.b2_firstSleepingSet) {\n    } else {\n    }\n    const contactSim = b2GetContactSim(world, contact);\n    const simTouching = (contactSim.simFlags & b2ContactSimFlags.b2_simTouchingFlag) !== 0;\n  }\n  const contactIdCount = b2GetIdCount(world.contactIdPool);\n}\n\n// src/include/world_h.js\nfunction b2World_GetProfile() {\n}\nfunction b2World_GetCounters() {\n}\nfunction b2World_DumpMemoryStats() {\n}\n\n// src/debug_draw.js\nvar p02 = new b2Vec2();\n\n// src/ragdoll.js\nvar JointedBone = class {\n  constructor() {\n    this.bodyId = null;\n    this.jointId = null;\n    this.frictionScale = 1;\n    this.parentIndex = -1;\n    this.name = \"\";\n  }\n};\nvar Skeletons = class {\n  static HumanBones = {\n    e_hip: 0,\n    e_torso: 1,\n    e_head: 2,\n    e_upperLeftLeg: 3,\n    e_lowerLeftLeg: 4,\n    e_upperRightLeg: 5,\n    e_lowerRightLeg: 6,\n    e_upperLeftArm: 7,\n    e_lowerLeftArm: 8,\n    e_upperRightArm: 9,\n    e_lowerRightArm: 10,\n    e_count: 11\n  };\n  static sideViewHuman11 = {\n    BONE_DATA: [\n      { name: \"hip\", parentIndex: -1, position: [0, 0.95], capsule: { center1: [0, -0.02], center2: [0, 0.02], radius: 0.095 } },\n      { name: \"torso\", parentIndex: 0, position: [0, 1.2], capsule: { center1: [0, -0.135], center2: [0, 0.135], radius: 0.09 }, frictionScale: 0.5 },\n      { name: \"head\", parentIndex: 1, position: [0, 1.5], capsule: { center1: [0, -0.0325], center2: [0, 0.0325], radius: 0.08 }, frictionScale: 0.25, linearDamping: 0.1 },\n      { name: \"upperLeftLeg\", parentIndex: 0, position: [0, 0.775], capsule: { center1: [0, -0.125], center2: [0, 0.125], radius: 0.06 } },\n      { name: \"lowerLeftLeg\", parentIndex: 3, position: [0, 0.475], capsule: { center1: [0, -0.14], center2: [0, 0.125], radius: 0.05 }, frictionScale: 0.5, foot: \"right\" },\n      { name: \"upperRightLeg\", parentIndex: 0, position: [0, 0.775], capsule: { center1: [0, -0.125], center2: [0, 0.125], radius: 0.06 } },\n      { name: \"lowerRightLeg\", parentIndex: 5, position: [0, 0.475], capsule: { center1: [0, -0.14], center2: [0, 0.125], radius: 0.05 }, frictionScale: 0.5, foot: \"right\" },\n      { name: \"upperLeftArm\", parentIndex: 1, position: [0, 1.225], capsule: { center1: [0, -0.125], center2: [0, 0.125], radius: 0.035 }, frictionScale: 0.5 },\n      { name: \"lowerLeftArm\", parentIndex: 7, position: [0, 0.975], capsule: { center1: [0, -0.125], center2: [0, 0.125], radius: 0.03 }, frictionScale: 0.1, linearDamping: 0.1 },\n      { name: \"upperRightArm\", parentIndex: 1, position: [0, 1.225], capsule: { center1: [0, -0.125], center2: [0, 0.125], radius: 0.035 }, frictionScale: 0.5 },\n      { name: \"lowerRightArm\", parentIndex: 9, position: [0, 0.975], capsule: { center1: [0, -0.125], center2: [0, 0.125], radius: 0.03 }, frictionScale: 0.1, linearDamping: 0.1 }\n    ],\n    JOINT_DATA: [\n      { boneName: \"torso\", pivot: [0, 1], limits: [-0.25 * Math.PI, 0] },\n      { boneName: \"head\", pivot: [0, 1.4], limits: [-0.3 * Math.PI, 0.1 * Math.PI] },\n      { boneName: \"upperLeftLeg\", pivot: [0, 0.9], limits: [-0.05 * Math.PI, 0.4 * Math.PI] },\n      { boneName: \"lowerLeftLeg\", pivot: [0, 0.625], limits: [-0.5 * Math.PI, -0.02 * Math.PI] },\n      { boneName: \"upperRightLeg\", pivot: [0, 0.9], limits: [-0.05 * Math.PI, 0.4 * Math.PI] },\n      { boneName: \"lowerRightLeg\", pivot: [0, 0.625], limits: [-0.5 * Math.PI, -0.02 * Math.PI] },\n      { boneName: \"upperLeftArm\", pivot: [0, 1.35], limits: [-0.1 * Math.PI, 0.8 * Math.PI] },\n      { boneName: \"lowerLeftArm\", pivot: [0, 1.1], limits: [0.01 * Math.PI, 0.5 * Math.PI] },\n      { boneName: \"upperRightArm\", pivot: [0, 1.35], limits: null },\n      { boneName: \"lowerRightArm\", pivot: [0, 1.1], limits: [0.01 * Math.PI, 0.5 * Math.PI] }\n    ]\n  };\n  static frontViewHuman11 = {\n    BONE_DATA: [\n      { name: \"hip\", parentIndex: -1, position: [0, 0.95], capsule: { center1: [-0.03, 0], center2: [0.03, 0], radius: 0.095 } },\n      { name: \"torso\", parentIndex: 0, position: [0, 1.2], capsule: { center1: [0, -0.135], center2: [0, 0.135], radius: 0.09 }, frictionScale: 0.5 },\n      { name: \"head\", parentIndex: 1, position: [0, 1.5], capsule: { center1: [0, -0.0325], center2: [0, 0.0325], radius: 0.08 }, frictionScale: 0.25, linearDamping: 0.1 },\n      { name: \"upperLeftLeg\", parentIndex: 0, position: [-0.1, 0.775], capsule: { center1: [0, -0.125], center2: [0, 0.125], radius: 0.06 } },\n      { name: \"lowerLeftLeg\", parentIndex: 3, position: [-0.1, 0.475], capsule: { center1: [0, -0.14], center2: [0, 0.125], radius: 0.05 }, frictionScale: 0.5, foot: \"left\" },\n      { name: \"upperRightLeg\", parentIndex: 0, position: [0.1, 0.775], capsule: { center1: [0, -0.125], center2: [0, 0.125], radius: 0.06 } },\n      { name: \"lowerRightLeg\", parentIndex: 5, position: [0.1, 0.475], capsule: { center1: [0, -0.14], center2: [0, 0.125], radius: 0.05 }, frictionScale: 0.5, foot: \"right\" },\n      { name: \"upperLeftArm\", parentIndex: 1, position: [-0.15, 1.22], capsule: { center1: [0, -0.125], center2: [0.05, 0.125], radius: 0.035 }, frictionScale: 0.5 },\n      { name: \"lowerLeftArm\", parentIndex: 7, position: [-0.15, 0.97], capsule: { center1: [0, -0.125], center2: [0, 0.125], radius: 0.03 }, frictionScale: 0.1, linearDamping: 0.1 },\n      { name: \"upperRightArm\", parentIndex: 1, position: [0.15, 1.22], capsule: { center1: [0, -0.125], center2: [-0.05, 0.125], radius: 0.035 }, frictionScale: 0.5 },\n      { name: \"lowerRightArm\", parentIndex: 9, position: [0.15, 0.97], capsule: { center1: [0, -0.125], center2: [0, 0.125], radius: 0.03 }, frictionScale: 0.1, linearDamping: 0.1 }\n    ],\n    JOINT_DATA: [\n      { boneName: \"torso\", pivot: [0, 1], limits: [-0.1 * Math.PI, 0.1 * Math.PI] },\n      { boneName: \"head\", pivot: [0, 1.4], limits: [-0.2 * Math.PI, 0.2 * Math.PI] },\n      { boneName: \"upperLeftLeg\", pivot: [-0.1, 0.9], limits: [-0.3 * Math.PI, 0.1 * Math.PI] },\n      { boneName: \"lowerLeftLeg\", pivot: [-0.1, 0.625], limits: [0, 0.5 * Math.PI] },\n      { boneName: \"upperRightLeg\", pivot: [0.1, 0.9], limits: [-0.1 * Math.PI, 0.3 * Math.PI] },\n      { boneName: \"lowerRightLeg\", pivot: [0.1, 0.625], limits: [-0.5 * Math.PI, 0] },\n      { boneName: \"upperLeftArm\", pivot: [-0.12, 1.35], limits: [-0.7 * Math.PI, 0.1 * Math.PI] },\n      { boneName: \"lowerLeftArm\", pivot: [-0.16, 1.1], limits: [0, 0.75 * Math.PI] },\n      { boneName: \"upperRightArm\", pivot: [0.12, 1.35], limits: [-0.1 * Math.PI, 0.7 * Math.PI] },\n      { boneName: \"lowerRightArm\", pivot: [0.14, 1.1], limits: [0, 0.75 * Math.PI] }\n    ]\n  };\n  static ElephantBones = {\n    e_torso: 0,\n    e_head: 1,\n    e_trunkBase: 2,\n    e_trunkMid: 3,\n    e_trunkTip: 4,\n    e_upperFrontLegL: 5,\n    e_lowerFrontLegL: 6,\n    e_upperRearLegL: 7,\n    e_lowerRearLegL: 8,\n    e_tail: 9,\n    e_ear: 10,\n    e_count: 11\n  };\n  static sideViewElephant = {\n    BONE_DATA: [\n      { name: \"torso\", parentIndex: -1, position: [0, 1.5], capsule: { center1: [0.8, 0], center2: [-0.8, 0], radius: 0.6 }, frictionScale: 0.5 },\n      { name: \"head\", parentIndex: 0, position: [-1.4, 2.2], capsule: { center1: [0.3, 0], center2: [-0.3, 0], radius: 0.35 }, frictionScale: 0.25, linearDamping: 0.1 },\n      { name: \"trunkBase\", parentIndex: 1, position: [-1.95, 1.85], capsule: { center1: [0, -0.2], center2: [0, 0.2], radius: 0.15 } },\n      { name: \"trunkMid\", parentIndex: 2, position: [-1.95, 1.4], capsule: { center1: [0, -0.2], center2: [0, 0.2], radius: 0.12 } },\n      { name: \"trunkTip\", parentIndex: 3, position: [-1.95, 1.05], capsule: { center1: [0, -0.2], center2: [0, 0.2], radius: 0.08 }, frictionScale: 0.1, linearDamping: 0.1 },\n      { name: \"upperFrontLeg\", parentIndex: 0, position: [-0.6, 0.8], capsule: { center1: [0, -0.3], center2: [0, 0.3], radius: 0.2 } },\n      { name: \"lowerFrontLeg\", parentIndex: 5, position: [-0.6, 0.2], capsule: { center1: [0, -0.3], center2: [0, 0.3], radius: 0.18 }, frictionScale: 0.5 },\n      { name: \"upperBackLeg\", parentIndex: 0, position: [0.7, 0.8], capsule: { center1: [0, -0.3], center2: [0, 0.3], radius: 0.22 } },\n      { name: \"lowerBackLeg\", parentIndex: 7, position: [0.7, 0.2], capsule: { center1: [0, -0.3], center2: [0, 0.3], radius: 0.2 }, frictionScale: 0.5 },\n      { name: \"tail\", parentIndex: 0, position: [1.2, 1.6], capsule: { center1: [0, -0.3], center2: [0, 0.3], radius: 0.05 }, frictionScale: 0.1, linearDamping: 0.1 },\n      { name: \"ear\", parentIndex: 1, position: [-1.1, 2], capsule: { center1: [0, -0.15], center2: [0, 0.15], radius: 0.3 }, frictionScale: 0.1, linearDamping: 0.1 }\n    ],\n    JOINT_DATA: [\n      { boneName: \"head\", pivot: [-1, 2], limits: [-0.1 * Math.PI, 0.3 * Math.PI] },\n      { boneName: \"trunkBase\", pivot: [-1.95, 2], limits: [-0.5 * Math.PI, 0.5 * Math.PI] },\n      { boneName: \"trunkMid\", pivot: [-1.95, 1.55], limits: [-0.7 * Math.PI, 0.7 * Math.PI] },\n      { boneName: \"trunkTip\", pivot: [-1.95, 1.15], limits: [-0.9 * Math.PI, 0.9 * Math.PI] },\n      { boneName: \"upperFrontLeg\", pivot: [-0.6, 1.1], limits: [-0.2 * Math.PI, 0.2 * Math.PI] },\n      { boneName: \"lowerFrontLeg\", pivot: [-0.6, 0.5], limits: [-0.3 * Math.PI, 0.1 * Math.PI] },\n      { boneName: \"upperBackLeg\", pivot: [0.7, 1.1], limits: [-0.2 * Math.PI, 0.2 * Math.PI] },\n      { boneName: \"lowerBackLeg\", pivot: [0.7, 0.5], limits: [-0.1 * Math.PI, 0.3 * Math.PI] },\n      { boneName: \"tail\", pivot: [1.2, 1.9], limits: [-0.4 * Math.PI, 0.4 * Math.PI] },\n      { boneName: \"ear\", pivot: [-1.1, 2.2], limits: [-0.3 * Math.PI, 0.9 * Math.PI] }\n    ]\n  };\n};\nvar Ragdoll = class {\n  constructor(skeleton, x, y, worldId, groupIndex, color, size = 2) {\n    this.skeleton = skeleton;\n    this.position = new b2Vec2(x, y);\n    this.worldId = worldId;\n    this.groupIndex = groupIndex;\n    this.color = color;\n    this.m_scale = size;\n    this.frictionTorque = 0.05;\n    this.hertz = 0;\n    this.dampingRatio = 0.5;\n    this.jointDrawSize = 0.5;\n    this.maxTorque = this.frictionTorque * this.m_scale;\n    this.m_bones = [];\n    this.create();\n  }\n  createBone(boneData) {\n    const { bodyId } = CreateCapsule({\n      worldId: this.worldId,\n      position: b2Add(new b2Vec2(boneData.position[0] * this.m_scale, boneData.position[1] * this.m_scale), this.position),\n      type: b2BodyType.b2_dynamicBody,\n      center1: new b2Vec2(boneData.capsule.center1[0] * this.m_scale, boneData.capsule.center1[1] * this.m_scale),\n      center2: new b2Vec2(boneData.capsule.center2[0] * this.m_scale, boneData.capsule.center2[1] * this.m_scale),\n      radius: boneData.capsule.radius * this.m_scale,\n      density: 1,\n      friction: 0.2,\n      groupIndex: -this.groupIndex,\n      color: this.color\n    });\n    const bone = new JointedBone();\n    bone.name = boneData.name;\n    bone.parentIndex = boneData.parentIndex;\n    bone.frictionScale = boneData.frictionScale || 1;\n    bone.bodyId = bodyId;\n    if (boneData.foot) {\n      const footShapeDef = b2DefaultShapeDef();\n      footShapeDef.density = 1;\n      footShapeDef.friction = 0.2;\n      footShapeDef.filter.groupIndex = -this.groupIndex;\n      footShapeDef.filter.maskBits = 1;\n      footShapeDef.customColor = this.color;\n      const footDir = boneData.foot == \"left\" ? -1 : 1;\n      const footCapsule = new b2Capsule();\n      footCapsule.center1 = new b2Vec2(footDir * -0.02 * this.m_scale, -0.175 * this.m_scale);\n      footCapsule.center2 = new b2Vec2(footDir * 0.13 * this.m_scale, -0.175 * this.m_scale);\n      footCapsule.radius = 0.03 * this.m_scale;\n      b2CreateCapsuleShape(bodyId, footShapeDef, footCapsule);\n    }\n    return bone;\n  }\n  createJoint(jointData) {\n    const bone = this.m_bones.find((b) => b.name === jointData.boneName);\n    const parentBone = this.m_bones[bone.parentIndex];\n    const pivot = b2Add(new b2Vec2(jointData.pivot[0] * this.m_scale, jointData.pivot[1] * this.m_scale), this.position);\n    const jointDef = new b2RevoluteJointDef();\n    jointDef.bodyIdA = parentBone.bodyId;\n    jointDef.bodyIdB = bone.bodyId;\n    jointDef.localAnchorA = b2Body_GetLocalPoint(jointDef.bodyIdA, pivot);\n    jointDef.localAnchorB = b2Body_GetLocalPoint(jointDef.bodyIdB, pivot);\n    if (jointData.limits) {\n      jointDef.enableLimit = true;\n      jointDef.lowerAngle = jointData.limits[0];\n      jointDef.upperAngle = jointData.limits[1];\n    }\n    jointDef.enableMotor = true;\n    jointDef.maxMotorTorque = bone.frictionScale * this.maxTorque;\n    jointDef.enableSpring = this.hertz > 0;\n    jointDef.hertz = this.hertz;\n    jointDef.dampingRatio = this.dampingRatio;\n    jointDef.drawSize = this.jointDrawSize;\n    return b2CreateRevoluteJoint(this.worldId, jointDef);\n  }\n  create() {\n    this.m_bones = this.skeleton.BONE_DATA.map((boneData) => this.createBone(boneData));\n    this.skeleton.JOINT_DATA.forEach((jointData) => {\n      const bone = this.m_bones.find((b) => b.name === jointData.boneName);\n      bone.jointId = this.createJoint(jointData);\n    });\n    this.m_bones.forEach((bone) => b2Body_SetUserData(bone.bodyId, this));\n    return this;\n  }\n  destroy() {\n    for (let i = 0; i < this.m_bones.length; ++i) {\n      if (this.m_bones[i].jointId) {\n        if (this.m_bones[i].jointId.index1 - 1 != B2_NULL_INDEX) {\n          b2DestroyJoint(this.m_bones[i].jointId);\n          this.m_bones[i].jointId = new b2JointId();\n        }\n      }\n    }\n    for (let i = 0; i < this.m_bones.length; ++i) {\n      if (this.m_bones[i].bodyId.index1 - 1 != B2_NULL_INDEX) {\n        b2DestroyBody(this.m_bones[i].bodyId);\n        this.m_bones[i].bodyId = null;\n      }\n    }\n    this.m_bones = null;\n  }\n};\n\n// src/main.js\nvar DYNAMIC = 2;\n\n// src/physics.js\nfunction setIfDef(obj, prop, value) {\n  if (value !== void 0) {\n    obj[prop] = value;\n    return true;\n  }\n  return false;\n}\nvar WorldSprites = /* @__PURE__ */ new Map();\nvar SCALE = 30;\nfunction SetWorldScale(scale) {\n  SCALE = scale;\n}\nfunction GetWorldScale() {\n  return SCALE;\n}\nfunction mpx(meters) {\n  return meters * SCALE;\n}\nfunction pxm(pixels) {\n  return pixels / SCALE;\n}\nfunction pxmVec2(x, y) {\n  return new b2Vec2(x / SCALE, y / SCALE);\n}\nfunction RotFromRad(radians) {\n  return new b2Rot(Math.cos(-radians), Math.sin(-radians));\n}\nfunction AddSpriteToWorld(worldId, sprite, body) {\n  if (!WorldSprites.has(worldId)) {\n    WorldSprites.set(worldId, /* @__PURE__ */ new Map());\n  }\n  WorldSprites.get(worldId).set(sprite, body);\n}\nfunction RemoveSpriteFromWorld(worldId, sprite, destroyBody = false) {\n  if (WorldSprites.has(worldId)) {\n    const worldMap = WorldSprites.get(worldId);\n    const body = worldMap.get(sprite);\n    if (body && destroyBody) {\n      const bodyId = body.bodyId;\n      b2DestroyBody(bodyId);\n    }\n    worldMap.delete(sprite);\n  }\n}\nfunction ClearWorldSprites(worldId) {\n  if (WorldSprites.has(worldId)) {\n    WorldSprites.get(worldId).clear();\n  }\n}\nfunction GetBodyFromSprite(worldId, sprite) {\n  if (WorldSprites.has(worldId)) {\n    return WorldSprites.get(worldId).get(sprite);\n  }\n  return null;\n}\nfunction UpdateWorldSprites(worldId) {\n  if (WorldSprites.has(worldId)) {\n    WorldSprites.get(worldId).forEach((body, sprite) => {\n      BodyToSprite(body, sprite);\n    });\n  }\n}\nfunction BodyToSprite(body, sprite) {\n  const t = b2Body_GetTransform(body.bodyId);\n  sprite.x = t.p.x * SCALE;\n  sprite.y = -(t.p.y * SCALE);\n  sprite.rotation = -Math.atan2(t.q.s, t.q.c);\n}\nfunction SpriteToBox(worldId, sprite, data) {\n  const scaleX = sprite?.scaleX || sprite?.scale?.x || 1;\n  const scaleY = sprite?.scaleY || sprite?.scale?.y || 1;\n  const props = {\n    worldId,\n    type: DYNAMIC,\n    size: pxmVec2(sprite.width * scaleX / 2, sprite.height * scaleY / 2)\n  };\n  const body = CreateBoxPolygon({ ...props, ...data });\n  b2Body_SetTransform(\n    body.bodyId,\n    pxmVec2(sprite.x, -sprite.y),\n    RotFromRad(sprite.rotation)\n  );\n  return body;\n}\nfunction SpriteToCircle(worldId, sprite, data) {\n  const scaleX = sprite?.scaleX || sprite?.scale?.x || 1;\n  const scaleY = sprite?.scaleY || sprite?.scale?.y || 1;\n  const props = {\n    worldId,\n    type: DYNAMIC,\n    size: pxmVec2(sprite.width * scaleX / 2, sprite.height * scaleY / 2)\n  };\n  const body = CreateCircle({ ...props, ...data });\n  b2Body_SetTransform(\n    body.bodyId,\n    pxmVec2(sprite.x, -sprite.y),\n    RotFromRad(sprite.rotation)\n  );\n  return body;\n}\nfunction CreateWorld(data) {\n  let worldDef = data.worldDef;\n  if (!worldDef) {\n    worldDef = b2DefaultWorldDef();\n  }\n  b2CreateWorldArray();\n  const worldId = b2CreateWorld(worldDef);\n  return { worldId };\n}\nvar _accumulator = 0;\nfunction WorldStep(data) {\n  let fixedTimeStep = data.fixedTimeStep;\n  if (!fixedTimeStep) {\n    fixedTimeStep = 1 / 60;\n  }\n  let subStepCount = data.subStepCount;\n  if (!subStepCount) {\n    subStepCount = 4;\n  }\n  const borrowedTime = fixedTimeStep * 2;\n  _accumulator = Math.min(_accumulator + data.deltaTime, fixedTimeStep + borrowedTime);\n  const catchUpMax = 2;\n  let c2 = catchUpMax;\n  if (data.deltaTime > fixedTimeStep) {\n    c2 = 0;\n  }\n  let totalTime = 0;\n  while (_accumulator >= fixedTimeStep && c2-- >= 0 && totalTime < fixedTimeStep) {\n    const start = performance.now();\n    b2World_Step(data.worldId, fixedTimeStep, subStepCount);\n    const end = performance.now();\n    totalTime = (end - start) / 1e3;\n    _accumulator -= fixedTimeStep;\n  }\n  return totalTime;\n}\nfunction CreateChain(data) {\n  const chainSpacing = b2Distance(data.firstLinkPosition, data.lastLinkPosition) / data.chainLinks;\n  const type = data.type !== void 0 ? data.type : b2BodyType.b2_dynamicBody;\n  const density = data.density !== void 0 ? data.density : 1;\n  const friction = data.friction !== void 0 ? data.friction : 0.5;\n  const color = data.color !== void 0 ? data.color : b2HexColor.b2_colorGold;\n  const radius = data.radius !== void 0 ? data.radius : 0.5;\n  var lastLink = null;\n  var position = b2Add(data.firstLinkPosition, new b2Vec2(data.linkLength, 0));\n  const listLinks = [];\n  for (let i = 0; i < data.chainLinks; i++) {\n    const link = CreateCapsule({ worldId: data.worldId, type, position, center1: new b2Vec2(-data.linkLength / 2 + data.radius, 0), center2: new b2Vec2(data.linkLength / 2 - data.radius, 0), radius, density, friction, groupIndex: -1, color });\n    listLinks.push(link);\n    if (i == 0) {\n      if (data.fixEnds) {\n        CreateRevoluteJoint({\n          worldId: data.worldId,\n          bodyIdA: data.groundId,\n          bodyIdB: link.bodyId,\n          anchorA: data.firstLinkPosition,\n          anchorB: new b2Vec2(-data.linkLength / 2, 0)\n        });\n      }\n    } else {\n      CreateRevoluteJoint({\n        worldId: data.worldId,\n        bodyIdA: lastLink.bodyId,\n        bodyIdB: link.bodyId,\n        anchorA: new b2Vec2(data.linkLength / 2, 0),\n        anchorB: new b2Vec2(-data.linkLength / 2, 0)\n      });\n    }\n    lastLink = link;\n    position = b2Add(position, new b2Vec2(chainSpacing, 0));\n  }\n  if (data.fixEnds) {\n    CreateRevoluteJoint({\n      worldId: data.worldId,\n      bodyIdA: data.groundId,\n      bodyIdB: lastLink.bodyId,\n      anchorA: data.lastLinkPosition,\n      anchorB: new b2Vec2(data.linkLength / 2, 0)\n    });\n  }\n  return listLinks;\n}\nfunction CreateCircle(data) {\n  let bodyDef = data.bodyDef;\n  if (!bodyDef) {\n    bodyDef = b2DefaultBodyDef();\n  }\n  setIfDef(bodyDef, \"type\", data.type);\n  setIfDef(bodyDef, \"position\", data.position);\n  let bodyId = data.bodyId;\n  if (!bodyId) {\n    bodyId = b2CreateBody(data.worldId, bodyDef);\n  }\n  let shapeDef = data.shapeDef;\n  if (!shapeDef) {\n    shapeDef = b2DefaultShapeDef();\n  }\n  setIfDef(shapeDef, \"density\", data.density);\n  setIfDef(shapeDef, \"friction\", data.friction);\n  setIfDef(shapeDef.filter, \"groupIndex\", data.groupIndex);\n  setIfDef(shapeDef.filter, \"categoryBits\", data.categoryBits);\n  setIfDef(shapeDef.filter, \"maskBits\", data.maskBits);\n  setIfDef(shapeDef, \"customColor\", data.color);\n  setIfDef(shapeDef, \"enablePreSolveEvents\", data.preSolve);\n  setIfDef(shapeDef, \"isSensor\", data.isSensor);\n  setIfDef(shapeDef, \"restitution\", data.restitution);\n  const ball = new b2Circle();\n  setIfDef(ball, \"radius\", data.radius);\n  if (data.bodyId) {\n    setIfDef(ball, \"center\", data.offset);\n  }\n  const shapeId = b2CreateCircleShape(bodyId, shapeDef, ball);\n  return { bodyId, shapeId, object: ball };\n}\nfunction CreateCapsule(data) {\n  let bodyDef = data.bodyDef;\n  if (!bodyDef) {\n    bodyDef = b2DefaultBodyDef();\n  }\n  setIfDef(bodyDef, \"type\", data.type);\n  setIfDef(bodyDef, \"position\", data.position);\n  setIfDef(bodyDef, \"fixedRotation\", data.fixedRotation);\n  setIfDef(bodyDef, \"linearDamping\", data.linearDamping);\n  let bodyId = data.bodyId;\n  if (!bodyId) {\n    bodyId = b2CreateBody(data.worldId, bodyDef);\n  }\n  let shapeDef = data.shapeDef;\n  if (!shapeDef) {\n    shapeDef = b2DefaultShapeDef();\n  }\n  setIfDef(shapeDef, \"density\", data.density);\n  setIfDef(shapeDef, \"friction\", data.friction);\n  setIfDef(shapeDef.filter, \"groupIndex\", data.groupIndex);\n  setIfDef(shapeDef.filter, \"categoryBits\", data.categoryBits);\n  setIfDef(shapeDef.filter, \"maskBits\", data.maskBits);\n  setIfDef(shapeDef, \"customColor\", data.color);\n  const capsule = new b2Capsule();\n  if (data.width) {\n    data.radius = data.width / 2;\n  }\n  if (data.height) {\n    data.radius = Math.min(data.radius, data.height / 2);\n    data.center1 = new b2Vec2(0, -(data.height / 2));\n    data.center2 = new b2Vec2(0, data.height / 2);\n  }\n  setIfDef(capsule, \"center1\", data.center1);\n  setIfDef(capsule, \"center2\", data.center2);\n  setIfDef(capsule, \"radius\", data.radius);\n  const shapeId = b2CreateCapsuleShape(bodyId, shapeDef, capsule);\n  return { bodyId, shapeId, object: capsule };\n}\nfunction CreateBoxPolygon(data) {\n  let bodyDef = data.bodyDef;\n  if (!bodyDef) {\n    bodyDef = b2DefaultBodyDef();\n  }\n  setIfDef(bodyDef, \"type\", data.type);\n  setIfDef(bodyDef, \"position\", data.position);\n  setIfDef(bodyDef, \"fixedRotation\", data.fixedRotation);\n  setIfDef(bodyDef, \"linearDamping\", data.linearDamping);\n  setIfDef(bodyDef, \"angularDamping\", data.angularDamping);\n  let bodyId = data.bodyId;\n  if (!bodyId) {\n    bodyId = b2CreateBody(data.worldId, bodyDef);\n  }\n  let shapeDef = data.shapeDef;\n  if (!shapeDef) {\n    shapeDef = b2DefaultShapeDef();\n  }\n  const userData = data.userData;\n  if (userData) {\n    b2Body_SetUserData(bodyId, data.userData);\n  }\n  setIfDef(shapeDef, \"density\", data.density);\n  setIfDef(shapeDef, \"friction\", data.friction);\n  setIfDef(shapeDef, \"restitution\", data.restitution);\n  setIfDef(shapeDef.filter, \"groupIndex\", data.groupIndex);\n  setIfDef(shapeDef.filter, \"categoryBits\", data.categoryBits);\n  setIfDef(shapeDef.filter, \"maskBits\", data.maskBits);\n  setIfDef(shapeDef, \"customColor\", data.color);\n  setIfDef(shapeDef, \"enablePreSolveEvents\", data.preSolve);\n  let box;\n  if (data.size instanceof b2Vec2) {\n    if (data.bodyId) {\n      box = b2MakeOffsetBox(data.size.x, data.size.y, data.position, 0);\n    } else {\n      box = b2MakeBox(data.size.x, data.size.y);\n    }\n  } else {\n    box = b2MakeBox(data.size, data.size);\n  }\n  const shapeId = b2CreatePolygonShape(bodyId, shapeDef, box);\n  return { bodyId, shapeId, object: box };\n}\nfunction CreateNGonPolygon(data) {\n  if (data.sides < 3 || data.sides > B2_MAX_POLYGON_VERTICES) {\n    return null;\n  }\n  const bodyDef = data.bodyDef || b2DefaultBodyDef();\n  setIfDef(bodyDef, \"type\", data.type);\n  setIfDef(bodyDef, \"position\", data.position);\n  let bodyId = data.bodyId;\n  if (!bodyId) {\n    bodyId = b2CreateBody(data.worldId, bodyDef);\n  }\n  const shapeDef = data.shapeDef || b2DefaultShapeDef();\n  setIfDef(shapeDef, \"density\", data.density);\n  setIfDef(shapeDef, \"friction\", data.friction);\n  setIfDef(shapeDef.filter, \"groupIndex\", data.groupIndex);\n  setIfDef(shapeDef, \"customColor\", data.color);\n  const vertices = [];\n  const angleStep = 2 * Math.PI / data.sides;\n  for (let i = 0; i < data.sides; i++) {\n    const angle = i * angleStep;\n    const x = data.radius * Math.cos(angle);\n    const y = data.radius * Math.sin(angle);\n    vertices.push(new b2Vec2(x, y));\n  }\n  let nGon;\n  const hull = b2ComputeHull(vertices, data.sides);\n  if (data.bodyId != null) {\n    const oldxf = b2GetBodyTransform(data.worldId, data.bodyId);\n    const xf2 = new b2Transform(data.position, oldxf.q);\n    nGon = b2MakeOffsetPolygon(hull, 0, xf2);\n  } else {\n    nGon = b2MakePolygon(hull, 0);\n  }\n  const shapeId = b2CreatePolygonShape(bodyId, shapeDef, nGon);\n  return { bodyId, shapeId, object: nGon };\n}\nfunction CreatePolygon(data) {\n  if (data.vertices.length < 3 || data.vertices.length > B2_MAX_POLYGON_VERTICES) {\n    return null;\n  }\n  const bodyDef = data.bodyDef || b2DefaultBodyDef();\n  setIfDef(bodyDef, \"type\", data.type);\n  setIfDef(bodyDef, \"position\", data.position);\n  let bodyId = data.bodyId;\n  if (!bodyId) {\n    bodyId = b2CreateBody(data.worldId, bodyDef);\n  }\n  const shapeDef = data.shapeDef || b2DefaultShapeDef();\n  setIfDef(shapeDef, \"density\", data.density);\n  setIfDef(shapeDef, \"friction\", data.friction);\n  setIfDef(shapeDef.filter, \"groupIndex\", data.groupIndex);\n  setIfDef(shapeDef, \"customColor\", data.color);\n  let nGon;\n  const hull = b2ComputeHull(data.vertices, data.vertices.length);\n  if (data.bodyId != null) {\n    const oldxf = b2GetBodyTransform(data.worldId, data.bodyId);\n    const xf2 = new b2Transform(data.position, oldxf.q);\n    nGon = b2MakeOffsetPolygon(hull, 0, xf2);\n  } else {\n    nGon = b2MakePolygon(hull, 0);\n  }\n  const shapeId = b2CreatePolygonShape(bodyId, shapeDef, nGon);\n  return { bodyId, shapeId, object: nGon };\n}\nfunction CreatePolygonFromEarcut(data) {\n  if (data.vertices.length < 3) {\n    return null;\n  }\n  const bodyDef = data.bodyDef || b2DefaultBodyDef();\n  setIfDef(bodyDef, \"type\", data.type);\n  setIfDef(bodyDef, \"position\", data.position);\n  const shapeDef = data.shapeDef || b2DefaultShapeDef();\n  setIfDef(shapeDef, \"density\", data.density);\n  setIfDef(shapeDef, \"friction\", data.friction);\n  setIfDef(shapeDef, \"restitution\", data.restitution);\n  setIfDef(shapeDef.filter, \"groupIndex\", data.groupIndex);\n  setIfDef(shapeDef, \"customColor\", data.color);\n  const parts = [];\n  let scale = data.vertexScale;\n  if (!scale) {\n    scale = new b2Vec2(1, 1);\n  }\n  let offset = data.vertexOffset;\n  if (!offset) {\n    offset = new b2Vec2(0, 0);\n  }\n  for (let i = 0, l = data.indices[0].length; i < l; i += 3) {\n    const part = [];\n    for (let j = 0; j < 3; j++) {\n      const index = data.indices[0][i + j] * 2;\n      part.push(new b2Vec2((data.vertices[index] + offset.x) * scale.x, (data.vertices[index + 1] + offset.y) * scale.y));\n    }\n    parts.push(part);\n  }\n  let body = null;\n  parts.forEach((part) => {\n    if (!body) {\n      body = CreatePolygon({\n        worldId: data.worldId,\n        type: b2BodyType.b2_dynamicBody,\n        bodyDef,\n        // position: position,\n        vertices: part,\n        density: 1,\n        friction: 0.3,\n        color: b2HexColor.b2_colorSkyBlue\n      });\n    } else {\n      const hull = b2ComputeHull(part, part.length);\n      const nGon = b2MakePolygon(hull, 0);\n      b2CreatePolygonShape(body.bodyId, shapeDef, nGon);\n    }\n  });\n}\nfunction CreatePolygonFromVertices(data) {\n  if (data.vertices.length < 3) {\n    return null;\n  }\n  const bodyDef = data.bodyDef || b2DefaultBodyDef();\n  setIfDef(bodyDef, \"type\", data.type);\n  setIfDef(bodyDef, \"position\", data.position);\n  const shapeDef = data.shapeDef || b2DefaultShapeDef();\n  setIfDef(shapeDef, \"density\", data.density);\n  setIfDef(shapeDef, \"friction\", data.friction);\n  setIfDef(shapeDef, \"restitution\", data.restitution);\n  setIfDef(shapeDef.filter, \"groupIndex\", data.groupIndex);\n  setIfDef(shapeDef, \"customColor\", data.color);\n  let scale = data.vertexScale;\n  if (!scale) {\n    scale = new b2Vec2(1, 1);\n  }\n  let offset = data.vertexOffset;\n  if (!offset) {\n    offset = new b2Vec2(0, 0);\n  }\n  const parts = [];\n  for (let i = 0, l = data.indices.length; i < l; i++) {\n    const part = [];\n    const indices = data.indices[i];\n    for (let p4 = 0, pl = indices.length; p4 < pl; p4++) {\n      const index = indices[p4] * 2;\n      part.push(new b2Vec2((data.vertices[index] + offset.x) * scale.x, (data.vertices[index + 1] + offset.y) * scale.y));\n    }\n    parts.push(part);\n  }\n  let body = null;\n  parts.forEach((part) => {\n    if (!body) {\n      body = CreatePolygon({\n        worldId: data.worldId,\n        type: b2BodyType.b2_dynamicBody,\n        bodyDef,\n        // position: position,\n        vertices: part,\n        density: 1,\n        friction: 0.3,\n        color: b2HexColor.b2_colorSkyBlue\n      });\n    } else {\n      const hull = b2ComputeHull(part, part.length);\n      const nGon = b2MakePolygon(hull, 0);\n      b2CreatePolygonShape(body.bodyId, shapeDef, nGon);\n    }\n  });\n}\nfunction CreatePhysicsEditorShape(data) {\n  const key = data.key;\n  const url = data.url;\n  async function loadXMLFromFile(url2) {\n    try {\n      const response = await fetch(url2);\n      const xmlText = await response.text();\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, \"text/xml\");\n      return xmlDoc;\n    } catch (error) {\n      throw error;\n    }\n  }\n  function extractPolygons(key2, xmlDoc) {\n    const polygonElements = xmlDoc.querySelectorAll(`body[name=${key2}] fixtures polygon`);\n    const uniqueVertices = [];\n    const polygonIndices = [];\n    function getVertexIndex(x, y) {\n      const epsilon = 1e-6;\n      const last = uniqueVertices.length;\n      for (let i = 0; i < last; i += 2) {\n        if (Math.abs(uniqueVertices[i] - x) < epsilon && Math.abs(uniqueVertices[i + 1] - y) < epsilon) {\n          return i / 2;\n        }\n      }\n      uniqueVertices.push(x, y);\n      return last / 2;\n    }\n    Array.from(polygonElements).forEach((polygon) => {\n      const numbers = polygon.textContent.trim().split(/[,\\s]+/).map(Number);\n      const polygonIndexList = [];\n      for (let i = 0; i < numbers.length; i += 2) {\n        const vertexIndex = getVertexIndex(numbers[i], numbers[i + 1]);\n        polygonIndexList.push(vertexIndex);\n      }\n      polygonIndices.push(polygonIndexList);\n    });\n    return {\n      vertices: uniqueVertices,\n      // a flat array of x,y coordinates\n      indices: polygonIndices\n      // an array of index arrays, one per polygon\n    };\n  }\n  function createPolygons(polygons) {\n    return CreatePolygonFromVertices({\n      ...data,\n      indices: polygons.indices,\n      vertices: polygons.vertices\n    });\n  }\n  return new Promise(async (resolve, reject) => {\n    try {\n      const xmlDoc = await loadXMLFromFile(url);\n      const polygons = extractPolygons(key, xmlDoc);\n      const result = createPolygons(polygons);\n      resolve(result);\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\nfunction CreateRevoluteJoint(data) {\n  let jointDef = data.jointDef;\n  if (!jointDef) {\n    jointDef = new b2RevoluteJointDef();\n  }\n  jointDef.bodyIdA = data.bodyIdA;\n  jointDef.bodyIdB = data.bodyIdB;\n  setIfDef(jointDef, \"localAnchorA\", data.anchorA);\n  setIfDef(jointDef, \"localAnchorB\", data.anchorB);\n  setIfDef(jointDef, \"lowerAngle\", data.lowerAngle);\n  setIfDef(jointDef, \"upperAngle\", data.upperAngle);\n  setIfDef(jointDef, \"enableLimit\", data.enableLimit);\n  setIfDef(jointDef, \"enableMotor\", data.enableMotor);\n  setIfDef(jointDef, \"motorSpeed\", data.motorSpeed);\n  setIfDef(jointDef, \"maxMotorTorque\", data.maxMotorTorque);\n  setIfDef(jointDef, \"enableSpring\", data.enableSpring);\n  setIfDef(jointDef, \"hertz\", data.hertz);\n  setIfDef(jointDef, \"dampingRatio\", data.dampingRatio);\n  setIfDef(jointDef, \"collideConnected\", data.collideConnected);\n  setIfDef(jointDef, \"drawSize\", data.drawSize);\n  const jointId = b2CreateRevoluteJoint(data.worldId, jointDef);\n  return { jointId };\n}\nfunction CreateWeldJoint(data) {\n  let jointDef = data.jointDef;\n  if (!jointDef) {\n    jointDef = new b2WeldJointDef();\n  }\n  jointDef.bodyIdA = data.bodyIdA;\n  jointDef.bodyIdB = data.bodyIdB;\n  setIfDef(jointDef, \"localAnchorA\", data.anchorA);\n  setIfDef(jointDef, \"localAnchorB\", data.anchorB);\n  const rotA = b2Body_GetRotation(data.bodyIdA);\n  const rotB = b2Body_GetRotation(data.bodyIdB);\n  jointDef.referenceAngle = b2RelativeAngle(rotB, rotA);\n  setIfDef(jointDef, \"referenceAngle\", data.referenceAngle);\n  setIfDef(jointDef, \"angularHertz\", data.hertz);\n  setIfDef(jointDef, \"angularDampingRatio\", data.dampingRatio);\n  setIfDef(jointDef, \"collideConnected\", data.collideConnected);\n  const jointId = b2CreateWeldJoint(data.worldId, jointDef);\n  return { jointId };\n}\nfunction CreateDistanceJoint(data) {\n  let jointDef = data.jointDef;\n  if (!jointDef) {\n    jointDef = new b2DistanceJointDef();\n  }\n  jointDef.bodyIdA = data.bodyIdA;\n  jointDef.bodyIdB = data.bodyIdB;\n  setIfDef(jointDef, \"localAnchorA\", data.anchorA);\n  setIfDef(jointDef, \"localAnchorB\", data.anchorB);\n  setIfDef(jointDef, \"length\", data.length);\n  setIfDef(jointDef, \"minLength\", data.minLength);\n  setIfDef(jointDef, \"maxLength\", data.maxLength);\n  setIfDef(jointDef, \"enableSpring\", data.enableSpring);\n  setIfDef(jointDef, \"hertz\", data.hertz);\n  setIfDef(jointDef, \"dampingRatio\", data.dampingRatio);\n  setIfDef(jointDef, \"enableLimit\", data.enableLimit);\n  setIfDef(jointDef, \"collideConnected\", data.collideConnected);\n  const jointId = b2CreateDistanceJoint(data.worldId, jointDef);\n  return { jointId };\n}\nfunction CreateWheelJoint(data) {\n  let jointDef = data.jointDef;\n  if (!jointDef) {\n    jointDef = new b2WheelJointDef();\n  }\n  jointDef.bodyIdA = data.bodyIdA;\n  jointDef.bodyIdB = data.bodyIdB;\n  setIfDef(jointDef, \"localAnchorA\", data.anchorA);\n  setIfDef(jointDef, \"localAnchorB\", data.anchorB);\n  setIfDef(jointDef, \"enableSpring\", data.enableSpring);\n  setIfDef(jointDef, \"localAxisA\", data.axis);\n  setIfDef(jointDef, \"hertz\", data.hertz);\n  setIfDef(jointDef, \"dampingRatio\", data.dampingRatio);\n  setIfDef(jointDef, \"enableLimit\", data.enableLimit);\n  setIfDef(jointDef, \"lowerTranslation\", data.lowerTranslation);\n  setIfDef(jointDef, \"upperTranslation\", data.upperTranslation);\n  setIfDef(jointDef, \"enableMotor\", data.enableMotor);\n  setIfDef(jointDef, \"maxMotorTorque\", data.maxMotorTorque);\n  setIfDef(jointDef, \"motorSpeed\", data.motorSpeed);\n  setIfDef(jointDef, \"collideConnected\", data.collideConnected);\n  const jointId = b2CreateWheelJoint(data.worldId, jointDef);\n  return { jointId };\n}\nfunction CreatePrismaticJoint(data) {\n  let jointDef = data.jointDef;\n  if (!jointDef) {\n    jointDef = new b2PrismaticJointDef();\n  }\n  jointDef.bodyIdA = data.bodyIdA;\n  jointDef.bodyIdB = data.bodyIdB;\n  setIfDef(jointDef, \"localAnchorA\", data.anchorA);\n  setIfDef(jointDef, \"localAnchorB\", data.anchorB);\n  setIfDef(jointDef, \"localAxisA\", data.axis);\n  setIfDef(jointDef, \"referenceAngle\", data.referenceAngle);\n  setIfDef(jointDef, \"enableSpring\", data.enableSpring);\n  setIfDef(jointDef, \"hertz\", data.hertz);\n  setIfDef(jointDef, \"dampingRatio\", data.dampingRatio);\n  setIfDef(jointDef, \"enableLimit\", data.enableLimit);\n  setIfDef(jointDef, \"lowerTranslation\", data.lowerTranslation);\n  setIfDef(jointDef, \"upperTranslation\", data.upperTranslation);\n  setIfDef(jointDef, \"enableMotor\", data.enableMotor);\n  setIfDef(jointDef, \"maxMotorForce\", data.maxMotorForce);\n  setIfDef(jointDef, \"motorSpeed\", data.motorSpeed);\n  setIfDef(jointDef, \"collideConnected\", data.collideConnected);\n  const jointId = b2CreatePrismaticJoint(data.worldId, jointDef);\n  return { jointId };\n}\nfunction CreateMotorJoint(data) {\n  let jointDef = data.jointDef;\n  if (!jointDef) {\n    jointDef = new b2MotorJointDef();\n  }\n  jointDef.bodyIdA = data.bodyIdA;\n  jointDef.bodyIdB = data.bodyIdB;\n  setIfDef(jointDef, \"linearOffset\", data.linearOffset);\n  setIfDef(jointDef, \"maxForce\", data.maxForce);\n  setIfDef(jointDef, \"angularOffset\", data.angularOffset);\n  setIfDef(jointDef, \"maxTorque\", data.maxTorque);\n  setIfDef(jointDef, \"correctionFactor\", data.correctionFactor);\n  setIfDef(jointDef, \"collideConnected\", data.collideConnected);\n  const jointId = b2CreateMotorJoint(data.worldId, jointDef);\n  return { jointId };\n}\nfunction CreateMouseJoint(data) {\n  let jointDef = data.jointDef;\n  if (!jointDef) {\n    jointDef = new b2MouseJointDef();\n  }\n  jointDef.bodyIdA = data.bodyIdA;\n  jointDef.bodyIdB = data.bodyIdB;\n  setIfDef(jointDef, \"target\", data.target);\n  setIfDef(jointDef, \"hertz\", data.hertz);\n  setIfDef(jointDef, \"dampingRatio\", data.dampingRatio);\n  setIfDef(jointDef, \"maxForce\", data.maxForce);\n  setIfDef(jointDef, \"collideConnected\", data.collideConnected);\n  const jointId = b2CreateMouseJoint(data.worldId, jointDef);\n  return { jointId };\n}\n\n// src/main-prod.js\nvar STATIC = 0;\nvar KINEMATIC = 1;\nvar DYNAMIC2 = 2;\nexport {\n  AddSpriteToWorld,\n  B2_ID_EQUALS,\n  B2_IS_NON_NULL,\n  B2_IS_NULL,\n  B2_NULL_INDEX,\n  BodyToSprite,\n  ClearWorldSprites,\n  CreateBoxPolygon,\n  CreateCapsule,\n  CreateChain,\n  CreateCircle,\n  CreateDistanceJoint,\n  CreateMotorJoint,\n  CreateMouseJoint,\n  CreateNGonPolygon,\n  CreatePhysicsEditorShape,\n  CreatePolygon,\n  CreatePolygonFromEarcut,\n  CreatePolygonFromVertices,\n  CreatePrismaticJoint,\n  CreateRevoluteJoint,\n  CreateWeldJoint,\n  CreateWheelJoint,\n  CreateWorld,\n  DYNAMIC2 as DYNAMIC,\n  GetBodyFromSprite,\n  GetWorldScale,\n  KINEMATIC,\n  Ragdoll,\n  RemoveSpriteFromWorld,\n  RotFromRad,\n  STATIC,\n  SetWorldScale,\n  Skeletons,\n  SpriteToBox,\n  SpriteToCircle,\n  UpdateWorldSprites,\n  WorldStep,\n  b2AABB,\n  b2AABB_Center,\n  b2AABB_Contains,\n  b2AABB_Extents,\n  b2AABB_IsValid,\n  b2AABB_Union,\n  b2Abs,\n  b2AbsFloat,\n  b2AbsInt,\n  b2Add,\n  b2BodyDef,\n  b2BodyEvents,\n  b2BodyId,\n  b2BodyType,\n  b2Body_ApplyAngularImpulse,\n  b2Body_ApplyForce,\n  b2Body_ApplyForceToCenter,\n  b2Body_ApplyLinearImpulse,\n  b2Body_ApplyLinearImpulseToCenter,\n  b2Body_ApplyMassFromShapes,\n  b2Body_ApplyTorque,\n  b2Body_ComputeAABB,\n  b2Body_Disable,\n  b2Body_Enable,\n  b2Body_EnableHitEvents,\n  b2Body_EnableSleep,\n  b2Body_GetAngularDamping,\n  b2Body_GetAngularVelocity,\n  b2Body_GetContactCapacity,\n  b2Body_GetContactData,\n  b2Body_GetGravityScale,\n  b2Body_GetInertiaTensor,\n  b2Body_GetJointCount,\n  b2Body_GetJoints,\n  b2Body_GetLinearDamping,\n  b2Body_GetLinearVelocity,\n  b2Body_GetLocalCenterOfMass,\n  b2Body_GetLocalPoint,\n  b2Body_GetLocalVector,\n  b2Body_GetMass,\n  b2Body_GetMassData,\n  b2Body_GetPosition,\n  b2Body_GetRotation,\n  b2Body_GetShapeCount,\n  b2Body_GetShapes,\n  b2Body_GetSleepThreshold,\n  b2Body_GetTransform,\n  b2Body_GetType,\n  b2Body_GetUserData,\n  b2Body_GetWorldCenterOfMass,\n  b2Body_GetWorldPoint,\n  b2Body_GetWorldVector,\n  b2Body_IsAwake,\n  b2Body_IsBullet,\n  b2Body_IsEnabled,\n  b2Body_IsFixedRotation,\n  b2Body_IsSleepEnabled,\n  b2Body_IsValid,\n  b2Body_SetAngularDamping,\n  b2Body_SetAngularVelocity,\n  b2Body_SetAwake,\n  b2Body_SetBullet,\n  b2Body_SetFixedRotation,\n  b2Body_SetGravityScale,\n  b2Body_SetLinearDamping,\n  b2Body_SetLinearVelocity,\n  b2Body_SetMassData,\n  b2Body_SetSleepThreshold,\n  b2Body_SetTransform,\n  b2Body_SetType,\n  b2Body_SetUserData,\n  b2Capsule,\n  b2CastOutput,\n  b2ChainDef,\n  b2ChainId,\n  b2ChainSegment,\n  b2Chain_IsValid,\n  b2Chain_SetFriction,\n  b2Chain_SetRestitution,\n  b2Circle,\n  b2Clamp,\n  b2ClampFloat,\n  b2ClampInt,\n  b2CollideCapsuleAndCircle,\n  b2CollideCapsules,\n  b2CollideChainSegmentAndCapsule,\n  b2CollideChainSegmentAndCircle,\n  b2CollideChainSegmentAndPolygon,\n  b2CollideCircles,\n  b2CollidePolygonAndCapsule,\n  b2CollidePolygonAndCircle,\n  b2CollidePolygons,\n  b2CollideSegmentAndCapsule,\n  b2CollideSegmentAndCircle,\n  b2CollideSegmentAndPolygon,\n  b2ComputeAngularVelocity,\n  b2ComputeCapsuleAABB,\n  b2ComputeCapsuleMass,\n  b2ComputeCircleAABB,\n  b2ComputeCircleMass,\n  b2ComputeHull,\n  b2ComputePolygonAABB,\n  b2ComputePolygonMass,\n  b2ComputeSegmentAABB,\n  b2ContactData,\n  b2ContactEvents,\n  b2CreateBody,\n  b2CreateCapsuleShape,\n  b2CreateChain,\n  b2CreateCircleShape,\n  b2CreateDistanceJoint,\n  b2CreateMotorJoint,\n  b2CreateMouseJoint,\n  b2CreatePolygonShape,\n  b2CreatePrismaticJoint,\n  b2CreateRevoluteJoint,\n  b2CreateSegmentShape,\n  b2CreateTimer,\n  b2CreateWeldJoint,\n  b2CreateWheelJoint,\n  b2CreateWorld,\n  b2CreateWorldArray,\n  b2Cross,\n  b2CrossSV,\n  b2CrossVS,\n  b2DebugDraw,\n  b2DefaultBodyDef,\n  b2DefaultChainDef,\n  b2DefaultDistanceJointDef,\n  b2DefaultFilter,\n  b2DefaultMotorJointDef,\n  b2DefaultMouseJointDef,\n  b2DefaultPrismaticJointDef,\n  b2DefaultQueryFilter,\n  b2DefaultRevoluteJointDef,\n  b2DefaultShapeDef,\n  b2DefaultWeldJointDef,\n  b2DefaultWheelJointDef,\n  b2DefaultWorldDef,\n  b2DestroyBody,\n  b2DestroyChain,\n  b2DestroyJoint,\n  b2DestroyShape,\n  b2DestroyWorld,\n  b2Distance,\n  b2DistanceCache,\n  b2DistanceInput,\n  b2DistanceJointDef,\n  b2DistanceJoint_EnableLimit,\n  b2DistanceJoint_EnableMotor,\n  b2DistanceJoint_EnableSpring,\n  b2DistanceJoint_GetCurrentLength,\n  b2DistanceJoint_GetDampingRatio,\n  b2DistanceJoint_GetHertz,\n  b2DistanceJoint_GetLength,\n  b2DistanceJoint_GetMaxLength,\n  b2DistanceJoint_GetMaxMotorForce,\n  b2DistanceJoint_GetMinLength,\n  b2DistanceJoint_GetMotorForce,\n  b2DistanceJoint_GetMotorSpeed,\n  b2DistanceJoint_IsLimitEnabled,\n  b2DistanceJoint_IsMotorEnabled,\n  b2DistanceJoint_IsSpringEnabled,\n  b2DistanceJoint_SetLength,\n  b2DistanceJoint_SetLengthRange,\n  b2DistanceJoint_SetMaxMotorForce,\n  b2DistanceJoint_SetMotorSpeed,\n  b2DistanceJoint_SetSpringDampingRatio,\n  b2DistanceJoint_SetSpringHertz,\n  b2DistanceOutput,\n  b2DistanceProxy,\n  b2DistanceSquared,\n  b2Dot,\n  b2DynamicTree,\n  b2DynamicTree_Create,\n  b2DynamicTree_CreateProxy,\n  b2DynamicTree_Destroy,\n  b2DynamicTree_DestroyProxy,\n  b2DynamicTree_EnlargeProxy,\n  b2DynamicTree_GetAreaRatio,\n  b2DynamicTree_GetByteCount,\n  b2DynamicTree_GetHeight,\n  b2DynamicTree_GetMaxBalance,\n  b2DynamicTree_GetProxyCount,\n  b2DynamicTree_MoveProxy,\n  b2DynamicTree_Query,\n  b2DynamicTree_RayCast,\n  b2DynamicTree_Rebuild,\n  b2DynamicTree_RebuildBottomUp,\n  b2DynamicTree_ShapeCast,\n  b2DynamicTree_ShiftOrigin,\n  b2DynamicTree_Validate,\n  b2Filter,\n  b2GetByteCount,\n  b2GetInverse22,\n  b2GetLengthAndNormalize,\n  b2GetLengthUnitsPerMeter,\n  b2GetMilliseconds,\n  b2GetMillisecondsAndReset,\n  b2GetSweepTransform,\n  b2GetTicks,\n  b2GetVersion,\n  b2HexColor,\n  b2Hull,\n  b2IntegrateRotation,\n  b2InvMulRot,\n  b2InvMulTransforms,\n  b2InvRotateVector,\n  b2InvTransformPoint,\n  b2IsNormalized,\n  b2IsValid,\n  b2IsValidRay,\n  b2JointId,\n  b2JointType,\n  b2Joint_GetBodyA,\n  b2Joint_GetBodyB,\n  b2Joint_GetCollideConnected,\n  b2Joint_GetConstraintForce,\n  b2Joint_GetConstraintTorque,\n  b2Joint_GetLocalAnchorA,\n  b2Joint_GetLocalAnchorB,\n  b2Joint_GetType,\n  b2Joint_GetUserData,\n  b2Joint_IsValid,\n  b2Joint_SetCollideConnected,\n  b2Joint_SetUserData,\n  b2Joint_WakeBodies,\n  b2LeftPerp,\n  b2Length,\n  b2LengthSquared,\n  b2Lerp,\n  b2MakeBox,\n  b2MakeOffsetBox,\n  b2MakeOffsetPolygon,\n  b2MakePolygon,\n  b2MakeProxy,\n  b2MakeRot,\n  b2MakeRoundedBox,\n  b2MakeSquare,\n  b2Manifold,\n  b2MassData,\n  b2Max,\n  b2MaxFloat,\n  b2MaxInt,\n  b2Min,\n  b2MinFloat,\n  b2MinInt,\n  b2MotorJointDef,\n  b2MotorJoint_GetAngularOffset,\n  b2MotorJoint_GetCorrectionFactor,\n  b2MotorJoint_GetLinearOffset,\n  b2MotorJoint_GetMaxForce,\n  b2MotorJoint_GetMaxTorque,\n  b2MotorJoint_SetAngularOffset,\n  b2MotorJoint_SetCorrectionFactor,\n  b2MotorJoint_SetLinearOffset,\n  b2MotorJoint_SetMaxForce,\n  b2MotorJoint_SetMaxTorque,\n  b2MouseJointDef,\n  b2MouseJoint_GetMaxForce,\n  b2MouseJoint_GetSpringDampingRatio,\n  b2MouseJoint_GetSpringHertz,\n  b2MouseJoint_GetTarget,\n  b2MouseJoint_SetMaxForce,\n  b2MouseJoint_SetSpringDampingRatio,\n  b2MouseJoint_SetSpringHertz,\n  b2MouseJoint_SetTarget,\n  b2Mul,\n  b2MulAdd,\n  b2MulMV,\n  b2MulRot,\n  b2MulSV,\n  b2MulSub,\n  b2MulTransforms,\n  b2NLerp,\n  b2Neg,\n  b2Normalize,\n  b2NormalizeChecked,\n  b2NormalizeRot,\n  b2PointInCapsule,\n  b2PointInCircle,\n  b2PointInPolygon,\n  b2Polygon,\n  b2PrismaticJointDef,\n  b2PrismaticJoint_EnableLimit,\n  b2PrismaticJoint_EnableMotor,\n  b2PrismaticJoint_EnableSpring,\n  b2PrismaticJoint_GetLowerLimit,\n  b2PrismaticJoint_GetMaxMotorForce,\n  b2PrismaticJoint_GetMotorForce,\n  b2PrismaticJoint_GetMotorSpeed,\n  b2PrismaticJoint_GetSpringDampingRatio,\n  b2PrismaticJoint_GetSpringHertz,\n  b2PrismaticJoint_GetUpperLimit,\n  b2PrismaticJoint_IsLimitEnabled,\n  b2PrismaticJoint_IsMotorEnabled,\n  b2PrismaticJoint_IsSpringEnabled,\n  b2PrismaticJoint_SetLimits,\n  b2PrismaticJoint_SetMaxMotorForce,\n  b2PrismaticJoint_SetMotorSpeed,\n  b2PrismaticJoint_SetSpringDampingRatio,\n  b2PrismaticJoint_SetSpringHertz,\n  b2QueryFilter,\n  b2RayCastCapsule,\n  b2RayCastCircle,\n  b2RayCastInput,\n  b2RayCastPolygon,\n  b2RayCastSegment,\n  b2RayResult,\n  b2RelativeAngle,\n  b2RevoluteJointDef,\n  b2RevoluteJoint_EnableLimit,\n  b2RevoluteJoint_EnableMotor,\n  b2RevoluteJoint_EnableSpring,\n  b2RevoluteJoint_GetAngle,\n  b2RevoluteJoint_GetLowerLimit,\n  b2RevoluteJoint_GetMaxMotorTorque,\n  b2RevoluteJoint_GetMotorSpeed,\n  b2RevoluteJoint_GetMotorTorque,\n  b2RevoluteJoint_GetSpringDampingRatio,\n  b2RevoluteJoint_GetSpringHertz,\n  b2RevoluteJoint_GetUpperLimit,\n  b2RevoluteJoint_IsLimitEnabled,\n  b2RevoluteJoint_IsMotorEnabled,\n  b2RevoluteJoint_IsSpringEnabled,\n  b2RevoluteJoint_SetLimits,\n  b2RevoluteJoint_SetMaxMotorTorque,\n  b2RevoluteJoint_SetMotorSpeed,\n  b2RevoluteJoint_SetSpringDampingRatio,\n  b2RevoluteJoint_SetSpringHertz,\n  b2RightPerp,\n  b2Rot,\n  b2Rot_GetAngle,\n  b2Rot_GetXAxis,\n  b2Rot_GetYAxis,\n  b2Rot_IsValid,\n  b2RotateVector,\n  b2Segment,\n  b2SegmentDistance,\n  b2SegmentDistanceResult,\n  b2SensorEvents,\n  b2SetAllocator,\n  b2SetAssertFcn,\n  b2SetLengthUnitsPerMeter,\n  b2ShapeCast,\n  b2ShapeCastCapsule,\n  b2ShapeCastCircle,\n  b2ShapeCastInput,\n  b2ShapeCastPairInput,\n  b2ShapeCastPolygon,\n  b2ShapeCastSegment,\n  b2ShapeDef,\n  b2ShapeDistance,\n  b2ShapeId,\n  b2ShapeType,\n  b2Shape_AreContactEventsEnabled,\n  b2Shape_AreHitEventsEnabled,\n  b2Shape_ArePreSolveEventsEnabled,\n  b2Shape_AreSensorEventsEnabled,\n  b2Shape_EnableContactEvents,\n  b2Shape_EnableHitEvents,\n  b2Shape_EnablePreSolveEvents,\n  b2Shape_EnableSensorEvents,\n  b2Shape_GetAABB,\n  b2Shape_GetBody,\n  b2Shape_GetCapsule,\n  b2Shape_GetChainSegment,\n  b2Shape_GetCircle,\n  b2Shape_GetClosestPoint,\n  b2Shape_GetContactCapacity,\n  b2Shape_GetContactData,\n  b2Shape_GetDensity,\n  b2Shape_GetFilter,\n  b2Shape_GetFriction,\n  b2Shape_GetParentChain,\n  b2Shape_GetPolygon,\n  b2Shape_GetRestitution,\n  b2Shape_GetSegment,\n  b2Shape_GetType,\n  b2Shape_GetUserData,\n  b2Shape_IsSensor,\n  b2Shape_IsValid,\n  b2Shape_RayCast,\n  b2Shape_SetCapsule,\n  b2Shape_SetCircle,\n  b2Shape_SetDensity,\n  b2Shape_SetFilter,\n  b2Shape_SetFriction,\n  b2Shape_SetPolygon,\n  b2Shape_SetRestitution,\n  b2Shape_SetSegment,\n  b2Shape_SetUserData,\n  b2Shape_TestPoint,\n  b2Simplex,\n  b2SleepMilliseconds,\n  b2Solve22,\n  b2Sub,\n  b2Sweep,\n  b2TOIInput,\n  b2TOIOutput,\n  b2TimeOfImpact,\n  b2Transform,\n  b2TransformPoint,\n  b2TransformPolygon,\n  b2UnwindAngle,\n  b2ValidateHull,\n  b2Vec2,\n  b2Vec2_IsValid,\n  b2WeldJointDef,\n  b2WeldJoint_GetAngularDampingRatio,\n  b2WeldJoint_GetAngularHertz,\n  b2WeldJoint_GetLinearDampingRatio,\n  b2WeldJoint_GetLinearHertz,\n  b2WeldJoint_SetAngularDampingRatio,\n  b2WeldJoint_SetAngularHertz,\n  b2WeldJoint_SetLinearDampingRatio,\n  b2WeldJoint_SetLinearHertz,\n  b2WheelJointDef,\n  b2WheelJoint_EnableLimit,\n  b2WheelJoint_EnableMotor,\n  b2WheelJoint_EnableSpring,\n  b2WheelJoint_GetLowerLimit,\n  b2WheelJoint_GetMaxMotorTorque,\n  b2WheelJoint_GetMotorSpeed,\n  b2WheelJoint_GetMotorTorque,\n  b2WheelJoint_GetSpringDampingRatio,\n  b2WheelJoint_GetSpringHertz,\n  b2WheelJoint_GetUpperLimit,\n  b2WheelJoint_IsLimitEnabled,\n  b2WheelJoint_IsMotorEnabled,\n  b2WheelJoint_IsSpringEnabled,\n  b2WheelJoint_SetLimits,\n  b2WheelJoint_SetMaxMotorTorque,\n  b2WheelJoint_SetMotorSpeed,\n  b2WheelJoint_SetSpringDampingRatio,\n  b2WheelJoint_SetSpringHertz,\n  b2WorldDef,\n  b2WorldId,\n  b2World_CastCapsule,\n  b2World_CastCircle,\n  b2World_CastPolygon,\n  b2World_CastRay,\n  b2World_CastRayClosest,\n  b2World_Draw,\n  b2World_DumpMemoryStats,\n  b2World_EnableContinuous,\n  b2World_EnableSleeping,\n  b2World_EnableWarmStarting,\n  b2World_Explode,\n  b2World_GetBodyEvents,\n  b2World_GetContactEvents,\n  b2World_GetCounters,\n  b2World_GetGravity,\n  b2World_GetProfile,\n  b2World_GetSensorEvents,\n  b2World_IsValid,\n  b2World_OverlapAABB,\n  b2World_OverlapCapsule,\n  b2World_OverlapCircle,\n  b2World_OverlapPolygon,\n  b2World_SetContactTuning,\n  b2World_SetCustomFilterCallback,\n  b2World_SetGravity,\n  b2World_SetHitEventThreshold,\n  b2World_SetPreSolveCallback,\n  b2World_SetRestitutionThreshold,\n  b2World_Step,\n  b2Yield,\n  mpx,\n  pxm,\n  pxmVec2\n};\n"],
  "mappings": "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",
  "names": []
}
